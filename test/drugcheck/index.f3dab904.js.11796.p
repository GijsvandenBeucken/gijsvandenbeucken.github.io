// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"iEcXk":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "6ab615fef3dab904";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"axVHp":[function(require,module,exports) {
// Import from "@inrupt/solid-client-authn-browser"
var _solidClientAuthnBrowser = require("@inrupt/solid-client-authn-browser");
var _vocabCommonRdf = require("@inrupt/vocab-common-rdf");
const selectorIdP = document.querySelector("#select-idp");
const selectorPod = document.querySelector("#select-pod");
let buttonLogin = document.querySelector("#btnLogin");
const buttonCreate = document.querySelector("#btnCreate");
const labelCreateStatus = document.querySelector("#labelCreateStatus");
//const herosection = document.querySelector("#hero");
//buttonCreate.setAttribute("disabled", "disabled");
// 1a. Start Login Process. Call login() function.
function loginToSelectedIdP() {
    const SELECTED_IDP = document.getElementById("select-idp").value;
    return (0, _solidClientAuthnBrowser.login)({
        oidcIssuer: SELECTED_IDP,
        redirectUrl: window.location.href.toString(),
        clientName: "Getting started app"
    });
}
buttonLogin.onclick = function() {
    loginToSelectedIdP();
};
// 1b. Login Redirect. Call handleIncomingRedirect() function.
// When redirected after login, finish the process by retrieving session information.
async function handleRedirectAfterLogin() {
    await (0, _solidClientAuthnBrowser.handleIncomingRedirect)(); // no-op if not part of login redirect
    const session = (0, _solidClientAuthnBrowser.getDefaultSession)();
    if (session.info.isLoggedIn) {
        // Update the page with the status.
        document.getElementById("myWebID").value = session.info.webId;
        const rawdataSection = document.getElementById("rendered-ips");
        rawdataSection.style.display = "block";
        buttonLogin.style.display = "none"; // Always set to "block"
        hero.style.display = "none";
    // Enable Create button to read Pod URL
    //buttonCreate.removeAttribute("disabled");
    // updateCreateButtonState();
    }
}
// The example has the login redirect back to the root page.
// The page calls this method, which, in turn, calls handleIncomingRedirect.
handleRedirectAfterLogin();
// Assuming you have obtained the user's WebID after logging in
buttonCreate.onclick = function() {
    createList(), fetchMedicationData();
    // Show or hide the "Summary" section
    const summarySection = document.getElementById("summary");
    if (summarySection.style.display === "none") summarySection.style.display = "block";
    else summarySection.style.display = "none";
};
// Function to render human-readable IPS data
function renderHumanReadableIPS(ipsData) {
    const humanReadableIPS = JSON.stringify(ipsData, null, 2);
    document.getElementById("humanReadableIPS").value = humanReadableIPS;
}
// 3. Fetch and display the ips.json data
async function createList() {
    labelCreateStatus.textContent = "Fetching Patient Summary..."; // Display a loading message
    const ipsJsonUrl = "https://gijs.solidcommunity.net/ips.json";
    try {
        const response = await (0, _solidClientAuthnBrowser.fetch)(ipsJsonUrl);
        if (response.ok) {
            const ipsData = await response.json();
            // Display the IPS data in the "Reading List Status" field
            labelCreateStatus.textContent = "Patient summary and medication data fetched successfully.";
            // Render the human-readable IPS data
            renderHumanReadableIPS(ipsData);
        } else labelCreateStatus.textContent = "Failed to fetch IPS data. Status: " + response.status;
    } catch (error) {
        console.error(error);
        labelCreateStatus.textContent = "Error: " + error.message;
    }
}
// Function to render medication data
function renderMedicationData(medicationData) {
    const formattedData = JSON.stringify(medicationData, null, 2);
}
let displayValue; //= medicationData.code.coding[0].display; // Assuming it's the first item in the "coding" array
let medicationJsonUrl = "https://gijs.solidcommunity.net/ips/medication/medication.json";
async function fetchMedicationData() {
    //labelCreateStatus.textContent = "Fetching Medication Data..."; // Display a loading message
    try {
        const response = await (0, _solidClientAuthnBrowser.fetch)(medicationJsonUrl);
        if (response.ok) {
            const medicationData = await response.json();
            // Display the Medication data in the "Medication Data" field
            //labelCreateStatus.textContent = "Medication data fetched successfully.";
            // Render the medication data
            renderMedicationData(medicationData);
            // Display the "display" value
            displayValue = medicationData.code.coding[0].display;
            document.getElementById("displayValue").textContent = `${displayValue}`;
        } else labelCreateStatus.textContent = "Failed to fetch Medication data. Status: " + response.status;
    } catch (error) {
        console.error(error);
        labelCreateStatus.textContent = "Error: " + error.message;
    }
}
async function saveMedicationData() {
    const medicationJsonUrl = "https://gijs.solidcommunity.net/ips/medication/medication.json";
    try {
        // Fetch the existing JSON data
        const response = await (0, _solidClientAuthnBrowser.fetch)(medicationJsonUrl);
        if (!response.ok) throw new Error("Failed to fetch the existing JSON data.");
        const existingMedicationData = await response.json();
        // Update the medication data
        existingMedicationData.code.coding[0].display = inputMedication.value;
        // Make a PUT request to update the JSON data
        const putResponse = await (0, _solidClientAuthnBrowser.fetch)(medicationJsonUrl, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(existingMedicationData)
        });
        if (putResponse.ok) console.log("Medication data updated successfully.");
        else console.error("Failed to update medication data. Status: " + putResponse.status);
    } catch (error) {
        console.error("Error: " + error.message);
    }
}
// Edit Medication Button
const editMedicationButton = document.getElementById("editMedicationButton");
const saveMedicationButton = document.getElementById("saveMedicationButton");
const inputMedication = document.getElementById("inputMedication");
const editMedicationForm = document.getElementById("editMedicationForm");
editMedicationButton.addEventListener("click", ()=>{
    // Set the input field value to the current medication display value
    inputMedication.value = displayValue;
    inputMedication.style.display = "block";
    editMedicationButton.style.display = "none";
    document.getElementById("displayValue").style.display = "none";
    saveMedicationButton.style.display = "block";
});
saveMedicationButton.addEventListener("click", ()=>{
    // Update the display value and display it in the HTML
    displayValue = inputMedication.value;
    document.getElementById("displayValue").textContent = `${displayValue}`;
    document.getElementById("displayValue").style.display = "block";
    inputMedication.style.display = "none";
    editMedicationButton.style.display = "block";
    saveMedicationButton.style.display = "none";
    saveMedicationData();
});
editMedicationForm.addEventListener("submit", function(event) {
    event.preventDefault();
});
// collapsible
var coll = document.getElementsByClassName("collapsible");
var i;
for(i = 0; i < coll.length; i++)coll[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var content = this.nextElementSibling;
    if (content.style.maxHeight) content.style.maxHeight = null;
    else content.style.maxHeight = content.scrollHeight + "100px";
});

},{"@inrupt/solid-client-authn-browser":"aAD3B","@inrupt/vocab-common-rdf":"8X2Ta"}],"aAD3B":[function(require,module,exports) {
"use strict";
var solidClientAuthnCore = require("b1384f57e3296332");
var uuid = require("7162e7700ef7bd0c");
var EventEmitter = require("504de33f55e16f6c");
var oidcClientExt = require("3401a1c035d0d611");
var universalFetch = require("9d7babe623e1db3f");
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * This class in a no-value-added extension of StorageUtility from the core module.
 * The reason it has to be declared is for TSyringe to find the decorators in the
 * same modules as where the dependency container is declared (in this case,
 * the browser module, with the dependancy container in dependencies.ts).
 * @hidden
 */ class StorageUtilityBrowser extends solidClientAuthnCore.StorageUtility {
    constructor(secureStorage, insecureStorage){
        super(secureStorage, insecureStorage);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class ClientAuthentication extends solidClientAuthnCore.ClientAuthentication {
    constructor(){
        super(...arguments);
        // Define these functions as properties so that they don't get accidentally re-bound.
        // Isn't Javascript fun?
        this.login = async (options, eventEmitter)=>{
            var _a, _b;
            // In order to get a clean start, make sure that the session is logged out
            // on login.
            // But we may want to preserve our client application info, particularly if
            // we used Dynamic Client Registration to register (since we don't
            // necessarily want the user to have to register this app each time they
            // login).
            await this.sessionInfoManager.clear(options.sessionId);
            // In the case of the user hitting the 'back' button in their browser, they
            // could return to a previous redirect URL that contains OIDC params that
            // are now longer valid. To be safe, strip relevant params now.
            // If the user is providing a redirect IRI, it should not be modified, so
            // normalization only applies if we default to the current location (which is
            // a bad practice and should be discouraged).
            const redirectUrl = (_a = options.redirectUrl) !== null && _a !== void 0 ? _a : oidcClientExt.removeOidcQueryParam(window.location.href);
            if (!solidClientAuthnCore.isValidRedirectUrl(redirectUrl)) throw new Error(`${redirectUrl} is not a valid redirect URL, it is either a malformed IRI, includes a hash fragment, or reserved query parameters ('code' or 'state').`);
            await this.loginHandler.handle({
                ...options,
                redirectUrl,
                // If no clientName is provided, the clientId may be used instead.
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
                eventEmitter
            });
        };
        // Collects session information from storage, and returns them. Returns null
        // if the expected information cannot be found.
        // Note that the ID token is not stored, which means the session information
        // cannot be validated at this point.
        this.validateCurrentSession = async (currentSessionId)=>{
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined || sessionInfo.clientAppId === undefined || sessionInfo.issuer === undefined) return null;
            return sessionInfo;
        };
        this.handleIncomingRedirect = async (url, eventEmitter)=>{
            try {
                const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
                // The `FallbackRedirectHandler` directly returns the global `fetch` for
                // his value, so we should ensure it's bound to `window` rather than to
                // ClientAuthentication, to avoid the following error:
                // > 'fetch' called on an object that does not implement interface Window.
                this.fetch = redirectInfo.fetch.bind(window);
                this.boundLogout = redirectInfo.getLogoutUrl;
                // Strip the oauth params:
                await this.cleanUrlAfterRedirect(url);
                return {
                    isLoggedIn: redirectInfo.isLoggedIn,
                    webId: redirectInfo.webId,
                    sessionId: redirectInfo.sessionId,
                    expirationDate: redirectInfo.expirationDate
                };
            } catch (err) {
                // Strip the oauth params:
                await this.cleanUrlAfterRedirect(url);
                // FIXME: EVENTS.ERROR should be errorCode, errorDescription
                //
                // I'm not sure if "redirect" is a good error code, and in theory `err`
                // maybe an Error object and not a string; Maybe we want to just hardcode
                // a description instead?
                eventEmitter.emit(solidClientAuthnCore.EVENTS.ERROR, "redirect", err);
                return undefined;
            }
        };
    }
    async cleanUrlAfterRedirect(url) {
        const cleanedUpUrl = new URL(url);
        cleanedUpUrl.searchParams.delete("state");
        // For auth code flow
        cleanedUpUrl.searchParams.delete("code");
        // For implicit flow
        cleanedUpUrl.searchParams.delete("id_token");
        cleanedUpUrl.searchParams.delete("access_token");
        // For login error
        cleanedUpUrl.searchParams.delete("error");
        cleanedUpUrl.searchParams.delete("error_description");
        cleanedUpUrl.searchParams.delete("iss");
        // Remove OAuth-specific query params (since the login flow finishes with
        // the browser being redirected back with OAuth2 query params (e.g. for
        // 'code' and 'state'), and so if the user simply refreshes this page our
        // authentication library will be called again with what are now invalid
        // query parameters!).
        window.history.replaceState(null, "", cleanedUpUrl.toString());
        while(window.location.href !== cleanedUpUrl.href)// Poll the current URL every ms. Active polling is required because
        // window.history.replaceState is asynchronous, but the associated
        // 'popstate' event which should be listened to is only sent on active
        // navigation, which we will not have here.
        // See https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent
        // eslint-disable-next-line no-await-in-loop
        await new Promise((resolve)=>{
            setTimeout(()=>resolve(), 1);
        });
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
function hasRedirectUrl(options) {
    return typeof options.redirectUrl === "string";
}
/**
 * @hidden
 */ class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar){
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options) && hasRedirectUrl(options);
    }
    async handle(options) {
        if (!hasIssuer(options)) throw new solidClientAuthnCore.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        if (!hasRedirectUrl(options)) throw new solidClientAuthnCore.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);
        // Fetch issuer config.
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        const clientRegistration = await solidClientAuthnCore.handleRegistration(options, issuerConfig, this.storageUtility, this.clientRegistrar);
        // Construct OIDC Options
        const OidcOptions = {
            // Note that here, the issuer is not the one from the received options, but
            // from the issuer's config. This enforces the canonical URL is used and stored,
            // which is also the one present in the ID token, so storing a technically
            // valid, but different issuer URL (e.g. using a trailing slash or not) now
            // could prevent from validating the ID token later.
            issuer: issuerConfig.issuer,
            // TODO: differentiate if DPoP should be true
            dpop: options.tokenType.toLowerCase() === "dpop",
            ...options,
            issuerConfiguration: issuerConfig,
            client: clientRegistration
        };
        // Call proper OIDC Handler
        return this.oidcHandler.handle(OidcOptions);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth
 * PKCE: https://tools.ietf.org/html/rfc7636
 */ class AuthorizationCodeWithPkceOidcHandler extends solidClientAuthnCore.AuthorizationCodeWithPkceOidcHandlerBase {
    async handle(oidcLoginOptions) {
        var _a;
        /* eslint-disable camelcase */ const oidcOptions = {
            authority: oidcLoginOptions.issuer.toString(),
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
            redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            response_type: "code",
            scope: solidClientAuthnCore.DEFAULT_SCOPES,
            filterProtocolClaims: true,
            // The userinfo endpoint on NSS fails, so disable this for now
            // Note that in Solid, information should be retrieved from the
            // profile referenced by the WebId.
            loadUserInfo: false,
            code_verifier: true,
            prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : "consent"
        };
        /* eslint-enable camelcase */ const oidcClientLibrary = new oidcClientExt.OidcClient(oidcOptions);
        try {
            const signingRequest = await oidcClientLibrary.createSigninRequest();
            // Make sure to await the promise before returning so that the error is caught.
            return await this.handleRedirect({
                oidcLoginOptions,
                // eslint-disable-next-line no-underscore-dangle
                state: signingRequest.state._id,
                // eslint-disable-next-line no-underscore-dangle
                codeVerifier: signingRequest.state._code_verifier,
                targetUrl: signingRequest.url.toString()
            });
        } catch (err) {
            // eslint-disable-next-line no-console
            console.error(err);
        }
        // The login is only completed AFTER redirect, so nothing to return here.
        return undefined;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
/* eslint-disable camelcase */ const issuerConfigKeyMap = {
    issuer: {
        toKey: "issuer",
        convertToUrl: true
    },
    authorization_endpoint: {
        toKey: "authorizationEndpoint",
        convertToUrl: true
    },
    token_endpoint: {
        toKey: "tokenEndpoint",
        convertToUrl: true
    },
    userinfo_endpoint: {
        toKey: "userinfoEndpoint",
        convertToUrl: true
    },
    jwks_uri: {
        toKey: "jwksUri",
        convertToUrl: true
    },
    registration_endpoint: {
        toKey: "registrationEndpoint",
        convertToUrl: true
    },
    end_session_endpoint: {
        toKey: "endSessionEndpoint",
        convertToUrl: true
    },
    scopes_supported: {
        toKey: "scopesSupported"
    },
    response_types_supported: {
        toKey: "responseTypesSupported"
    },
    response_modes_supported: {
        toKey: "responseModesSupported"
    },
    grant_types_supported: {
        toKey: "grantTypesSupported"
    },
    acr_values_supported: {
        toKey: "acrValuesSupported"
    },
    subject_types_supported: {
        toKey: "subjectTypesSupported"
    },
    id_token_signing_alg_values_supported: {
        toKey: "idTokenSigningAlgValuesSupported"
    },
    id_token_encryption_alg_values_supported: {
        toKey: "idTokenEncryptionAlgValuesSupported"
    },
    id_token_encryption_enc_values_supported: {
        toKey: "idTokenEncryptionEncValuesSupported"
    },
    userinfo_signing_alg_values_supported: {
        toKey: "userinfoSigningAlgValuesSupported"
    },
    userinfo_encryption_alg_values_supported: {
        toKey: "userinfoEncryptionAlgValuesSupported"
    },
    userinfo_encryption_enc_values_supported: {
        toKey: "userinfoEncryptionEncValuesSupported"
    },
    request_object_signing_alg_values_supported: {
        toKey: "requestObjectSigningAlgValuesSupported"
    },
    request_object_encryption_alg_values_supported: {
        toKey: "requestObjectEncryptionAlgValuesSupported"
    },
    request_object_encryption_enc_values_supported: {
        toKey: "requestObjectEncryptionEncValuesSupported"
    },
    token_endpoint_auth_methods_supported: {
        toKey: "tokenEndpointAuthMethodsSupported"
    },
    token_endpoint_auth_signing_alg_values_supported: {
        toKey: "tokenEndpointAuthSigningAlgValuesSupported"
    },
    display_values_supported: {
        toKey: "displayValuesSupported"
    },
    claim_types_supported: {
        toKey: "claimTypesSupported"
    },
    claims_supported: {
        toKey: "claimsSupported"
    },
    service_documentation: {
        toKey: "serviceDocumentation"
    },
    claims_locales_supported: {
        toKey: "claimsLocalesSupported"
    },
    ui_locales_supported: {
        toKey: "uiLocalesSupported"
    },
    claims_parameter_supported: {
        toKey: "claimsParameterSupported"
    },
    request_parameter_supported: {
        toKey: "requestParameterSupported"
    },
    request_uri_parameter_supported: {
        toKey: "requestUriParameterSupported"
    },
    require_request_uri_registration: {
        toKey: "requireRequestUriRegistration"
    },
    op_policy_uri: {
        toKey: "opPolicyUri",
        convertToUrl: true
    },
    op_tos_uri: {
        toKey: "opTosUri",
        convertToUrl: true
    }
};
/* eslint-enable camelcase */ function processConfig(config) {
    const parsedConfig = {};
    Object.keys(config).forEach((key)=>{
        if (issuerConfigKeyMap[key]) // TODO: PMcB55: Validate URL if "issuerConfigKeyMap[key].convertToUrl"
        //  if (issuerConfigKeyMap[key].convertToUrl) {
        //   validateUrl(config[key]);
        //  }
        parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];
    });
    if (!Array.isArray(parsedConfig.scopesSupported)) parsedConfig.scopesSupported = [
        "openid"
    ];
    return parsedConfig;
}
/**
 * @hidden
 */ class IssuerConfigFetcher {
    constructor(storageUtility){
        this.storageUtility = storageUtility;
        this.storageUtility = storageUtility;
    }
    // This method needs no state (so can be static), and can be exposed to allow
    // callers to know where this implementation puts state it needs.
    static getLocalStorageKey(issuer) {
        return `issuerConfig:${issuer}`;
    }
    async fetchConfig(issuer) {
        let issuerConfig;
        const openIdConfigUrl = new URL(WELL_KNOWN_OPENID_CONFIG, // Make sure to append a slash at issuer URL, so that the .well-known URL
        // includes the full issuer path. See https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig.
        issuer.endsWith("/") ? issuer : `${issuer}/`).href;
        const issuerConfigRequestBody = await universalFetch.fetch.call(globalThis, openIdConfigUrl);
        // Check the validity of the fetched config
        try {
            issuerConfig = processConfig(await issuerConfigRequestBody.json());
        } catch (err) {
            throw new solidClientAuthnCore.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);
        }
        // Update store with fetched config
        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
        return issuerConfig;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @param sessionId
 * @param storage
 * @hidden
 */ async function clear(sessionId, storage) {
    await solidClientAuthnCore.clear(sessionId, storage);
    await oidcClientExt.clearOidcPersistentStorage();
}
/**
 * @hidden
 */ class SessionInfoManager extends solidClientAuthnCore.SessionInfoManagerBase {
    async get(sessionId) {
        const [isLoggedIn, webId, clientId, clientSecret, redirectUrl, refreshToken, issuer, tokenType] = await Promise.all([
            this.storageUtility.getForUser(sessionId, "isLoggedIn", {
                secure: true
            }),
            this.storageUtility.getForUser(sessionId, "webId", {
                secure: true
            }),
            this.storageUtility.getForUser(sessionId, "clientId", {
                secure: false
            }),
            this.storageUtility.getForUser(sessionId, "clientSecret", {
                secure: false
            }),
            this.storageUtility.getForUser(sessionId, "redirectUrl", {
                secure: false
            }),
            this.storageUtility.getForUser(sessionId, "refreshToken", {
                secure: true
            }),
            this.storageUtility.getForUser(sessionId, "issuer", {
                secure: false
            }),
            this.storageUtility.getForUser(sessionId, "tokenType", {
                secure: false
            })
        ]);
        if (typeof redirectUrl === "string" && !solidClientAuthnCore.isValidRedirectUrl(redirectUrl)) {
            // This resolves the issue for people experiencing https://github.com/inrupt/solid-client-authn-js/issues/2891.
            // An invalid redirect URL is present in the storage, and the session should
            // be cleared to get a fresh start. This will require the user to log back in.
            await Promise.all([
                this.storageUtility.deleteAllUserData(sessionId, {
                    secure: false
                }),
                this.storageUtility.deleteAllUserData(sessionId, {
                    secure: true
                })
            ]);
            return undefined;
        }
        if (tokenType !== undefined && !solidClientAuthnCore.isSupportedTokenType(tokenType)) throw new Error(`Tokens of type [${tokenType}] are not supported.`);
        if (clientId === undefined && isLoggedIn === undefined && webId === undefined && refreshToken === undefined) return undefined;
        return {
            sessionId,
            webId,
            isLoggedIn: isLoggedIn === "true",
            redirectUrl,
            refreshToken,
            issuer,
            clientAppId: clientId,
            clientAppSecret: clientSecret,
            // Default the token type to DPoP if unspecified.
            tokenType: tokenType !== null && tokenType !== void 0 ? tokenType : "DPoP"
        };
    }
    /**
     * This function removes all session-related information from storage.
     * @param sessionId the session identifier
     * @param storage the storage where session info is stored
     * @hidden
     */ async clear(sessionId) {
        return clear(sessionId, this.storageUtility);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * This class handles redirect IRIs without any query params, and returns an unauthenticated
 * session. It serves as a fallback so that consuming libraries don't have to test
 * for the query params themselves, and can always try to use them as a redirect IRI.
 * @hidden
 */ class FallbackRedirectHandler {
    async canHandle(redirectUrl) {
        try {
            // The next URL object is built for validating it.
            // eslint-disable-next-line no-new
            new URL(redirectUrl);
            return true;
        } catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(// The argument is ignored, but must be present to implement the interface
    _redirectUrl) {
        return solidClientAuthnCore.getUnauthenticatedSession();
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ // FIXME: The following doesn't work in the browser, it results in all the fetches
// being unauthenticated. This should be looked into when migrating to universal-fetch.
// import { fetch } from "cross-fetch";
const globalFetch = (...args)=>universalFetch.fetch.call(globalThis, ...args);
/**
 * @hidden
 */ class AuthCodeRedirectHandler {
    constructor(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokerRefresher){
        this.storageUtility = storageUtility;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.tokerRefresher = tokerRefresher;
        this.storageUtility = storageUtility;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.tokerRefresher = tokerRefresher;
    }
    async canHandle(redirectUrl) {
        try {
            const myUrl = new URL(redirectUrl);
            return myUrl.searchParams.get("code") !== null && myUrl.searchParams.get("state") !== null;
        } catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (!await this.canHandle(redirectUrl)) throw new Error(`AuthCodeRedirectHandler cannot handle [${redirectUrl}]: it is missing one of [code, state].`);
        const url = new URL(redirectUrl);
        const oauthState = url.searchParams.get("state");
        const storedSessionId = await this.storageUtility.getForUser(oauthState, "sessionId", {
            errorIfNull: true
        });
        const { issuerConfig, codeVerifier, redirectUrl: storedRedirectIri, dpop: isDpop } = await solidClientAuthnCore.loadOidcContextFromStorage(storedSessionId, this.storageUtility, this.issuerConfigFetcher);
        const iss = url.searchParams.get("iss");
        if (typeof iss === "string" && iss !== issuerConfig.issuer) throw new Error(`The value of the iss parameter (${iss}) does not match the issuer identifier of the authorization server (${issuerConfig.issuer}). See [rfc9207](https://www.rfc-editor.org/rfc/rfc9207.html#section-2.3-3.1.1)`);
        if (codeVerifier === undefined) throw new Error(`The code verifier for session ${storedSessionId} is missing from storage.`);
        if (storedRedirectIri === undefined) throw new Error(`The redirect URL for session ${storedSessionId} is missing from storage.`);
        const client = await this.clientRegistrar.getClient({
            sessionId: storedSessionId
        }, issuerConfig);
        let tokens;
        const tokenCreatedAt = Date.now();
        if (isDpop) {
            tokens = await oidcClientExt.getDpopToken(issuerConfig, client, {
                grantType: "authorization_code",
                // We rely on our 'canHandle' function checking that the OAuth 'code'
                // parameter is present in our query string.
                code: url.searchParams.get("code"),
                codeVerifier,
                redirectUrl: storedRedirectIri
            });
            // Delete oidc-client-specific session information from storage. This is
            // done automatically when retrieving a bearer token, but since the DPoP
            // binding uses our custom code, this needs to be done manually.
            window.localStorage.removeItem(`oidc.${oauthState}`);
        } else tokens = await oidcClientExt.getBearerToken(url.toString());
        let refreshOptions;
        if (tokens.refreshToken !== undefined) refreshOptions = {
            sessionId: storedSessionId,
            refreshToken: tokens.refreshToken,
            tokenRefresher: this.tokerRefresher
        };
        const authFetch = await solidClientAuthnCore.buildAuthenticatedFetch(globalFetch, tokens.accessToken, {
            dpopKey: tokens.dpopKey,
            refreshOptions,
            eventEmitter,
            expiresIn: tokens.expiresIn
        });
        await this.storageUtility.setForUser(storedSessionId, {
            webId: tokens.webId,
            isLoggedIn: "true"
        }, {
            secure: true
        });
        const sessionInfo = await this.sessionInfoManager.get(storedSessionId);
        if (!sessionInfo) throw new Error(`Could not retrieve session: [${storedSessionId}].`);
        return Object.assign(sessionInfo, {
            fetch: authFetch,
            getLogoutUrl: solidClientAuthnCore.maybeBuildRpInitiatedLogout({
                idTokenHint: tokens.idToken,
                endSessionEndpoint: issuerConfig.endSessionEndpoint
            }),
            expirationDate: typeof tokens.expiresIn === "number" ? tokenCreatedAt + tokens.expiresIn * 1000 : undefined
        });
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class AggregateRedirectHandler extends solidClientAuthnCore.AggregateHandler {
    constructor(redirectHandlers){
        super(redirectHandlers);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class BrowserStorage {
    get storage() {
        return window.localStorage;
    }
    async get(key) {
        return this.storage.getItem(key) || undefined;
    }
    async set(key, value) {
        this.storage.setItem(key, value);
    }
    async delete(key) {
        this.storage.removeItem(key);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class Redirector {
    redirect(redirectUrl, options) {
        if (options && options.handleRedirect) options.handleRedirect(redirectUrl);
        else if (options && options.redirectByReplacingState) window.history.replaceState({}, "", redirectUrl);
        else window.location.href = redirectUrl;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class ClientRegistrar {
    constructor(storageUtility){
        this.storageUtility = storageUtility;
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        // If client secret and/or client id are stored in storage, use those.
        const [storedClientId, storedClientSecret] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId", {
                secure: false
            }),
            this.storageUtility.getForUser(options.sessionId, "clientSecret", {
                secure: false
            })
        ]);
        if (storedClientId) return {
            clientId: storedClientId,
            clientSecret: storedClientSecret,
            clientType: "dynamic"
        };
        try {
            const registeredClient = await oidcClientExt.registerClient(options, issuerConfig);
            // Save info
            const infoToSave = {
                clientId: registeredClient.clientId
            };
            if (registeredClient.clientSecret) infoToSave.clientSecret = registeredClient.clientSecret;
            if (registeredClient.idTokenSignedResponseAlg) infoToSave.idTokenSignedResponseAlg = registeredClient.idTokenSignedResponseAlg;
            await this.storageUtility.setForUser(options.sessionId, infoToSave, {
                // FIXME: figure out how to persist secure storage at reload
                // Otherwise, the client info cannot be retrieved from storage, and
                // the lib tries to re-register the client on each fetch
                secure: false
            });
            return registeredClient;
        } catch (error) {
            throw new Error(`Client registration failed: [${error}]`);
        }
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * This class handles redirect IRIs without any query params, and returns an unauthenticated
 * session. It serves as a fallback so that consuming libraries don't have to test
 * for the query params themselves, and can always try to use them as a redirect IRI.
 * @hidden
 */ class ErrorOidcHandler {
    async canHandle(redirectUrl) {
        try {
            // eslint-disable-next-line no-new
            return new URL(redirectUrl).searchParams.has("error");
        } catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`);
        }
    }
    async handle(redirectUrl, eventEmitter) {
        if (eventEmitter !== undefined) {
            const url = new URL(redirectUrl);
            const errorUrl = url.searchParams.get("error");
            const errorDescriptionUrl = url.searchParams.get("error_description");
            eventEmitter.emit(solidClientAuthnCore.EVENTS.ERROR, errorUrl, errorDescriptionUrl);
        }
        return solidClientAuthnCore.getUnauthenticatedSession();
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Some identifiers are not in camelcase on purpose, as they are named using the
// official names from the OIDC/OAuth2 specifications.
/* eslint-disable camelcase */ /**
 * @hidden
 */ class TokenRefresher {
    constructor(storageUtility, issuerConfigFetcher, clientRegistrar){
        this.storageUtility = storageUtility;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
        this.storageUtility = storageUtility;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {
        const oidcContext = await solidClientAuthnCore.loadOidcContextFromStorage(sessionId, this.storageUtility, this.issuerConfigFetcher);
        // This should also retrieve the client from storage
        const clientInfo = await this.clientRegistrar.getClient({
            sessionId
        }, oidcContext.issuerConfig);
        if (refreshToken === undefined) // TODO: in a next PR, look up storage for a refresh token
        throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);
        if (oidcContext.dpop && dpopKey === undefined) throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);
        const tokenSet = await oidcClientExt.refresh(refreshToken, oidcContext.issuerConfig, clientInfo, dpopKey);
        if (tokenSet.refreshToken !== undefined) {
            eventEmitter === null || eventEmitter === void 0 || eventEmitter.emit(solidClientAuthnCore.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
            await this.storageUtility.setForUser(sessionId, {
                refreshToken: tokenSet.refreshToken
            });
        }
        return tokenSet;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 *
 * @param dependencies
 * @deprecated This function will be removed from the external API in an upcoming release.
 */ function getClientAuthenticationWithDependencies(dependencies) {
    const inMemoryStorage = new solidClientAuthnCore.InMemoryStorage();
    const secureStorage = dependencies.secureStorage || inMemoryStorage;
    const insecureStorage = dependencies.insecureStorage || new BrowserStorage();
    const storageUtility = new StorageUtilityBrowser(secureStorage, insecureStorage);
    const issuerConfigFetcher = new IssuerConfigFetcher(storageUtility);
    const clientRegistrar = new ClientRegistrar(storageUtility);
    const sessionInfoManager = new SessionInfoManager(storageUtility);
    const tokenRefresher = new TokenRefresher(storageUtility, issuerConfigFetcher, clientRegistrar);
    const redirector = new Redirector();
    // make new handler for redirect and login
    const loginHandler = new OidcLoginHandler(storageUtility, new AuthorizationCodeWithPkceOidcHandler(storageUtility, redirector), issuerConfigFetcher, clientRegistrar);
    const redirectHandler = new AggregateRedirectHandler([
        new ErrorOidcHandler(),
        new AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar, tokenRefresher),
        // This catch-all class will always be able to handle the
        // redirect IRI, so it must be registered last.
        new FallbackRedirectHandler()
    ]);
    return new ClientAuthentication(loginHandler, redirectHandler, new solidClientAuthnCore.IWaterfallLogoutHandler(sessionInfoManager, redirector), sessionInfoManager, issuerConfigFetcher);
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const KEY_CURRENT_SESSION = `${solidClientAuthnCore.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentSession`;
const KEY_CURRENT_URL = `${solidClientAuthnCore.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentUrl`;
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
async function silentlyAuthenticate(sessionId, clientAuthn, session) {
    var _a;
    const storedSessionInfo = await clientAuthn.validateCurrentSession(sessionId);
    if (storedSessionInfo !== null) {
        // It can be really useful to save the user's current browser location,
        // so that we can restore it after completing the silent authentication
        // on incoming redirect. This way, the user is eventually redirected back
        // to the page they were on and not to the app's redirect page.
        window.localStorage.setItem(KEY_CURRENT_URL, window.location.href);
        await clientAuthn.login({
            sessionId,
            prompt: "none",
            oidcIssuer: storedSessionInfo.issuer,
            redirectUrl: storedSessionInfo.redirectUrl,
            clientId: storedSessionInfo.clientAppId,
            clientSecret: storedSessionInfo.clientAppSecret,
            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : "DPoP"
        }, session.events);
        return true;
    }
    return false;
}
function isLoggedIn(sessionInfo) {
    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);
}
/**
 * A {@link Session} object represents a user's session on an application. The session holds state, as it stores information enabling acces to private resources after login for instance.
 */ class Session extends EventEmitter {
    /**
     * Session object constructor. Typically called as follows:
     *
     * ```typescript
     * const session = new Session();
     * ```
     *
     * See also [getDefaultSession](https://docs.inrupt.com/developer-tools/api/javascript/solid-client-authn-browser/functions.html#getdefaultsession).
     *
     * @param sessionOptions The options enabling the correct instantiation of
     * the session. Either both storages or clientAuthentication are required. For
     * more information, see {@link ISessionOptions}.
     * @param sessionId A string uniquely identifying the session.
     *
     */ constructor(sessionOptions = {}, sessionId){
        super();
        this.tokenRequestInProgress = false;
        /**
         * Triggers the login process. Note that this method will redirect the user away from your app.
         *
         * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.
         * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by {@linkcode handleIncomingRedirect}.
         */ // Define these functions as properties so that they don't get accidentally re-bound.
        // Isn't Javascript fun?
        this.login = async (options)=>{
            var _a;
            await this.clientAuthentication.login({
                sessionId: this.info.sessionId,
                ...options,
                // Defaults the token type to DPoP
                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : "DPoP"
            }, this.events);
            // `login` redirects the user away from the app,
            // so unless it throws an error, there is no code that should run afterwards
            // (since there is no "after" in the lifetime of the script).
            // Hence, this Promise never resolves:
            return new Promise(()=>{});
        };
        /**
         * Fetches data using available login information. If the user is not logged in, this will behave as a regular `fetch`. The signature of this method is identical to the [canonical `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
         *
         * @param url The URL from which data should be fetched.
         * @param init Optional parameters customizing the request, by specifying an HTTP method, headers, a body, etc. Follows the [WHATWG Fetch Standard](https://fetch.spec.whatwg.org/).
         */ this.fetch = (url, init)=>this.clientAuthentication.fetch(url, init);
        /**
         * An internal logout function, to control whether or not the logout signal
         * should be sent, i.e. if the logout was user-initiated or is the result of
         * an external event.
         *
         * @hidden
         */ this.internalLogout = async (emitSignal, options)=>{
            // Clearing this value means that silent refresh will no longer be attempted.
            // In particular, in the case of a silent authentication error it prevents
            // from getting stuck in an authentication retries loop.
            window.localStorage.removeItem(KEY_CURRENT_SESSION);
            await this.clientAuthentication.logout(this.info.sessionId, options);
            this.info.isLoggedIn = false;
            if (emitSignal) this.events.emit(solidClientAuthnCore.EVENTS.LOGOUT);
        };
        /**
         * Logs the user out of the application.
         *
         * There are 2 types of logout supported by this library,
         * `app` logout and `idp` logout.
         *
         * App logout will log the user out within the application
         * by clearing any session data from the browser. It does
         * not log the user out of their Solid identity provider,
         * and should not redirect the user away.
         * App logout can be performed as follows:
         * ```typescript
         * await session.logout({ logoutType: 'app' });
         * ```
         *
         * IDP logout will log the user out of their Solid identity provider,
         * and will redirect the user away from the application to do so. In order
         * for users to be redirected back to `postLogoutUrl` you MUST include the
         * `postLogoutUrl` value in the `post_logout_redirect_uris` field in the
         * [Client ID Document](https://docs.inrupt.com/ess/latest/security/authentication/#client-identifier-client-id).
         * IDP logout can be performed as follows:
         * ```typescript
         * await session.logout({
         *  logoutType: 'idp',
         *  // An optional URL to redirect to after logout has completed;
         *  // this MUST match a logout URL listed in the Client ID Document
         *  // of the application that is logged in.
         *  // If the application is logged in with a Client ID that is not
         *  // a URI dereferencing to a Client ID Document then users will
         *  // not be redirected back to the `postLogoutUrl` after logout.
         *  postLogoutUrl: 'https://example.com/logout',
         *  // An optional value to be included in the query parameters
         *  // when the IDP provider redirects the user to the postLogoutRedirectUrl.
         *  state: "my-state"
         * });
         * ```
         */ this.logout = async (options)=>this.internalLogout(true, options);
        /**
         * Completes the login process by processing the information provided by the
         * Solid identity provider through redirect.
         *
         * @param options See {@see IHandleIncomingRedirectOptions}.
         */ this.handleIncomingRedirect = async (inputOptions = {})=>{
            var _a;
            if (this.info.isLoggedIn) return this.info;
            if (this.tokenRequestInProgress) return undefined;
            const options = typeof inputOptions === "string" ? {
                url: inputOptions
            } : inputOptions;
            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;
            this.tokenRequestInProgress = true;
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url, this.events);
            if (isLoggedIn(sessionInfo)) {
                this.setSessionInfo(sessionInfo);
                const currentUrl = window.localStorage.getItem(KEY_CURRENT_URL);
                if (currentUrl === null) // The login event can only be triggered **after** the user has been
                // redirected from the IdP with access and ID tokens.
                this.events.emit(solidClientAuthnCore.EVENTS.LOGIN);
                else {
                    // If an URL is stored in local storage, we are being logged in after a
                    // silent authentication, so remove our currently stored URL location
                    // to clean up our state now that we are completing the re-login process.
                    window.localStorage.removeItem(KEY_CURRENT_URL);
                    this.events.emit(solidClientAuthnCore.EVENTS.SESSION_RESTORED, currentUrl);
                }
            } else if (options.restorePreviousSession === true) {
                // Silent authentication happens after a refresh, which means there are no
                // OAuth params in the current location IRI. It can only succeed if a session
                // was previously logged in, in which case its ID will be present with a known
                // identifier in local storage.
                // Check if we have a locally stored session ID...
                const storedSessionId = window.localStorage.getItem(KEY_CURRENT_SESSION);
                // ...if not, then there is no ID token, and so silent authentication cannot happen, but
                // if we do have a stored session ID, attempt to re-authenticate now silently.
                if (storedSessionId !== null) {
                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication, this);
                    // At this point, we know that the main window will imminently be redirected.
                    // However, this redirect is asynchronous and there is no way to halt execution
                    // until it happens precisely. That's why the current Promise simply does not
                    // resolve.
                    if (attemptedSilentAuthentication) return new Promise(()=>{});
                }
            }
            this.tokenRequestInProgress = false;
            return sessionInfo;
        };
        // Until Session no longer implements EventEmitter, this.events is just a proxy
        // to this (with some interface filtering). When we make the breaking change,
        // this.events will be a regular EventEmitter (implementing ISessionEventEmitter):
        // this.events = new EventEmitter();
        this.events = new Proxy(this, solidClientAuthnCore.buildProxyHandler(Session.prototype, "events only implements ISessionEventListener"));
        if (sessionOptions.clientAuthentication) this.clientAuthentication = sessionOptions.clientAuthentication;
        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) this.clientAuthentication = getClientAuthenticationWithDependencies({
            secureStorage: sessionOptions.secureStorage,
            insecureStorage: sessionOptions.insecureStorage
        });
        else this.clientAuthentication = getClientAuthenticationWithDependencies({});
        if (sessionOptions.sessionInfo) this.info = {
            sessionId: sessionOptions.sessionInfo.sessionId,
            isLoggedIn: false,
            webId: sessionOptions.sessionInfo.webId
        };
        else this.info = {
            sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : uuid.v4(),
            isLoggedIn: false
        };
        // When a session is logged in, we want to track its ID in local storage to
        // enable silent refresh. The current session ID specifically stored in 'localStorage'
        // (as opposed to using our storage abstraction layer) because it is only
        // used in a browser-specific mechanism.
        this.events.on(solidClientAuthnCore.EVENTS.LOGIN, ()=>window.localStorage.setItem(KEY_CURRENT_SESSION, this.info.sessionId));
        this.events.on(solidClientAuthnCore.EVENTS.SESSION_EXPIRED, ()=>this.internalLogout(false));
        this.events.on(solidClientAuthnCore.EVENTS.ERROR, ()=>this.internalLogout(false));
    }
    /**
     * Register a callback function to be called when a user completes login.
     *
     * The callback is called when {@link handleIncomingRedirect} completes successfully.
     *
     * @param callback The function called when a user completes login.
     * @deprecated Prefer session.events.on(EVENTS.LOGIN, callback)
     */ onLogin(callback) {
        this.events.on(solidClientAuthnCore.EVENTS.LOGIN, callback);
    }
    /**
     * Register a callback function to be called when a user logs out:
     *
     * @param callback The function called when a user completes logout.
     * @deprecated Prefer session.events.on(EVENTS.LOGOUT, callback)
     */ onLogout(callback) {
        this.events.on(solidClientAuthnCore.EVENTS.LOGOUT, callback);
    }
    /**
     * Register a callback function to be called when a user logs out:
     *
     * @param callback The function called when an error occurs.
     * @since 1.11.0
     * @deprecated Prefer session.events.on(EVENTS.ERROR, callback)
     */ onError(callback) {
        this.events.on(solidClientAuthnCore.EVENTS.ERROR, callback);
    }
    /**
     * Register a callback function to be called when a session is restored.
     *
     * Note: the callback will be called with the saved value of the 'current URL'
     * at the time the session was restored.
     *
     * @param callback The function called when a user's already logged-in session is restored, e.g., after a silent authentication is completed after a page refresh.
     * @deprecated Prefer session.events.on(EVENTS.SESSION_RESTORED, callback)
     */ onSessionRestore(callback) {
        this.events.on(solidClientAuthnCore.EVENTS.SESSION_RESTORED, callback);
    }
    /**
     * Register a callback that runs when the session expires and can no longer
     * make authenticated requests, but following a user logout.
     * @param callback The function that runs on session expiration.
     * @since 1.11.0
     * @deprecated Prefer session.events.on(EVENTS.SESSION_EXPIRED, callback)
     */ onSessionExpiration(callback) {
        this.events.on(solidClientAuthnCore.EVENTS.SESSION_EXPIRED, callback);
    }
    setSessionInfo(sessionInfo) {
        this.info.isLoggedIn = sessionInfo.isLoggedIn;
        this.info.webId = sessionInfo.webId;
        this.info.sessionId = sessionInfo.sessionId;
        this.info.expirationDate = sessionInfo.expirationDate;
        this.events.on(solidClientAuthnCore.EVENTS.SESSION_EXTENDED, (expiresIn)=>{
            this.info.expirationDate = Date.now() + expiresIn * 1000;
        });
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
let defaultSession;
/**
 * Obtain the {@link Session} used when not explicitly instantiating one yourself.
 *
 * When using the top-level exports {@link fetch}, {@link login}, {@link logout},
 * {@link handleIncomingRedirect}, {@link onLogin} and {@link onLogout}, these apply to an
 * implicitly-instantiated {@link Session}.
 * This function returns a reference to that Session in order to obtain e.g. the current user's
 * WebID.
 * @since 1.3.0
 */ function getDefaultSession() {
    if (typeof defaultSession === "undefined") defaultSession = new Session();
    return defaultSession;
}
/**
 * This function's signature is equal to `window.fetch`, but if the current user is authenticated
 * (see [[login]] and [[handleIncomingRedirect]]), requests made using it will include that user's
 * credentials. If not, this will behave just like the regular `window.fetch`.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch}
 * @since 1.3.0
 */ /* eslint-disable-next-line no-shadow */ const fetch = (...args)=>{
    const session = getDefaultSession();
    return session.fetch(...args);
};
/**
 * Triggers the login process. Note that this method will redirect the user away from your app.
 *
 * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.
 * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by [[handleIncomingRedirect]].
 * @since 1.3.0
 */ const login = (...args)=>{
    const session = getDefaultSession();
    return session.login(...args);
};
/**
 * Logs the user out of the application.
 *
 * By default this does not log the user out of their Solid identity provider.
 * In order to do so, you must set the logoutType to `idp`. For usage details
 * see {@link Session.logout}.
 *
 * @since 1.3.0
 */ const logout = (...args)=>{
    const session = getDefaultSession();
    return session.logout(...args);
};
/**
 * Completes the login process by processing the information provided by the Solid identity provider through redirect.
 *
 * @param url The URL of the page handling the redirect, including the query parameters — these contain the information to process the login.
 * @since 1.3.0
 */ const handleIncomingRedirect = (...args)=>{
    const session = getDefaultSession();
    return session.handleIncomingRedirect(...args);
};
/**
 * Register a callback function to be called when a user completes login.
 *
 * The callback is called when {@link handleIncomingRedirect} completes successfully.
 * @since 1.3.0
 *
 * @param callback The function called when a user completes login.
 * @deprecated Prefer events.on(EVENTS.LOGIN, callback)

 */ const onLogin = (...args)=>{
    const session = getDefaultSession();
    return session.onLogin(...args);
};
/**
 * Register a callback function to be called when a user logs out:
 *
 * @param callback The function called when a user completes logout.
 * @since 1.3.0
 * @deprecated Prefer events.on(EVENTS.LOGOUT, callback)
 *
 */ const onLogout = (...args)=>{
    const session = getDefaultSession();
    return session.onLogout(...args);
};
/**
 * Register a callback function to be called when a session is restored:
 *
 * @param callback The function called when a session is restored.
 * @since 1.3.0
 * @deprecated Prefer events.on(EVENTS.SESSION_RESTORED, callback)
 */ const onSessionRestore = (...args)=>{
    const session = getDefaultSession();
    return session.onSessionRestore(...args);
};
/**
 * {@link SessionEventEmitter} instance to subscribe to events by the default session.
 *
 * @since 1.14.0
 */ const events = ()=>{
    return getDefaultSession().events;
};
Object.defineProperty(exports, "ConfigurationError", {
    enumerable: true,
    get: function() {
        return solidClientAuthnCore.ConfigurationError;
    }
});
Object.defineProperty(exports, "EVENTS", {
    enumerable: true,
    get: function() {
        return solidClientAuthnCore.EVENTS;
    }
});
Object.defineProperty(exports, "InMemoryStorage", {
    enumerable: true,
    get: function() {
        return solidClientAuthnCore.InMemoryStorage;
    }
});
Object.defineProperty(exports, "NotImplementedError", {
    enumerable: true,
    get: function() {
        return solidClientAuthnCore.NotImplementedError;
    }
});
exports.Session = Session;
exports.events = events;
exports.fetch = fetch;
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;
exports.getDefaultSession = getDefaultSession;
exports.handleIncomingRedirect = handleIncomingRedirect;
exports.login = login;
exports.logout = logout;
exports.onLogin = onLogin;
exports.onLogout = onLogout;
exports.onSessionRestore = onSessionRestore;

},{"b1384f57e3296332":"9M70v","7162e7700ef7bd0c":"j4KJi","504de33f55e16f6c":"1VQLm","3401a1c035d0d611":"kwSdd","9d7babe623e1db3f":"f7fox"}],"9M70v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AggregateHandler", ()=>AggregateHandler);
parcelHelpers.export(exports, "AuthorizationCodeWithPkceOidcHandlerBase", ()=>AuthorizationCodeWithPkceOidcHandlerBase);
parcelHelpers.export(exports, "ClientAuthentication", ()=>ClientAuthentication);
parcelHelpers.export(exports, "ConfigurationError", ()=>ConfigurationError);
parcelHelpers.export(exports, "DEFAULT_SCOPES", ()=>DEFAULT_SCOPES);
parcelHelpers.export(exports, "EVENTS", ()=>EVENTS);
parcelHelpers.export(exports, "GeneralLogoutHandler", ()=>GeneralLogoutHandler);
parcelHelpers.export(exports, "IRpLogoutHandler", ()=>IRpLogoutHandler);
parcelHelpers.export(exports, "IWaterfallLogoutHandler", ()=>IWaterfallLogoutHandler);
parcelHelpers.export(exports, "InMemoryStorage", ()=>InMemoryStorage);
parcelHelpers.export(exports, "InvalidResponseError", ()=>InvalidResponseError);
parcelHelpers.export(exports, "NotImplementedError", ()=>NotImplementedError);
parcelHelpers.export(exports, "OidcProviderError", ()=>OidcProviderError);
parcelHelpers.export(exports, "PREFERRED_SIGNING_ALG", ()=>PREFERRED_SIGNING_ALG);
parcelHelpers.export(exports, "REFRESH_BEFORE_EXPIRATION_SECONDS", ()=>REFRESH_BEFORE_EXPIRATION_SECONDS);
parcelHelpers.export(exports, "SOLID_CLIENT_AUTHN_KEY_PREFIX", ()=>SOLID_CLIENT_AUTHN_KEY_PREFIX);
parcelHelpers.export(exports, "SessionInfoManagerBase", ()=>SessionInfoManagerBase);
parcelHelpers.export(exports, "StorageUtility", ()=>StorageUtility);
parcelHelpers.export(exports, "StorageUtilityGetResponse", ()=>StorageUtilityGetResponse);
parcelHelpers.export(exports, "StorageUtilityMock", ()=>StorageUtilityMock);
parcelHelpers.export(exports, "USER_SESSION_PREFIX", ()=>USER_SESSION_PREFIX);
parcelHelpers.export(exports, "buildAuthenticatedFetch", ()=>buildAuthenticatedFetch);
parcelHelpers.export(exports, "buildProxyHandler", ()=>buildProxyHandler);
parcelHelpers.export(exports, "clear", ()=>clear);
parcelHelpers.export(exports, "createDpopHeader", ()=>createDpopHeader);
parcelHelpers.export(exports, "determineSigningAlg", ()=>determineSigningAlg);
parcelHelpers.export(exports, "fetchJwks", ()=>fetchJwks);
parcelHelpers.export(exports, "generateDpopKeyPair", ()=>generateDpopKeyPair);
parcelHelpers.export(exports, "getEndSessionUrl", ()=>getEndSessionUrl);
parcelHelpers.export(exports, "getSessionIdFromOauthState", ()=>getSessionIdFromOauthState);
parcelHelpers.export(exports, "getUnauthenticatedSession", ()=>getUnauthenticatedSession);
parcelHelpers.export(exports, "getWebidFromTokenPayload", ()=>getWebidFromTokenPayload);
parcelHelpers.export(exports, "handleRegistration", ()=>handleRegistration);
parcelHelpers.export(exports, "isSupportedTokenType", ()=>isSupportedTokenType);
parcelHelpers.export(exports, "isValidRedirectUrl", ()=>isValidRedirectUrl);
parcelHelpers.export(exports, "loadOidcContextFromStorage", ()=>loadOidcContextFromStorage);
parcelHelpers.export(exports, "maybeBuildRpInitiatedLogout", ()=>maybeBuildRpInitiatedLogout);
parcelHelpers.export(exports, "mockStorage", ()=>mockStorage);
parcelHelpers.export(exports, "mockStorageUtility", ()=>mockStorageUtility);
parcelHelpers.export(exports, "saveSessionInfoToStorage", ()=>saveSessionInfoToStorage);
var _events = require("events");
var _universalFetch = require("@inrupt/universal-fetch");
var _jose = require("jose");
var _uuid = require("uuid");
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * Intended to be used by dependent packages as a common prefix for keys into
 * storage mechanisms (so as to group all keys related to Solid Client Authn
 * within those storage mechanisms, e.g., window.localStorage).
 */ const SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
/**
 * Ordered list of signature algorithms, from most preferred to least preferred.
 */ const PREFERRED_SIGNING_ALG = [
    "ES256",
    "RS256"
];
const EVENTS = {
    // Note that an `error` events MUST be listened to: https://nodejs.org/dist/latest-v16.x/docs/api/events.html#error-events.
    ERROR: "error",
    LOGIN: "login",
    LOGOUT: "logout",
    NEW_REFRESH_TOKEN: "newRefreshToken",
    SESSION_EXPIRED: "sessionExpired",
    SESSION_EXTENDED: "sessionExtended",
    SESSION_RESTORED: "sessionRestore",
    TIMEOUT_SET: "timeoutSet"
};
/**
 * We want to refresh a token 5 seconds before it expires.
 */ const REFRESH_BEFORE_EXPIRATION_SECONDS = 5;
// The openid scope requests an OIDC ID token token to be returned.
const SCOPE_OPENID = "openid";
// The offline_access scope requests a refresh token to be returned.
const SCOPE_OFFLINE = "offline_access";
// The webid scope is required as per https://solid.github.io/solid-oidc/#webid-scope
const SCOPE_WEBID = "webid";
// The scopes are expected as a space-separated list.
const DEFAULT_SCOPES = [
    SCOPE_OPENID,
    SCOPE_OFFLINE,
    SCOPE_WEBID
].join(" ");
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * Temporary internal builder for safe proxying.
 */ const buildProxyHandler = (// The class to be excluded needs to be injected, because it is defined in a
// dependency.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
toExclude, errorMessage)=>({
        // This proxy is only a temporary measure until Session no longer extends
        // SessionEventEmitter, and the proxying is no longer necessary.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get (target, prop, receiver) {
            // Reject any calls to the proxy that isn't specific to the EventEmitter API
            if (!Object.getOwnPropertyNames((0, _events.EventEmitter)).includes(prop) && Object.getOwnPropertyNames(toExclude).includes(prop)) throw new Error(`${errorMessage}: [${prop}] is not supported`);
            return Reflect.get(target, prop, receiver);
        }
    });
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class AggregateHandler {
    constructor(handleables){
        this.handleables = handleables;
        this.handleables = handleables;
    }
    /**
     * Helper function that will asynchronously determine the proper handler to use. If multiple
     * handlers can handle, it will choose the first one in the list
     * @param params Paramerters to feed to the handler
     */ async getProperHandler(params) {
        // TODO : This function doesn't currently operate as described. Tests need to be written
        // return new Promise<IHandleable<P, R> | null>((resolve, reject) => {
        //  const resolvedValues: Array<boolean | null> = Array(this.handleables.length).map(() => null)
        //   let numberResolved = 0
        //   this.handleables.forEach(async (handleable: IHandleable<P, R>, index: number) => {
        //     resolvedValues[index] = await handleable.canHandle(...params)
        //     numberResolved++
        //     let curResolvedValueIndex = 0
        //     while (
        //       resolvedValues[curResolvedValueIndex] !== null ||
        //       resolvedValues[curResolvedValueIndex] !== undefined
        //     ) {
        //       if (resolvedValues[curResolvedValueIndex]) {
        //         resolve(this.handleables[curResolvedValueIndex])
        //       }
        //       curResolvedValueIndex++
        //     }
        //   })
        // })
        const canHandleList = await Promise.all(this.handleables.map((handleable)=>handleable.canHandle(...params)));
        for(let i = 0; i < canHandleList.length; i += 1){
            if (canHandleList[i]) return this.handleables[i];
        }
        return null;
    }
    async canHandle(...params) {
        return await this.getProperHandler(params) !== null;
    }
    async handle(...params) {
        const handler = await this.getProperHandler(params);
        if (handler) return handler.handle(...params);
        throw new Error(`[${this.constructor.name}] cannot find a suitable handler for: ${params.map((param)=>{
            try {
                return JSON.stringify(param);
            } catch (err) {
                /* eslint-disable  @typescript-eslint/no-explicit-any */ return param.toString();
            }
        }).join(", ")}`);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// eslint-disable-next-line no-shadow
async function fetchJwks(jwksIri, issuerIri) {
    // FIXME: the following line works, but the underlying network calls don't seem
    // to be mocked properly by our test code. It would be nicer to replace calls to this
    // function by the following line and to fix the mocks.
    // const jwks = createRemoteJWKSet(new URL(jwksIri));
    const jwksResponse = await (0, _universalFetch.fetch).call(globalThis, jwksIri);
    if (jwksResponse.status !== 200) throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
    // The JWKS should only contain the current key for the issuer.
    let jwk;
    try {
        jwk = (await jwksResponse.json()).keys[0];
    } catch (e) {
        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
    }
    return jwk;
}
/**
 * Extract a WebID from an ID token payload based on https://github.com/solid/webid-oidc-spec.
 * Note that this does not yet implement the user endpoint lookup, and only checks
 * for `webid` or IRI-like `sub` claims.
 *
 * @param idToken the payload of the ID token from which the WebID can be extracted.
 * @returns a WebID extracted from the ID token.
 * @internal
 */ async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
    const jwk = await fetchJwks(jwksIri, issuerIri);
    let payload;
    try {
        const { payload: verifiedPayload } = await (0, _jose.jwtVerify)(idToken, await (0, _jose.importJWK)(jwk), {
            issuer: issuerIri,
            audience: clientId
        });
        payload = verifiedPayload;
    } catch (e) {
        throw new Error(`Token verification failed: ${e.stack}`);
    }
    if (typeof payload.webid === "string") return payload.webid;
    if (typeof payload.sub !== "string") throw new Error(`The token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
    try {
        // This parses the 'sub' claim to check if it is a well-formed IRI.
        // However, the normalized value isn't returned to make sure the WebID is returned
        // as specified by the Identity Provider.
        // eslint-disable-next-line no-new
        new URL(payload.sub);
        return payload.sub;
    } catch (e) {
        throw new Error(`The token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function isValidRedirectUrl(redirectUrl) {
    // If the redirect URL is not a valid URL, an error will be thrown.
    try {
        const urlObject = new URL(redirectUrl);
        const noReservedQuery = !urlObject.searchParams.has("code") && !urlObject.searchParams.has("state");
        // As per https://tools.ietf.org/html/rfc6749#section-3.1.2, the redirect URL
        // must not include a hash fragment.
        const noHash = urlObject.hash === "";
        return noReservedQuery && noHash;
    } catch (e) {
        return false;
    }
}
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * @hidden
 * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth
 * PKCE: https://tools.ietf.org/html/rfc7636
 */ class AuthorizationCodeWithPkceOidcHandlerBase {
    constructor(storageUtility, redirector){
        this.storageUtility = storageUtility;
        this.redirector = redirector;
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported && oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handleRedirect({ oidcLoginOptions, state, codeVerifier, targetUrl }) {
        await Promise.all([
            // We use the OAuth 'state' value (which should be crypto-random) as
            // the key in our storage to store our actual SessionID. We do this
            // 'cos we'll need to lookup our session information again when the
            // browser is redirected back to us (i.e. the OAuth client
            // application) from the Authorization Server.
            // We don't want to use our session ID as the OAuth 'state' value, as
            // that session ID can be any developer-specified value, and therefore
            // may not be appropriate (since the OAuth 'state' value should really
            // be an unguessable crypto-random value).
            // eslint-disable-next-line no-underscore-dangle
            this.storageUtility.setForUser(state, {
                sessionId: oidcLoginOptions.sessionId
            }),
            // Store our login-process state using the session ID as the key.
            // Strictly speaking, this indirection from our OAuth state value to
            // our session ID is unnecessary, but it provides a slightly cleaner
            // separation of concerns.
            this.storageUtility.setForUser(oidcLoginOptions.sessionId, {
                // eslint-disable-next-line no-underscore-dangle
                codeVerifier,
                issuer: oidcLoginOptions.issuer.toString(),
                // The redirect URL is read after redirect, so it must be stored now.
                redirectUrl: oidcLoginOptions.redirectUrl,
                dpop: oidcLoginOptions.dpop ? "true" : "false"
            })
        ]);
        this.redirector.redirect(targetUrl, {
            handleRedirect: oidcLoginOptions.handleRedirect
        });
        return undefined;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class GeneralLogoutHandler {
    constructor(sessionInfoManager){
        this.sessionInfoManager = sessionInfoManager;
        this.sessionInfoManager = sessionInfoManager;
    }
    async canHandle() {
        return true;
    }
    async handle(userId) {
        await this.sessionInfoManager.clear(userId);
    }
}
class IRpLogoutHandler {
    constructor(redirector){
        this.redirector = redirector;
        this.redirector = redirector;
    }
    async canHandle(userId, options) {
        return (options === null || options === void 0 ? void 0 : options.logoutType) === "idp";
    }
    async handle(userId, options) {
        if ((options === null || options === void 0 ? void 0 : options.logoutType) !== "idp") throw new Error("Attempting to call idp logout handler to perform app logout");
        if (options.toLogoutUrl === undefined) throw new Error("Cannot perform IDP logout. Did you log in using the OIDC authentication flow?");
        this.redirector.redirect(options.toLogoutUrl(options), {
            handleRedirect: options.handleRedirect
        });
    }
}
class IWaterfallLogoutHandler {
    constructor(sessionInfoManager, redirector){
        this.handlers = [
            new GeneralLogoutHandler(sessionInfoManager),
            new IRpLogoutHandler(redirector)
        ];
    }
    async canHandle() {
        return true;
    }
    async handle(userId, options) {
        for (const handler of this.handlers)/* eslint-disable no-await-in-loop */ if (await handler.canHandle(userId, options)) await handler.handle(userId, options);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ function getUnauthenticatedSession() {
    return {
        isLoggedIn: false,
        sessionId: (0, _uuid.v4)(),
        fetch: (...args)=>(0, _universalFetch.fetch).call(globalThis, ...args)
    };
}
/**
 * @param sessionId
 * @param storage
 * @hidden
 */ async function clear(sessionId, storage) {
    await Promise.all([
        storage.deleteAllUserData(sessionId, {
            secure: false
        }),
        storage.deleteAllUserData(sessionId, {
            secure: true
        })
    ]);
}
/**
 * @hidden
 */ class SessionInfoManagerBase {
    constructor(storageUtility){
        this.storageUtility = storageUtility;
        this.storageUtility = storageUtility;
    }
    update(_sessionId, _options) {
        throw new Error("Not Implemented");
    }
    get(_) {
        throw new Error("Not implemented");
    }
    // eslint-disable-next-line class-methods-use-this
    async getAll() {
        throw new Error("Not implemented");
    }
    /**
     * This function removes all session-related information from storage.
     * @param sessionId the session identifier
     * @param storage the storage where session info is stored
     * @hidden
     */ async clear(sessionId) {
        return clear(sessionId, this.storageUtility);
    }
    /**
     * Registers a new session, so that its ID can be retrieved.
     * @param sessionId
     */ async register(_sessionId) {
        throw new Error("Not implemented");
    }
    /**
     * Returns all the registered session IDs. Differs from getAll, which also
     * returns additional session information.
     */ async getRegisteredSessionIdAll() {
        throw new Error("Not implemented");
    }
    /**
     * Deletes all information about all sessions, including their registrations.
     */ async clearAll() {
        throw new Error("Not implemented");
    }
}
/**
 * This function is designed to isomorphically capture the behavior in oidc-client-js and node-oidc-provider
 * - https://github.com/IdentityModel/oidc-client-js/blob/edec8f59897bdeedcb0b4167586d49626203c2c1/src/OidcClient.js#L138
 * - https://github.com/panva/node-openid-client/blob/35758419489ff751a71f5b66f5020087a63e1e88/lib/client.js#L284
 *
 * @param options IEndSessionOptions
 * @returns The URL to redirect to in order to perform RP Initiated Logout
 * @hidden
 */ function getEndSessionUrl({ endSessionEndpoint, idTokenHint, postLogoutRedirectUri, state }) {
    const url = new URL(endSessionEndpoint);
    if (idTokenHint !== undefined) url.searchParams.append("id_token_hint", idTokenHint);
    if (postLogoutRedirectUri !== undefined) {
        url.searchParams.append("post_logout_redirect_uri", postLogoutRedirectUri);
        if (state !== undefined) url.searchParams.append("state", state);
    }
    return url.toString();
}
/**
 * @param options.endSessionEndpoint The end_session_endpoint advertised by the server
 * @param options.idTokenHint The idToken supplied by the server after logging in
 * Redirects the window to the location required to perform RP initiated logout
 *
 * @hidden
 */ function maybeBuildRpInitiatedLogout({ endSessionEndpoint, idTokenHint }) {
    if (endSessionEndpoint === undefined) return undefined;
    return function logout({ state, postLogoutUrl }) {
        return getEndSessionUrl({
            endSessionEndpoint,
            idTokenHint,
            state,
            postLogoutRedirectUri: postLogoutUrl
        });
    };
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function isSupportedTokenType(token) {
    return typeof token === "string" && [
        "DPoP",
        "Bearer"
    ].includes(token);
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const USER_SESSION_PREFIX = "solidClientAuthenticationUser";
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function isValidUrl(url) {
    try {
        // Here, the URL constructor is just called to parse the given string and
        // verify if it is a well-formed IRI.
        // eslint-disable-next-line no-new
        new URL(url);
        return true;
    } catch (_a) {
        return false;
    }
}
function determineSigningAlg(supported, preferred) {
    var _a;
    return (_a = preferred.find((signingAlg)=>{
        return supported.includes(signingAlg);
    })) !== null && _a !== void 0 ? _a : null;
}
function determineClientType(options, issuerConfig) {
    if (options.clientId !== undefined && !isValidUrl(options.clientId)) return "static";
    if (issuerConfig.scopesSupported.includes("webid") && options.clientId !== undefined && isValidUrl(options.clientId)) return "solid-oidc";
    // If no client_id is provided, the client must go through Dynamic Client Registration.
    // If a client_id is provided and it looks like a URI, yet the Identity Provider
    // does *not* support Solid-OIDC, then we also perform DCR (and discard the
    // provided client_id).
    return "dynamic";
}
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
    const clientType = determineClientType(options, issuerConfig);
    if (clientType === "dynamic") return clientRegistrar.getClient({
        sessionId: options.sessionId,
        clientName: options.clientName,
        redirectUrl: options.redirectUrl
    }, issuerConfig);
    // If a client_id was provided, and the Identity Provider is Solid-OIDC compliant,
    // or it is not compliant but the client_id isn't an IRI (we assume it has already
    // been registered with the IdP), then the client registration information needs
    // to be stored so that it can be retrieved later after redirect.
    await storageUtility.setForUser(options.sessionId, {
        // If the client is either static or solid-oidc compliant, its client ID cannot be undefined.
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        clientId: options.clientId
    });
    if (options.clientSecret) await storageUtility.setForUser(options.sessionId, {
        clientSecret: options.clientSecret
    });
    if (options.clientName) await storageUtility.setForUser(options.sessionId, {
        clientName: options.clientName
    });
    return {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        clientId: options.clientId,
        clientSecret: options.clientSecret,
        clientName: options.clientName,
        clientType
    };
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ // By only referring to `window` at runtime, apps that do server-side rendering
// won't run into errors when rendering code that instantiates a
// ClientAuthentication:
const globalFetch = (request, init)=>(0, _universalFetch.fetch).call(globalThis, request, init);
/**
 * @hidden
 */ class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher){
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        // By default, our fetch() resolves to the environment fetch() function.
        this.fetch = globalFetch;
        this.logout = async (sessionId, options)=>{
            // When doing IDP logout this will redirect away from the current page, so we should not expect
            // code after this condition to be run if it is true.
            // We also need to make sure that any other cleanup that we want to do for
            // our session takes place before this condition is run
            await this.logoutHandler.handle(sessionId, (options === null || options === void 0 ? void 0 : options.logoutType) === "idp" ? {
                ...options,
                toLogoutUrl: this.boundLogout
            } : options);
            // Restore our fetch() function back to the environment fetch(), effectively
            // leaving us with un-authenticated fetches from now on.
            this.fetch = globalFetch;
            // Delete the bound logout function, so that it can't be called after this.
            delete this.boundLogout;
        };
        this.getSessionInfo = async (sessionId)=>{
            // TODO complete
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async ()=>{
            return this.sessionInfoManager.getAll();
        };
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * A helper class that will validate items taken from local storage
 */ async function getSessionIdFromOauthState(storageUtility, oauthState) {
    return storageUtility.getForUser(oauthState, "sessionId");
}
/**
 * Based on the provided state, this looks up contextual information stored
 * before redirecting the user to the OIDC issuer.
 * @param sessionId The state (~ correlation ID) of the OIDC request
 * @param storageUtility
 * @param configFetcher
 * @returns Information stored about the client issuing the request
 */ async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
    try {
        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
            storageUtility.getForUser(sessionId, "issuer", {
                errorIfNull: true
            }),
            storageUtility.getForUser(sessionId, "codeVerifier"),
            storageUtility.getForUser(sessionId, "redirectUrl"),
            storageUtility.getForUser(sessionId, "dpop", {
                errorIfNull: true
            })
        ]);
        // Clear the code verifier, which is one-time use.
        await storageUtility.deleteForUser(sessionId, "codeVerifier");
        // Unlike openid-client, this looks up the configuration from storage
        const issuerConfig = await configFetcher.fetchConfig(issuerIri);
        return {
            codeVerifier,
            redirectUrl: storedRedirectIri,
            issuerConfig,
            dpop: dpop === "true"
        };
    } catch (e) {
        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e}`);
    }
}
/**
 * Stores information about the session in the provided storage. Note that not
 * all storage are equally secure, and it is strongly advised not to store either
 * the refresh token or the DPoP key in the browser's local storage.
 *
 * @param storageUtility
 * @param sessionId
 * @param webId
 * @param isLoggedIn
 * @param refreshToken
 * @param secure
 * @param dpopKey
 */ async function saveSessionInfoToStorage(storageUtility, sessionId, webId, isLoggedIn, refreshToken, secure, dpopKey) {
    // TODO: Investigate why this does not work with a Promise.all
    if (refreshToken !== undefined) await storageUtility.setForUser(sessionId, {
        refreshToken
    }, {
        secure
    });
    if (webId !== undefined) await storageUtility.setForUser(sessionId, {
        webId
    }, {
        secure
    });
    if (isLoggedIn !== undefined) await storageUtility.setForUser(sessionId, {
        isLoggedIn
    }, {
        secure
    });
    if (dpopKey !== undefined) await storageUtility.setForUser(sessionId, {
        publicKey: JSON.stringify(dpopKey.publicKey),
        privateKey: JSON.stringify(await (0, _jose.exportJWK)(dpopKey.privateKey))
    }, {
        secure
    });
}
// TOTEST: this does not handle all possible bad inputs for example what if it's not proper JSON
/**
 * @hidden
 */ class StorageUtility {
    constructor(secureStorage, insecureStorage){
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
    }
    getKey(userId) {
        return `solidClientAuthenticationUser:${userId}`;
    }
    async getUserData(userId, secure) {
        const stored = await (secure ? this.secureStorage : this.insecureStorage).get(this.getKey(userId));
        if (stored === undefined) return {};
        try {
            return JSON.parse(stored);
        } catch (err) {
            throw new Error(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
        }
    }
    async setUserData(userId, data, secure) {
        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, options) {
        const value = await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).get(key);
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) throw new Error(`[${key}] is not stored`);
        return value;
    }
    async set(key, value, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
    }
    async delete(key, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
    }
    async getForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        let value;
        if (!userData || !userData[key]) value = undefined;
        value = userData[key];
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) throw new Error(`Field [${key}] for user [${userId}] is not stored`);
        return value || undefined;
    }
    async setForUser(userId, values, options) {
        let userData;
        try {
            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        } catch (_a) {
            // if reading the user data throws, the data is corrupted, and we want to write over it
            userData = {};
        }
        await this.setUserData(userId, {
            ...userData,
            ...values
        }, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        delete userData[key];
        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteAllUserData(userId, options) {
        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 */ class InMemoryStorage {
    constructor(){
        this.map = {};
    }
    async get(key) {
        return this.map[key] || undefined;
    }
    async set(key, value) {
        this.map[key] = value;
    }
    async delete(key) {
        delete this.map[key];
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * Error to be triggered when a poor configuration is received
 */ // NOTE: There's a bug with istanbul and typescript that prevents full branch coverages
// https://github.com/gotwarlost/istanbul/issues/690
// The workaround is to put istanbul ignore on the constructor
/**
 * @hidden
 */ class ConfigurationError extends Error {
    /* istanbul ignore next */ constructor(message){
        super(message);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * Error to be triggered if a method is not implemented
 * @hidden
 */ class NotImplementedError extends Error {
    /* istanbul ignore next */ constructor(methodName){
        super(`[${methodName}] is not implemented`);
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * Error to be triggered when receiving a response missing mandatory elements
 */ // NOTE: There's a bug with istanbul and typescript that prevents full branch coverages
// https://github.com/gotwarlost/istanbul/issues/690
// The workaround is to put istanbul ignore on the constructor
/**
 * @hidden
 */ class InvalidResponseError extends Error {
    /* istanbul ignore next */ constructor(missingFields){
        super(`Invalid response from OIDC provider: missing fields ${missingFields}`);
        this.missingFields = missingFields;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * @hidden
 * @packageDocumentation
 */ /**
 * Error to be triggered when receiving a response missing mandatory elements
 */ // NOTE: There's a bug with istanbul and typescript that prevents full branch coverages
// https://github.com/gotwarlost/istanbul/issues/690
// The workaround is to put istanbul ignore on the constructor
/**
 * @hidden
 */ class OidcProviderError extends Error {
    /* istanbul ignore next */ constructor(message, error, errorDescription){
        super(message);
        this.error = error;
        this.errorDescription = errorDescription;
    }
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * Normalizes a URL in order to generate the DPoP token based on a consistent scheme.
 *
 * @param audience The URL to normalize.
 * @returns The normalized URL as a string.
 * @hidden
 */ function normalizeHTU(audience) {
    const audienceUrl = new URL(audience);
    return new URL(audienceUrl.pathname, audienceUrl.origin).toString();
}
/**
 * Creates a DPoP header according to https://tools.ietf.org/html/draft-fett-oauth-dpop-04,
 * based on the target URL and method, using the provided key.
 *
 * @param audience Target URL.
 * @param method HTTP method allowed.
 * @param key Key used to sign the token.
 * @returns A JWT that can be used as a DPoP Authorization header.
 */ async function createDpopHeader(audience, method, dpopKey) {
    return new (0, _jose.SignJWT)({
        htu: normalizeHTU(audience),
        htm: method.toUpperCase(),
        jti: (0, _uuid.v4)()
    }).setProtectedHeader({
        alg: PREFERRED_SIGNING_ALG[0],
        jwk: dpopKey.publicKey,
        typ: "dpop+jwt"
    }).setIssuedAt().sign(dpopKey.privateKey, {});
}
async function generateDpopKeyPair() {
    const { privateKey, publicKey } = await (0, _jose.generateKeyPair)(PREFERRED_SIGNING_ALG[0]);
    const dpopKeyPair = {
        privateKey,
        publicKey: await (0, _jose.exportJWK)(publicKey)
    };
    // The alg property isn't set by exportJWK, so set it manually.
    [dpopKeyPair.publicKey.alg] = PREFERRED_SIGNING_ALG;
    return dpopKeyPair;
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * If expires_in isn't specified for the access token, we assume its lifetime is
 * 10 minutes.
 */ const DEFAULT_EXPIRATION_TIME_SECONDS = 600;
function isExpectedAuthError(statusCode) {
    // As per https://tools.ietf.org/html/rfc7235#section-3.1 and https://tools.ietf.org/html/rfc7235#section-3.1,
    // a response failing because the provided credentials aren't accepted by the
    // server can get a 401 or a 403 response.
    return [
        401,
        403
    ].includes(statusCode);
}
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    const headers = new (0, _universalFetch.Headers)(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    // Any pre-existing Authorization header should be overriden.
    headers.set("Authorization", `DPoP ${authToken}`);
    headers.set("DPoP", await createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey));
    return {
        ...defaultOptions,
        headers
    };
}
async function buildAuthenticatedHeaders(targetUrl, authToken, dpopKey, defaultOptions) {
    if (dpopKey !== undefined) return buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions);
    const headers = new (0, _universalFetch.Headers)(defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers);
    // Any pre-existing Authorization header should be overriden.
    headers.set("Authorization", `Bearer ${authToken}`);
    return {
        ...defaultOptions,
        headers
    };
}
async function makeAuthenticatedRequest(unauthFetch, accessToken, url, defaultRequestInit, dpopKey) {
    return unauthFetch(url, await buildAuthenticatedHeaders(url.toString(), accessToken, dpopKey, defaultRequestInit));
}
async function refreshAccessToken(refreshOptions, dpopKey, eventEmitter) {
    var _a;
    const tokenSet = await refreshOptions.tokenRefresher.refresh(refreshOptions.sessionId, refreshOptions.refreshToken, dpopKey);
    eventEmitter === null || eventEmitter === void 0 || eventEmitter.emit(EVENTS.SESSION_EXTENDED, (_a = tokenSet.expiresIn) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRATION_TIME_SECONDS);
    if (typeof tokenSet.refreshToken === "string") eventEmitter === null || eventEmitter === void 0 || eventEmitter.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);
    return {
        accessToken: tokenSet.accessToken,
        refreshToken: tokenSet.refreshToken,
        expiresIn: tokenSet.expiresIn
    };
}
/**
 *
 * @param expiresIn Delay until the access token expires.
 * @returns a delay until the access token should be refreshed.
 */ const computeRefreshDelay = (expiresIn)=>{
    if (expiresIn !== undefined) return expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS > 0 ? expiresIn - REFRESH_BEFORE_EXPIRATION_SECONDS : expiresIn;
    return DEFAULT_EXPIRATION_TIME_SECONDS;
};
/**
 * @param unauthFetch a regular fetch function, compliant with the WHATWG spec.
 * @param authToken an access token, either a Bearer token or a DPoP one.
 * @param options The option object may contain two objects: the DPoP key token
 * is bound to if applicable, and options to customise token renewal behaviour.
 *
 * @returns A fetch function that adds an appropriate Authorization header with
 * the provided token, and adds a DPoP header if applicable.
 */ async function buildAuthenticatedFetch(unauthFetch, accessToken, options) {
    var _a;
    let currentAccessToken = accessToken;
    let latestTimeout;
    const currentRefreshOptions = options === null || options === void 0 ? void 0 : options.refreshOptions;
    // Setup the refresh timeout outside of the authenticated fetch, so that
    // an idle app will not get logged out if it doesn't issue a fetch before
    // the first expiration date.
    if (currentRefreshOptions !== undefined) {
        const proactivelyRefreshToken = async ()=>{
            var _a, _b, _c, _d;
            try {
                const { accessToken: refreshedAccessToken, refreshToken, expiresIn } = await refreshAccessToken(currentRefreshOptions, // If currentRefreshOptions is defined, options is necessarily defined too.
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                options.dpopKey, // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                options.eventEmitter);
                // Update the tokens in the closure if appropriate.
                currentAccessToken = refreshedAccessToken;
                if (refreshToken !== undefined) currentRefreshOptions.refreshToken = refreshToken;
                // Each time the access token is refreshed, we must plan fo the next
                // refresh iteration.
                clearTimeout(latestTimeout);
                latestTimeout = setTimeout(proactivelyRefreshToken, computeRefreshDelay(expiresIn) * 1000);
                // If currentRefreshOptions is defined, options is necessarily defined too.
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                (_a = options.eventEmitter) === null || _a === void 0 || _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
            } catch (e) {
                // It is possible that an underlying library throws an error on refresh flow failure.
                // If we used a log framework, the error could be logged at the `debug` level,
                // but otherwise the failure of the refresh flow should not blow up in the user's
                // face, so we just swallow the error.
                if (e instanceof OidcProviderError) {
                    // The OIDC provider refused to refresh the access token and returned an error instead.
                    /* istanbul ignore next 100% coverage would require testing that nothing
                        happens here if the emitter is undefined, which is more cumbersome
                        than what it's worth. */ (_b = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _b === void 0 || _b.emit(EVENTS.ERROR, e.error, e.errorDescription);
                    /* istanbul ignore next 100% coverage would require testing that nothing
                      happens here if the emitter is undefined, which is more cumbersome
                      than what it's worth. */ (_c = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _c === void 0 || _c.emit(EVENTS.SESSION_EXPIRED);
                }
                if (e instanceof InvalidResponseError && e.missingFields.includes("access_token")) // In this case, the OIDC provider returned a non-standard response, but
                // did not specify that it was an error. We cannot refresh nonetheless.
                /* istanbul ignore next 100% coverage would require testing that nothing
                      happens here if the emitter is undefined, which is more cumbersome
                      than what it's worth. */ (_d = options === null || options === void 0 ? void 0 : options.eventEmitter) === null || _d === void 0 || _d.emit(EVENTS.SESSION_EXPIRED);
            }
        };
        latestTimeout = setTimeout(proactivelyRefreshToken, // If currentRefreshOptions is defined, options is necessarily defined too.
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        computeRefreshDelay(options.expiresIn) * 1000);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        (_a = options.eventEmitter) === null || _a === void 0 || _a.emit(EVENTS.TIMEOUT_SET, latestTimeout);
    } else if (options !== undefined && options.eventEmitter !== undefined) {
        // If no refresh options are provided, the session expires when the access token does.
        const expirationTimeout = setTimeout(()=>{
            // The event emitter is always defined in our code, and it would be tedious
            // to test for conditions when it is not.
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            options.eventEmitter.emit(EVENTS.SESSION_EXPIRED);
        }, computeRefreshDelay(options.expiresIn) * 1000);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        options.eventEmitter.emit(EVENTS.TIMEOUT_SET, expirationTimeout);
    }
    return async (url, requestInit)=>{
        let response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, url, requestInit, options === null || options === void 0 ? void 0 : options.dpopKey);
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        if (response.ok || failedButNotExpectedAuthError) // If there hasn't been a redirection, or if there has been a non-auth related
        // issue, it should be handled at the application level
        return response;
        const hasBeenRedirected = response.url !== url;
        if (hasBeenRedirected && (options === null || options === void 0 ? void 0 : options.dpopKey) !== undefined) // If the request failed for auth reasons, and has been redirected, we should
        // replay it generating a DPoP header for the rediration target IRI. This
        // doesn't apply to Bearer tokens, as the Bearer tokens aren't specific
        // to a given resource and method, while the DPoP header (associated to a
        // DPoP token) is.
        response = await makeAuthenticatedRequest(unauthFetch, currentAccessToken, // Replace the original target IRI (`url`) by the redirection target
        response.url, requestInit, options.dpopKey);
        return response;
    };
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const StorageUtilityGetResponse = "getResponse";
const StorageUtilityMock = {
    /* eslint-disable @typescript-eslint/no-unused-vars */ get: async (key, options)=>StorageUtilityGetResponse,
    set: async (key, value)=>{
    /* do nothing */ },
    delete: async (key)=>{
    /* do nothing */ },
    getForUser: async (userId, key, options)=>StorageUtilityGetResponse,
    setForUser: async (userId, values, options)=>{
    /* do nothing */ },
    deleteForUser: async (userId, key, options)=>{
    /* do nothing */ },
    deleteAllUserData: async (userId, options)=>{
    /* do nothing */ }
};
const mockStorage = (stored)=>{
    const store = stored;
    return {
        get: async (key)=>{
            if (store[key] === undefined) return undefined;
            if (typeof store[key] === "string") return store[key];
            return JSON.stringify(store[key]);
        },
        set: async (key, value)=>{
            store[key] = value;
        },
        delete: async (key)=>{
            delete store[key];
        }
    };
};
const mockStorageUtility = (stored, isSecure = false)=>{
    if (isSecure) return new StorageUtility(mockStorage(stored), mockStorage({}));
    return new StorageUtility(mockStorage({}), mockStorage(stored));
};

},{"events":"1VQLm","@inrupt/universal-fetch":"f7fox","jose":"eMaRv","uuid":"j4KJi","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"f7fox":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Headers", ()=>Headers);
parcelHelpers.export(exports, "Request", ()=>Request);
parcelHelpers.export(exports, "Response", ()=>Response);
parcelHelpers.export(exports, "default", ()=>indexBrowser);
parcelHelpers.export(exports, "fetch", ()=>fetch);
var indexBrowser = globalThis.fetch;
const { fetch, Response, Request, Headers } = globalThis;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"hB1uZ":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"eMaRv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactDecrypt", ()=>(0, _decryptJs.compactDecrypt));
parcelHelpers.export(exports, "flattenedDecrypt", ()=>(0, _decryptJs1.flattenedDecrypt));
parcelHelpers.export(exports, "generalDecrypt", ()=>(0, _decryptJs2.generalDecrypt));
parcelHelpers.export(exports, "GeneralEncrypt", ()=>(0, _encryptJs.GeneralEncrypt));
parcelHelpers.export(exports, "compactVerify", ()=>(0, _verifyJs.compactVerify));
parcelHelpers.export(exports, "flattenedVerify", ()=>(0, _verifyJs1.flattenedVerify));
parcelHelpers.export(exports, "generalVerify", ()=>(0, _verifyJs2.generalVerify));
parcelHelpers.export(exports, "jwtVerify", ()=>(0, _verifyJs3.jwtVerify));
parcelHelpers.export(exports, "jwtDecrypt", ()=>(0, _decryptJs3.jwtDecrypt));
parcelHelpers.export(exports, "CompactEncrypt", ()=>(0, _encryptJs1.CompactEncrypt));
parcelHelpers.export(exports, "FlattenedEncrypt", ()=>(0, _encryptJs2.FlattenedEncrypt));
parcelHelpers.export(exports, "CompactSign", ()=>(0, _signJs.CompactSign));
parcelHelpers.export(exports, "FlattenedSign", ()=>(0, _signJs1.FlattenedSign));
parcelHelpers.export(exports, "GeneralSign", ()=>(0, _signJs2.GeneralSign));
parcelHelpers.export(exports, "SignJWT", ()=>(0, _signJs3.SignJWT));
parcelHelpers.export(exports, "EncryptJWT", ()=>(0, _encryptJs3.EncryptJWT));
parcelHelpers.export(exports, "calculateJwkThumbprint", ()=>(0, _thumbprintJs.calculateJwkThumbprint));
parcelHelpers.export(exports, "calculateJwkThumbprintUri", ()=>(0, _thumbprintJs.calculateJwkThumbprintUri));
parcelHelpers.export(exports, "EmbeddedJWK", ()=>(0, _embeddedJs.EmbeddedJWK));
parcelHelpers.export(exports, "createLocalJWKSet", ()=>(0, _localJs.createLocalJWKSet));
parcelHelpers.export(exports, "createRemoteJWKSet", ()=>(0, _remoteJs.createRemoteJWKSet));
parcelHelpers.export(exports, "UnsecuredJWT", ()=>(0, _unsecuredJs.UnsecuredJWT));
parcelHelpers.export(exports, "exportPKCS8", ()=>(0, _exportJs.exportPKCS8));
parcelHelpers.export(exports, "exportSPKI", ()=>(0, _exportJs.exportSPKI));
parcelHelpers.export(exports, "exportJWK", ()=>(0, _exportJs.exportJWK));
parcelHelpers.export(exports, "importSPKI", ()=>(0, _importJs.importSPKI));
parcelHelpers.export(exports, "importPKCS8", ()=>(0, _importJs.importPKCS8));
parcelHelpers.export(exports, "importX509", ()=>(0, _importJs.importX509));
parcelHelpers.export(exports, "importJWK", ()=>(0, _importJs.importJWK));
parcelHelpers.export(exports, "decodeProtectedHeader", ()=>(0, _decodeProtectedHeaderJs.decodeProtectedHeader));
parcelHelpers.export(exports, "decodeJwt", ()=>(0, _decodeJwtJs.decodeJwt));
parcelHelpers.export(exports, "generateKeyPair", ()=>(0, _generateKeyPairJs.generateKeyPair));
parcelHelpers.export(exports, "generateSecret", ()=>(0, _generateSecretJs.generateSecret));
parcelHelpers.export(exports, "cryptoRuntime", ()=>(0, _runtimeJsDefault.default));
parcelHelpers.export(exports, "errors", ()=>_errorsJs);
parcelHelpers.export(exports, "base64url", ()=>_base64UrlJs);
var _decryptJs = require("./jwe/compact/decrypt.js");
var _decryptJs1 = require("./jwe/flattened/decrypt.js");
var _decryptJs2 = require("./jwe/general/decrypt.js");
var _encryptJs = require("./jwe/general/encrypt.js");
var _verifyJs = require("./jws/compact/verify.js");
var _verifyJs1 = require("./jws/flattened/verify.js");
var _verifyJs2 = require("./jws/general/verify.js");
var _verifyJs3 = require("./jwt/verify.js");
var _decryptJs3 = require("./jwt/decrypt.js");
var _encryptJs1 = require("./jwe/compact/encrypt.js");
var _encryptJs2 = require("./jwe/flattened/encrypt.js");
var _signJs = require("./jws/compact/sign.js");
var _signJs1 = require("./jws/flattened/sign.js");
var _signJs2 = require("./jws/general/sign.js");
var _signJs3 = require("./jwt/sign.js");
var _encryptJs3 = require("./jwt/encrypt.js");
var _thumbprintJs = require("./jwk/thumbprint.js");
var _embeddedJs = require("./jwk/embedded.js");
var _localJs = require("./jwks/local.js");
var _remoteJs = require("./jwks/remote.js");
var _unsecuredJs = require("./jwt/unsecured.js");
var _exportJs = require("./key/export.js");
var _importJs = require("./key/import.js");
var _decodeProtectedHeaderJs = require("./util/decode_protected_header.js");
var _decodeJwtJs = require("./util/decode_jwt.js");
var _errorsJs = require("./util/errors.js");
var _generateKeyPairJs = require("./key/generate_key_pair.js");
var _generateSecretJs = require("./key/generate_secret.js");
var _base64UrlJs = require("./util/base64url.js");
var _runtimeJs = require("./util/runtime.js");
var _runtimeJsDefault = parcelHelpers.interopDefault(_runtimeJs);

},{"./jwe/compact/decrypt.js":"14cD9","./jwe/flattened/decrypt.js":"6P9KA","./jwe/general/decrypt.js":"lBvNR","./jwe/general/encrypt.js":"hvvCQ","./jws/compact/verify.js":"eD3Di","./jws/flattened/verify.js":"1k3Lx","./jws/general/verify.js":"2UysX","./jwt/verify.js":"jCkEx","./jwt/decrypt.js":"8yuOH","./jwe/compact/encrypt.js":"bjbZ8","./jwe/flattened/encrypt.js":"cKGQ7","./jws/compact/sign.js":"1E3cQ","./jws/flattened/sign.js":"5kkGS","./jws/general/sign.js":"cAp2l","./jwt/sign.js":"aB6hw","./jwt/encrypt.js":"h7xrx","./jwk/thumbprint.js":"lhTW5","./jwk/embedded.js":"bitco","./jwks/local.js":"aS9cR","./jwks/remote.js":"jh6tj","./jwt/unsecured.js":"72mr5","./key/export.js":"f6GwS","./key/import.js":"bZstH","./util/decode_protected_header.js":"ue0eA","./util/decode_jwt.js":"eAG6c","./util/errors.js":"2X1qM","./key/generate_key_pair.js":"gj3x6","./key/generate_secret.js":"eqsi9","./util/base64url.js":"5RLxa","./util/runtime.js":"aBiZj","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"14cD9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactDecrypt", ()=>compactDecrypt);
var _decryptJs = require("../flattened/decrypt.js");
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) jwe = (0, _bufferUtilsJs.decoder).decode(jwe);
    if (typeof jwe !== "string") throw new (0, _errorsJs.JWEInvalid)("Compact JWE must be a string or Uint8Array");
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length } = jwe.split(".");
    if (length !== 5) throw new (0, _errorsJs.JWEInvalid)("Invalid Compact JWE");
    const decrypted = await (0, _decryptJs.flattenedDecrypt)({
        ciphertext,
        iv: iv || undefined,
        protected: protectedHeader || undefined,
        tag: tag || undefined,
        encrypted_key: encryptedKey || undefined
    }, key, options);
    const result = {
        plaintext: decrypted.plaintext,
        protectedHeader: decrypted.protectedHeader
    };
    if (typeof key === "function") return {
        ...result,
        key: decrypted.key
    };
    return result;
}

},{"../flattened/decrypt.js":"6P9KA","../../util/errors.js":"2X1qM","../../lib/buffer_utils.js":"fv5jM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6P9KA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenedDecrypt", ()=>flattenedDecrypt);
var _base64UrlJs = require("../../runtime/base64url.js");
var _decryptJs = require("../../runtime/decrypt.js");
var _decryptJsDefault = parcelHelpers.interopDefault(_decryptJs);
var _zlibJs = require("../../runtime/zlib.js");
var _errorsJs = require("../../util/errors.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _decryptKeyManagementJs = require("../../lib/decrypt_key_management.js");
var _decryptKeyManagementJsDefault = parcelHelpers.interopDefault(_decryptKeyManagementJs);
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _cekJs = require("../../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
var _validateAlgorithmsJs = require("../../lib/validate_algorithms.js");
var _validateAlgorithmsJsDefault = parcelHelpers.interopDefault(_validateAlgorithmsJs);
async function flattenedDecrypt(jwe, key, options) {
    var _a;
    if (!(0, _isObjectJsDefault.default)(jwe)) throw new (0, _errorsJs.JWEInvalid)("Flattened JWE must be an object");
    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) throw new (0, _errorsJs.JWEInvalid)("JOSE Header missing");
    if (typeof jwe.iv !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE Initialization Vector missing or incorrect type");
    if (typeof jwe.ciphertext !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE Ciphertext missing or incorrect type");
    if (typeof jwe.tag !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE Authentication Tag missing or incorrect type");
    if (jwe.protected !== undefined && typeof jwe.protected !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE Protected Header incorrect type");
    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key incorrect type");
    if (jwe.aad !== undefined && typeof jwe.aad !== "string") throw new (0, _errorsJs.JWEInvalid)("JWE AAD incorrect type");
    if (jwe.header !== undefined && !(0, _isObjectJsDefault.default)(jwe.header)) throw new (0, _errorsJs.JWEInvalid)("JWE Shared Unprotected Header incorrect type");
    if (jwe.unprotected !== undefined && !(0, _isObjectJsDefault.default)(jwe.unprotected)) throw new (0, _errorsJs.JWEInvalid)("JWE Per-Recipient Unprotected Header incorrect type");
    let parsedProt;
    if (jwe.protected) try {
        const protectedHeader = (0, _base64UrlJs.decode)(jwe.protected);
        parsedProt = JSON.parse((0, _bufferUtilsJs.decoder).decode(protectedHeader));
    } catch (_b) {
        throw new (0, _errorsJs.JWEInvalid)("JWE Protected Header is invalid");
    }
    if (!(0, _isDisjointJsDefault.default)(parsedProt, jwe.header, jwe.unprotected)) throw new (0, _errorsJs.JWEInvalid)("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
    const joseHeader = {
        ...parsedProt,
        ...jwe.header,
        ...jwe.unprotected
    };
    (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== undefined) {
        if (!parsedProt || !parsedProt.zip) throw new (0, _errorsJs.JWEInvalid)('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
        if (joseHeader.zip !== "DEF") throw new (0, _errorsJs.JOSENotSupported)('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
    }
    const { alg, enc } = joseHeader;
    if (typeof alg !== "string" || !alg) throw new (0, _errorsJs.JWEInvalid)("missing JWE Algorithm (alg) in JWE Header");
    if (typeof enc !== "string" || !enc) throw new (0, _errorsJs.JWEInvalid)("missing JWE Encryption Algorithm (enc) in JWE Header");
    const keyManagementAlgorithms = options && (0, _validateAlgorithmsJsDefault.default)("keyManagementAlgorithms", options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options && (0, _validateAlgorithmsJsDefault.default)("contentEncryptionAlgorithms", options.contentEncryptionAlgorithms);
    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"alg" (Algorithm) Header Parameter not allowed');
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"enc" (Encryption Algorithm) Header Parameter not allowed');
    let encryptedKey;
    if (jwe.encrypted_key !== undefined) try {
        encryptedKey = (0, _base64UrlJs.decode)(jwe.encrypted_key);
    } catch (_c) {
        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the encrypted_key");
    }
    let resolvedKey = false;
    if (typeof key === "function") {
        key = await key(parsedProt, jwe);
        resolvedKey = true;
    }
    let cek;
    try {
        cek = await (0, _decryptKeyManagementJsDefault.default)(alg, key, encryptedKey, joseHeader, options);
    } catch (err) {
        if (err instanceof TypeError || err instanceof (0, _errorsJs.JWEInvalid) || err instanceof (0, _errorsJs.JOSENotSupported)) throw err;
        cek = (0, _cekJsDefault.default)(enc);
    }
    let iv;
    let tag;
    try {
        iv = (0, _base64UrlJs.decode)(jwe.iv);
    } catch (_d) {
        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the iv");
    }
    try {
        tag = (0, _base64UrlJs.decode)(jwe.tag);
    } catch (_e) {
        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the tag");
    }
    const protectedHeader = (0, _bufferUtilsJs.encoder).encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : "");
    let additionalData;
    if (jwe.aad !== undefined) additionalData = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode("."), (0, _bufferUtilsJs.encoder).encode(jwe.aad));
    else additionalData = protectedHeader;
    let ciphertext;
    try {
        ciphertext = (0, _base64UrlJs.decode)(jwe.ciphertext);
    } catch (_f) {
        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the ciphertext");
    }
    let plaintext = await (0, _decryptJsDefault.default)(enc, cek, ciphertext, iv, tag, additionalData);
    if (joseHeader.zip === "DEF") plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || (0, _zlibJs.inflate))(plaintext);
    const result = {
        plaintext
    };
    if (jwe.protected !== undefined) result.protectedHeader = parsedProt;
    if (jwe.aad !== undefined) try {
        result.additionalAuthenticatedData = (0, _base64UrlJs.decode)(jwe.aad);
    } catch (_g) {
        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the aad");
    }
    if (jwe.unprotected !== undefined) result.sharedUnprotectedHeader = jwe.unprotected;
    if (jwe.header !== undefined) result.unprotectedHeader = jwe.header;
    if (resolvedKey) return {
        ...result,
        key
    };
    return result;
}

},{"../../runtime/base64url.js":"4jG0b","../../runtime/decrypt.js":"4MYyY","../../runtime/zlib.js":"7K7kb","../../util/errors.js":"2X1qM","../../lib/is_disjoint.js":"KLjre","../../lib/is_object.js":"clAVD","../../lib/decrypt_key_management.js":"fHO5s","../../lib/buffer_utils.js":"fv5jM","../../lib/cek.js":"fYJCA","../../lib/validate_crit.js":"dXiTZ","../../lib/validate_algorithms.js":"64cJv","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"4jG0b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeBase64", ()=>encodeBase64);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decodeBase64", ()=>decodeBase64);
parcelHelpers.export(exports, "decode", ()=>decode);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
const encodeBase64 = (input)=>{
    let unencoded = input;
    if (typeof unencoded === "string") unencoded = (0, _bufferUtilsJs.encoder).encode(unencoded);
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for(let i = 0; i < unencoded.length; i += CHUNK_SIZE)arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
    return btoa(arr.join(""));
};
const encode = (input)=>{
    return encodeBase64(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
};
const decodeBase64 = (encoded)=>{
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for(let i = 0; i < binary.length; i++)bytes[i] = binary.charCodeAt(i);
    return bytes;
};
const decode = (input)=>{
    let encoded = input;
    if (encoded instanceof Uint8Array) encoded = (0, _bufferUtilsJs.decoder).decode(encoded);
    encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
    try {
        return decodeBase64(encoded);
    } catch (_a) {
        throw new TypeError("The input to be decoded is not correctly encoded.");
    }
};

},{"../lib/buffer_utils.js":"fv5jM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"fv5jM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encoder", ()=>encoder);
parcelHelpers.export(exports, "decoder", ()=>decoder);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "p2s", ()=>p2s);
parcelHelpers.export(exports, "uint64be", ()=>uint64be);
parcelHelpers.export(exports, "uint32be", ()=>uint32be);
parcelHelpers.export(exports, "lengthAndInput", ()=>lengthAndInput);
parcelHelpers.export(exports, "concatKdf", ()=>concatKdf);
var _digestJs = require("../runtime/digest.js");
var _digestJsDefault = parcelHelpers.interopDefault(_digestJs);
const encoder = new TextEncoder();
const decoder = new TextDecoder();
const MAX_INT32 = 2 ** 32;
function concat(...buffers) {
    const size = buffers.reduce((acc, { length })=>acc + length, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    buffers.forEach((buffer)=>{
        buf.set(buffer, i);
        i += buffer.length;
    });
    return buf;
}
function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([
        0
    ]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    buf.set([
        value >>> 24,
        value >>> 16,
        value >>> 8,
        value & 0xff
    ], offset);
}
function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
}
function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
}
function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    const res = new Uint8Array(iterations * 32);
    for(let iter = 0; iter < iterations; iter++){
        const buf = new Uint8Array(4 + secret.length + value.length);
        buf.set(uint32be(iter + 1));
        buf.set(secret, 4);
        buf.set(value, 4 + secret.length);
        res.set(await (0, _digestJsDefault.default)("sha256", buf), iter * 32);
    }
    return res.slice(0, bits >> 3);
}

},{"../runtime/digest.js":"4tSkm","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"4tSkm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
const digest = async (algorithm, data)=>{
    const subtleDigest = `SHA-${algorithm.slice(-3)}`;
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.digest(subtleDigest, data));
};
exports.default = digest;

},{"./webcrypto.js":"i291m","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"i291m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCryptoKey", ()=>isCryptoKey);
exports.default = crypto;
const isCryptoKey = (key)=>key instanceof CryptoKey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"4MYyY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _checkIvLengthJs = require("../lib/check_iv_length.js");
var _checkIvLengthJsDefault = parcelHelpers.interopDefault(_checkIvLengthJs);
var _checkCekLengthJs = require("./check_cek_length.js");
var _checkCekLengthJsDefault = parcelHelpers.interopDefault(_checkCekLengthJs);
var _timingSafeEqualJs = require("./timing_safe_equal.js");
var _timingSafeEqualJsDefault = parcelHelpers.interopDefault(_timingSafeEqualJs);
var _errorsJs = require("../util/errors.js");
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    if (!(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, "Uint8Array"));
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, [
        "decrypt"
    ]);
    const macKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: "HMAC"
    }, false, [
        "sign"
    ]);
    const macData = (0, _bufferUtilsJs.concat)(aad, iv, ciphertext, (0, _bufferUtilsJs.uint64be)(aad.length << 3));
    const expectedTag = new Uint8Array((await (0, _webcryptoJsDefault.default).subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
        macCheckPassed = (0, _timingSafeEqualJsDefault.default)(tag, expectedTag);
    } catch (_a) {}
    if (!macCheckPassed) throw new (0, _errorsJs.JWEDecryptionFailed)();
    let plaintext;
    try {
        plaintext = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt({
            iv,
            name: "AES-CBC"
        }, encKey, ciphertext));
    } catch (_b) {}
    if (!plaintext) throw new (0, _errorsJs.JWEDecryptionFailed)();
    return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    let encKey;
    if (cek instanceof Uint8Array) encKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek, "AES-GCM", false, [
        "decrypt"
    ]);
    else {
        (0, _cryptoKeyJs.checkEncCryptoKey)(cek, enc, "decrypt");
        encKey = cek;
    }
    try {
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt({
            additionalData: aad,
            iv,
            name: "AES-GCM",
            tagLength: 128
        }, encKey, (0, _bufferUtilsJs.concat)(ciphertext, tag)));
    } catch (_a) {
        throw new (0, _errorsJs.JWEDecryptionFailed)();
    }
}
const decrypt = async (enc, cek, ciphertext, iv, tag, aad)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, ...(0, _isKeyLikeJs.types), "Uint8Array"));
    (0, _checkIvLengthJsDefault.default)(enc, iv);
    switch(enc){
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(-3), 10));
            return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(1, 4), 10));
            return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);
        default:
            throw new (0, _errorsJs.JOSENotSupported)("Unsupported JWE Content Encryption Algorithm");
    }
};
exports.default = decrypt;

},{"../lib/buffer_utils.js":"fv5jM","../lib/check_iv_length.js":"3wvHa","./check_cek_length.js":"fQXod","./timing_safe_equal.js":"dAo9m","../util/errors.js":"2X1qM","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"3wvHa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
var _ivJs = require("./iv.js");
const checkIvLength = (enc, iv)=>{
    if (iv.length << 3 !== (0, _ivJs.bitLength)(enc)) throw new (0, _errorsJs.JWEInvalid)("Invalid Initialization Vector length");
};
exports.default = checkIvLength;

},{"../util/errors.js":"2X1qM","./iv.js":"2DE5r","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"2X1qM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JOSEError", ()=>JOSEError);
parcelHelpers.export(exports, "JWTClaimValidationFailed", ()=>JWTClaimValidationFailed);
parcelHelpers.export(exports, "JWTExpired", ()=>JWTExpired);
parcelHelpers.export(exports, "JOSEAlgNotAllowed", ()=>JOSEAlgNotAllowed);
parcelHelpers.export(exports, "JOSENotSupported", ()=>JOSENotSupported);
parcelHelpers.export(exports, "JWEDecryptionFailed", ()=>JWEDecryptionFailed);
parcelHelpers.export(exports, "JWEInvalid", ()=>JWEInvalid);
parcelHelpers.export(exports, "JWSInvalid", ()=>JWSInvalid);
parcelHelpers.export(exports, "JWTInvalid", ()=>JWTInvalid);
parcelHelpers.export(exports, "JWKInvalid", ()=>JWKInvalid);
parcelHelpers.export(exports, "JWKSInvalid", ()=>JWKSInvalid);
parcelHelpers.export(exports, "JWKSNoMatchingKey", ()=>JWKSNoMatchingKey);
parcelHelpers.export(exports, "JWKSMultipleMatchingKeys", ()=>JWKSMultipleMatchingKeys);
parcelHelpers.export(exports, "JWKSTimeout", ()=>JWKSTimeout);
parcelHelpers.export(exports, "JWSSignatureVerificationFailed", ()=>JWSSignatureVerificationFailed);
class JOSEError extends Error {
    static get code() {
        return "ERR_JOSE_GENERIC";
    }
    constructor(message){
        var _a;
        super(message);
        this.code = "ERR_JOSE_GENERIC";
        this.name = this.constructor.name;
        (_a = Error.captureStackTrace) === null || _a === void 0 || _a.call(Error, this, this.constructor);
    }
}
class JWTClaimValidationFailed extends JOSEError {
    static get code() {
        return "ERR_JWT_CLAIM_VALIDATION_FAILED";
    }
    constructor(message, claim = "unspecified", reason = "unspecified"){
        super(message);
        this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
        this.claim = claim;
        this.reason = reason;
    }
}
class JWTExpired extends JOSEError {
    static get code() {
        return "ERR_JWT_EXPIRED";
    }
    constructor(message, claim = "unspecified", reason = "unspecified"){
        super(message);
        this.code = "ERR_JWT_EXPIRED";
        this.claim = claim;
        this.reason = reason;
    }
}
class JOSEAlgNotAllowed extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
    }
    static get code() {
        return "ERR_JOSE_ALG_NOT_ALLOWED";
    }
}
class JOSENotSupported extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JOSE_NOT_SUPPORTED";
    }
    static get code() {
        return "ERR_JOSE_NOT_SUPPORTED";
    }
}
class JWEDecryptionFailed extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWE_DECRYPTION_FAILED";
        this.message = "decryption operation failed";
    }
    static get code() {
        return "ERR_JWE_DECRYPTION_FAILED";
    }
}
class JWEInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWE_INVALID";
    }
    static get code() {
        return "ERR_JWE_INVALID";
    }
}
class JWSInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWS_INVALID";
    }
    static get code() {
        return "ERR_JWS_INVALID";
    }
}
class JWTInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWT_INVALID";
    }
    static get code() {
        return "ERR_JWT_INVALID";
    }
}
class JWKInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWK_INVALID";
    }
    static get code() {
        return "ERR_JWK_INVALID";
    }
}
class JWKSInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWKS_INVALID";
    }
    static get code() {
        return "ERR_JWKS_INVALID";
    }
}
class JWKSNoMatchingKey extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWKS_NO_MATCHING_KEY";
        this.message = "no applicable key found in the JSON Web Key Set";
    }
    static get code() {
        return "ERR_JWKS_NO_MATCHING_KEY";
    }
}
class JWKSMultipleMatchingKeys extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
        this.message = "multiple matching keys found in the JSON Web Key Set";
    }
    static get code() {
        return "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
    }
}
Symbol.asyncIterator;
class JWKSTimeout extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWKS_TIMEOUT";
        this.message = "request timed out";
    }
    static get code() {
        return "ERR_JWKS_TIMEOUT";
    }
}
class JWSSignatureVerificationFailed extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
        this.message = "signature verification failed";
    }
    static get code() {
        return "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"2DE5r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitLength", ()=>bitLength);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("../runtime/random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
function bitLength(alg) {
    switch(alg){
        case "A128GCM":
        case "A128GCMKW":
        case "A192GCM":
        case "A192GCMKW":
        case "A256GCM":
        case "A256GCMKW":
            return 96;
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
            return 128;
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`Unsupported JWE Algorithm: ${alg}`);
    }
}
exports.default = (alg)=>(0, _randomJsDefault.default)(new Uint8Array(bitLength(alg) >> 3));

},{"../util/errors.js":"2X1qM","../runtime/random.js":"lgsam","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lgsam":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
exports.default = (0, _webcryptoJsDefault.default).getRandomValues.bind((0, _webcryptoJsDefault.default));

},{"./webcrypto.js":"i291m","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"fQXod":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
const checkCekLength = (cek, expected)=>{
    const actual = cek.byteLength << 3;
    if (actual !== expected) throw new (0, _errorsJs.JWEInvalid)(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
};
exports.default = checkCekLength;

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"dAo9m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const timingSafeEqual = (a, b)=>{
    if (!(a instanceof Uint8Array)) throw new TypeError("First argument must be a buffer");
    if (!(b instanceof Uint8Array)) throw new TypeError("Second argument must be a buffer");
    if (a.length !== b.length) throw new TypeError("Input buffers must have the same length");
    const len = a.length;
    let out = 0;
    let i = -1;
    while(++i < len)out |= a[i] ^ b[i];
    return out === 0;
};
exports.default = timingSafeEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"39DH4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkSigCryptoKey", ()=>checkSigCryptoKey);
parcelHelpers.export(exports, "checkEncCryptoKey", ()=>checkEncCryptoKey);
function unusable(name, prop = "algorithm.name") {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
    return algorithm.name === name;
}
function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
    switch(alg){
        case "ES256":
            return "P-256";
        case "ES384":
            return "P-384";
        case "ES512":
            return "P-521";
        default:
            throw new Error("unreachable");
    }
}
function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected)=>key.usages.includes(expected))) {
        let msg = "CryptoKey does not support this operation, its usages must include ";
        if (usages.length > 2) {
            const last = usages.pop();
            msg += `one of ${usages.join(", ")}, or ${last}.`;
        } else if (usages.length === 2) msg += `one of ${usages[0]} or ${usages[1]}.`;
        else msg += `${usages[0]}.`;
        throw new TypeError(msg);
    }
}
function checkSigCryptoKey(key, alg, ...usages) {
    switch(alg){
        case "HS256":
        case "HS384":
        case "HS512":
            {
                if (!isAlgorithm(key.algorithm, "HMAC")) throw unusable("HMAC");
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
                break;
            }
        case "RS256":
        case "RS384":
        case "RS512":
            {
                if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5")) throw unusable("RSASSA-PKCS1-v1_5");
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
                break;
            }
        case "PS256":
        case "PS384":
        case "PS512":
            {
                if (!isAlgorithm(key.algorithm, "RSA-PSS")) throw unusable("RSA-PSS");
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
                break;
            }
        case "EdDSA":
            if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") throw unusable("Ed25519 or Ed448");
            break;
        case "ES256":
        case "ES384":
        case "ES512":
            {
                if (!isAlgorithm(key.algorithm, "ECDSA")) throw unusable("ECDSA");
                const expected = getNamedCurve(alg);
                const actual = key.algorithm.namedCurve;
                if (actual !== expected) throw unusable(expected, "algorithm.namedCurve");
                break;
            }
        default:
            throw new TypeError("CryptoKey does not support this operation");
    }
    checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
    switch(alg){
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
            {
                if (!isAlgorithm(key.algorithm, "AES-GCM")) throw unusable("AES-GCM");
                const expected = parseInt(alg.slice(1, 4), 10);
                const actual = key.algorithm.length;
                if (actual !== expected) throw unusable(expected, "algorithm.length");
                break;
            }
        case "A128KW":
        case "A192KW":
        case "A256KW":
            {
                if (!isAlgorithm(key.algorithm, "AES-KW")) throw unusable("AES-KW");
                const expected = parseInt(alg.slice(1, 4), 10);
                const actual = key.algorithm.length;
                if (actual !== expected) throw unusable(expected, "algorithm.length");
                break;
            }
        case "ECDH":
            switch(key.algorithm.name){
                case "ECDH":
                case "X25519":
                case "X448":
                    break;
                default:
                    throw unusable("ECDH, X25519, or X448");
            }
            break;
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
            if (!isAlgorithm(key.algorithm, "PBKDF2")) throw unusable("PBKDF2");
            break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            {
                if (!isAlgorithm(key.algorithm, "RSA-OAEP")) throw unusable("RSA-OAEP");
                const expected = parseInt(alg.slice(9), 10) || 1;
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, "algorithm.hash");
                break;
            }
        default:
            throw new TypeError("CryptoKey does not support this operation");
    }
    checkUsage(key, usages);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6MovY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withAlg", ()=>withAlg);
function message(msg, actual, ...types) {
    if (types.length > 2) {
        const last = types.pop();
        msg += `one of type ${types.join(", ")}, or ${last}.`;
    } else if (types.length === 2) msg += `one of type ${types[0]} or ${types[1]}.`;
    else msg += `of type ${types[0]}.`;
    if (actual == null) msg += ` Received ${actual}`;
    else if (typeof actual === "function" && actual.name) msg += ` Received function ${actual.name}`;
    else if (typeof actual === "object" && actual != null) {
        if (actual.constructor && actual.constructor.name) msg += ` Received an instance of ${actual.constructor.name}`;
    }
    return msg;
}
exports.default = (actual, ...types)=>{
    return message("Key must be ", actual, ...types);
};
function withAlg(alg, actual, ...types) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"iMvzY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "types", ()=>types);
var _webcryptoJs = require("./webcrypto.js");
exports.default = (key)=>{
    return (0, _webcryptoJs.isCryptoKey)(key);
};
const types = [
    "CryptoKey"
];

},{"./webcrypto.js":"i291m","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"7K7kb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inflate", ()=>inflate);
parcelHelpers.export(exports, "deflate", ()=>deflate);
var _errorsJs = require("../util/errors.js");
const inflate = async ()=>{
    throw new (0, _errorsJs.JOSENotSupported)('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `inflateRaw` decrypt option to provide Inflate Raw implementation.');
};
const deflate = async ()=>{
    throw new (0, _errorsJs.JOSENotSupported)('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `deflateRaw` encrypt option to provide Deflate Raw implementation.');
};

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"KLjre":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const isDisjoint = (...headers)=>{
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) return true;
    let acc;
    for (const header of sources){
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters){
            if (acc.has(parameter)) return false;
            acc.add(parameter);
        }
    }
    return true;
};
exports.default = isDisjoint;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"clAVD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isObject);
function isObjectLike(value) {
    return typeof value === "object" && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") return false;
    if (Object.getPrototypeOf(input) === null) return true;
    let proto = input;
    while(Object.getPrototypeOf(proto) !== null)proto = Object.getPrototypeOf(proto);
    return Object.getPrototypeOf(input) === proto;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"fHO5s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _aeskwJs = require("../runtime/aeskw.js");
var _ecdhesJs = require("../runtime/ecdhes.js");
var _pbes2KwJs = require("../runtime/pbes2kw.js");
var _rsaesJs = require("../runtime/rsaes.js");
var _base64UrlJs = require("../runtime/base64url.js");
var _errorsJs = require("../util/errors.js");
var _cekJs = require("../lib/cek.js");
var _importJs = require("../key/import.js");
var _checkKeyTypeJs = require("./check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _isObjectJs = require("./is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _aesgcmkwJs = require("./aesgcmkw.js");
async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
    (0, _checkKeyTypeJsDefault.default)(alg, key, "decrypt");
    switch(alg){
        case "dir":
            if (encryptedKey !== undefined) throw new (0, _errorsJs.JWEInvalid)("Encountered unexpected JWE Encrypted Key");
            return key;
        case "ECDH-ES":
            if (encryptedKey !== undefined) throw new (0, _errorsJs.JWEInvalid)("Encountered unexpected JWE Encrypted Key");
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
            {
                if (!(0, _isObjectJsDefault.default)(joseHeader.epk)) throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
                if (!_ecdhesJs.ecdhAllowed(key)) throw new (0, _errorsJs.JOSENotSupported)("ECDH with the provided key is not allowed or not supported by your javascript runtime");
                const epk = await (0, _importJs.importJWK)(joseHeader.epk, alg);
                let partyUInfo;
                let partyVInfo;
                if (joseHeader.apu !== undefined) {
                    if (typeof joseHeader.apu !== "string") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
                    try {
                        partyUInfo = (0, _base64UrlJs.decode)(joseHeader.apu);
                    } catch (_a) {
                        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the apu");
                    }
                }
                if (joseHeader.apv !== undefined) {
                    if (typeof joseHeader.apv !== "string") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
                    try {
                        partyVInfo = (0, _base64UrlJs.decode)(joseHeader.apv);
                    } catch (_b) {
                        throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the apv");
                    }
                }
                const sharedSecret = await _ecdhesJs.deriveKey(epk, key, alg === "ECDH-ES" ? joseHeader.enc : alg, alg === "ECDH-ES" ? (0, _cekJs.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
                if (alg === "ECDH-ES") return sharedSecret;
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key missing");
                return (0, _aeskwJs.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);
            }
        case "RSA1_5":
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key missing");
            return (0, _rsaesJs.decrypt)(alg, key, encryptedKey);
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
            {
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key missing");
                if (typeof joseHeader.p2c !== "number") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
                const p2cLimit = (options === null || options === void 0 ? void 0 : options.maxPBES2Count) || 10000;
                if (joseHeader.p2c > p2cLimit) throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
                if (typeof joseHeader.p2s !== "string") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
                let p2s;
                try {
                    p2s = (0, _base64UrlJs.decode)(joseHeader.p2s);
                } catch (_c) {
                    throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the p2s");
                }
                return (0, _pbes2KwJs.decrypt)(alg, key, encryptedKey, joseHeader.p2c, p2s);
            }
        case "A128KW":
        case "A192KW":
        case "A256KW":
            if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key missing");
            return (0, _aeskwJs.unwrap)(alg, key, encryptedKey);
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
            {
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)("JWE Encrypted Key missing");
                if (typeof joseHeader.iv !== "string") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
                if (typeof joseHeader.tag !== "string") throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
                let iv;
                try {
                    iv = (0, _base64UrlJs.decode)(joseHeader.iv);
                } catch (_d) {
                    throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the iv");
                }
                let tag;
                try {
                    tag = (0, _base64UrlJs.decode)(joseHeader.tag);
                } catch (_e) {
                    throw new (0, _errorsJs.JWEInvalid)("Failed to base64url decode the tag");
                }
                return (0, _aesgcmkwJs.unwrap)(alg, key, encryptedKey, iv, tag);
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
}
exports.default = decryptKeyManagement;

},{"../runtime/aeskw.js":"ArHmU","../runtime/ecdhes.js":"iZXOY","../runtime/pbes2kw.js":"l759B","../runtime/rsaes.js":"jEK1c","../runtime/base64url.js":"4jG0b","../util/errors.js":"2X1qM","../lib/cek.js":"fYJCA","../key/import.js":"bZstH","./check_key_type.js":"6wUbO","./is_object.js":"clAVD","./aesgcmkw.js":"39d3M","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"ArHmU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
parcelHelpers.export(exports, "unwrap", ()=>unwrap);
var _bogusJs = require("./bogus.js");
var _bogusJsDefault = parcelHelpers.interopDefault(_bogusJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) throw new TypeError(`Invalid key size for alg: ${alg}`);
}
function getCryptoKey(key, alg, usage) {
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) return (0, _webcryptoJsDefault.default).subtle.importKey("raw", key, "AES-KW", true, [
        usage
    ]);
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), "Uint8Array"));
}
const wrap = async (alg, key, cek)=>{
    const cryptoKey = await getCryptoKey(key, alg, "wrapKey");
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek, ...(0, _bogusJsDefault.default));
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.wrapKey("raw", cryptoKeyCek, cryptoKey, "AES-KW"));
};
const unwrap = async (alg, key, encryptedKey)=>{
    const cryptoKey = await getCryptoKey(key, alg, "unwrapKey");
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.unwrapKey("raw", encryptedKey, cryptoKey, "AES-KW", ...(0, _bogusJsDefault.default));
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey("raw", cryptoKeyCek));
};

},{"./bogus.js":"ZHcP8","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"ZHcP8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const bogusWebCrypto = [
    {
        hash: "SHA-256",
        name: "HMAC"
    },
    true,
    [
        "sign"
    ]
];
exports.default = bogusWebCrypto;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"iZXOY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deriveKey", ()=>deriveKey);
parcelHelpers.export(exports, "generateEpk", ()=>generateEpk);
parcelHelpers.export(exports, "ecdhAllowed", ()=>ecdhAllowed);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
    if (!(0, _webcryptoJs.isCryptoKey)(publicKey)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(publicKey, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(publicKey, "ECDH");
    if (!(0, _webcryptoJs.isCryptoKey)(privateKey)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(privateKey, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(privateKey, "ECDH", "deriveBits");
    const value = (0, _bufferUtilsJs.concat)((0, _bufferUtilsJs.lengthAndInput)((0, _bufferUtilsJs.encoder).encode(algorithm)), (0, _bufferUtilsJs.lengthAndInput)(apu), (0, _bufferUtilsJs.lengthAndInput)(apv), (0, _bufferUtilsJs.uint32be)(keyLength));
    let length;
    if (publicKey.algorithm.name === "X25519") length = 256;
    else if (publicKey.algorithm.name === "X448") length = 448;
    else length = Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
    const sharedSecret = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.deriveBits({
        name: publicKey.algorithm.name,
        public: publicKey
    }, privateKey, length));
    return (0, _bufferUtilsJs.concatKdf)(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    return (0, _webcryptoJsDefault.default).subtle.generateKey(key.algorithm, true, [
        "deriveBits"
    ]);
}
function ecdhAllowed(key) {
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    return [
        "P-256",
        "P-384",
        "P-521"
    ].includes(key.algorithm.namedCurve) || key.algorithm.name === "X25519" || key.algorithm.name === "X448";
}

},{"../lib/buffer_utils.js":"fv5jM","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"l759B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _base64UrlJs = require("./base64url.js");
var _aeskwJs = require("./aeskw.js");
var _checkP2SJs = require("../lib/check_p2s.js");
var _checkP2SJsDefault = parcelHelpers.interopDefault(_checkP2SJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
function getCryptoKey(key, alg) {
    if (key instanceof Uint8Array) return (0, _webcryptoJsDefault.default).subtle.importKey("raw", key, "PBKDF2", false, [
        "deriveBits"
    ]);
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, "deriveBits", "deriveKey");
        return key;
    }
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), "Uint8Array"));
}
async function deriveKey(p2s, alg, p2c, key) {
    (0, _checkP2SJsDefault.default)(p2s);
    const salt = (0, _bufferUtilsJs.p2s)(alg, p2s);
    const keylen = parseInt(alg.slice(13, 16), 10);
    const subtleAlg = {
        hash: `SHA-${alg.slice(8, 11)}`,
        iterations: p2c,
        name: "PBKDF2",
        salt
    };
    const wrapAlg = {
        length: keylen,
        name: "AES-KW"
    };
    const cryptoKey = await getCryptoKey(key, alg);
    if (cryptoKey.usages.includes("deriveBits")) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    if (cryptoKey.usages.includes("deriveKey")) return (0, _webcryptoJsDefault.default).subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, [
        "wrapKey",
        "unwrapKey"
    ]);
    throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
const encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, _randomJsDefault.default)(new Uint8Array(16)))=>{
    const derived = await deriveKey(p2s, alg, p2c, key);
    const encryptedKey = await (0, _aeskwJs.wrap)(alg.slice(-6), derived, cek);
    return {
        encryptedKey,
        p2c,
        p2s: (0, _base64UrlJs.encode)(p2s)
    };
};
const decrypt = async (alg, key, encryptedKey, p2c, p2s)=>{
    const derived = await deriveKey(p2s, alg, p2c, key);
    return (0, _aeskwJs.unwrap)(alg.slice(-6), derived, encryptedKey);
};

},{"./random.js":"lgsam","../lib/buffer_utils.js":"fv5jM","./base64url.js":"4jG0b","./aeskw.js":"ArHmU","../lib/check_p2s.js":"8rPB5","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"8rPB5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>checkP2s);
var _errorsJs = require("../util/errors.js");
function checkP2s(p2s) {
    if (!(p2s instanceof Uint8Array) || p2s.length < 8) throw new (0, _errorsJs.JWEInvalid)("PBES2 Salt Input must be 8 or more octets");
}

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"jEK1c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _subtleRsaesJs = require("./subtle_rsaes.js");
var _subtleRsaesJsDefault = parcelHelpers.interopDefault(_subtleRsaesJs);
var _bogusJs = require("./bogus.js");
var _bogusJsDefault = parcelHelpers.interopDefault(_bogusJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
const encrypt = async (alg, key, cek)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, "encrypt", "wrapKey");
    (0, _checkKeyLengthJsDefault.default)(alg, key);
    if (key.usages.includes("encrypt")) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt((0, _subtleRsaesJsDefault.default)(alg), key, cek));
    if (key.usages.includes("wrapKey")) {
        const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek, ...(0, _bogusJsDefault.default));
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.wrapKey("raw", cryptoKeyCek, key, (0, _subtleRsaesJsDefault.default)(alg)));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};
const decrypt = async (alg, key, encryptedKey)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, "decrypt", "unwrapKey");
    (0, _checkKeyLengthJsDefault.default)(alg, key);
    if (key.usages.includes("decrypt")) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt((0, _subtleRsaesJsDefault.default)(alg), key, encryptedKey));
    if (key.usages.includes("unwrapKey")) {
        const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.unwrapKey("raw", encryptedKey, key, (0, _subtleRsaesJsDefault.default)(alg), ...(0, _bogusJsDefault.default));
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey("raw", cryptoKeyCek));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};

},{"./subtle_rsaes.js":"6qGnT","./bogus.js":"ZHcP8","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","./check_key_length.js":"1mG3B","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6qGnT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>subtleRsaEs);
var _errorsJs = require("../util/errors.js");
function subtleRsaEs(alg) {
    switch(alg){
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            return "RSA-OAEP";
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"1mG3B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (alg, key)=>{
    if (alg.startsWith("RS") || alg.startsWith("PS")) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== "number" || modulusLength < 2048) throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"fYJCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitLength", ()=>bitLength);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("../runtime/random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
function bitLength(alg) {
    switch(alg){
        case "A128GCM":
            return 128;
        case "A192GCM":
            return 192;
        case "A256GCM":
        case "A128CBC-HS256":
            return 256;
        case "A192CBC-HS384":
            return 384;
        case "A256CBC-HS512":
            return 512;
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`Unsupported JWE Algorithm: ${alg}`);
    }
}
exports.default = (alg)=>(0, _randomJsDefault.default)(new Uint8Array(bitLength(alg) >> 3));

},{"../util/errors.js":"2X1qM","../runtime/random.js":"lgsam","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bZstH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "importSPKI", ()=>importSPKI);
parcelHelpers.export(exports, "importX509", ()=>importX509);
parcelHelpers.export(exports, "importPKCS8", ()=>importPKCS8);
parcelHelpers.export(exports, "importJWK", ()=>importJWK);
var _base64UrlJs = require("../runtime/base64url.js");
var _asn1Js = require("../runtime/asn1.js");
var _jwkToKeyJs = require("../runtime/jwk_to_key.js");
var _jwkToKeyJsDefault = parcelHelpers.interopDefault(_jwkToKeyJs);
var _errorsJs = require("../util/errors.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function importSPKI(spki, alg, options) {
    if (typeof spki !== "string" || spki.indexOf("-----BEGIN PUBLIC KEY-----") !== 0) throw new TypeError('"spki" must be SPKI formatted string');
    return (0, _asn1Js.fromSPKI)(spki, alg, options);
}
async function importX509(x509, alg, options) {
    if (typeof x509 !== "string" || x509.indexOf("-----BEGIN CERTIFICATE-----") !== 0) throw new TypeError('"x509" must be X.509 formatted string');
    return (0, _asn1Js.fromX509)(x509, alg, options);
}
async function importPKCS8(pkcs8, alg, options) {
    if (typeof pkcs8 !== "string" || pkcs8.indexOf("-----BEGIN PRIVATE KEY-----") !== 0) throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
    return (0, _asn1Js.fromPKCS8)(pkcs8, alg, options);
}
async function importJWK(jwk, alg, octAsKeyObject) {
    var _a;
    if (!(0, _isObjectJsDefault.default)(jwk)) throw new TypeError("JWK must be an object");
    alg || (alg = jwk.alg);
    switch(jwk.kty){
        case "oct":
            if (typeof jwk.k !== "string" || !jwk.k) throw new TypeError('missing "k" (Key Value) Parameter value');
            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;
            if (octAsKeyObject) return (0, _jwkToKeyJsDefault.default)({
                ...jwk,
                alg,
                ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false
            });
            return (0, _base64UrlJs.decode)(jwk.k);
        case "RSA":
            if (jwk.oth !== undefined) throw new (0, _errorsJs.JOSENotSupported)('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
        case "EC":
        case "OKP":
            return (0, _jwkToKeyJsDefault.default)({
                ...jwk,
                alg
            });
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported "kty" (Key Type) Parameter value');
    }
}

},{"../runtime/base64url.js":"4jG0b","../runtime/asn1.js":"bT8TP","../runtime/jwk_to_key.js":"88bzq","../util/errors.js":"2X1qM","../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bT8TP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toSPKI", ()=>toSPKI);
parcelHelpers.export(exports, "toPKCS8", ()=>toPKCS8);
parcelHelpers.export(exports, "fromPKCS8", ()=>fromPKCS8);
parcelHelpers.export(exports, "fromSPKI", ()=>fromSPKI);
parcelHelpers.export(exports, "fromX509", ()=>fromX509);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _base64UrlJs = require("./base64url.js");
var _formatPemJs = require("../lib/format_pem.js");
var _formatPemJsDefault = parcelHelpers.interopDefault(_formatPemJs);
var _errorsJs = require("../util/errors.js");
var _isKeyLikeJs = require("./is_key_like.js");
const genericExport = async (keyType, keyFormat, key)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    if (!key.extractable) throw new TypeError("CryptoKey is not extractable");
    if (key.type !== keyType) throw new TypeError(`key is not a ${keyType} key`);
    return (0, _formatPemJsDefault.default)((0, _base64UrlJs.encodeBase64)(new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
};
const toSPKI = (key)=>{
    return genericExport("public", "spki", key);
};
const toPKCS8 = (key)=>{
    return genericExport("private", "pkcs8", key);
};
const findOid = (keyData, oid, from = 0)=>{
    if (from === 0) {
        oid.unshift(oid.length);
        oid.unshift(0x06);
    }
    let i = keyData.indexOf(oid[0], from);
    if (i === -1) return false;
    const sub = keyData.subarray(i, i + oid.length);
    if (sub.length !== oid.length) return false;
    return sub.every((value, index)=>value === oid[index]) || findOid(keyData, oid, i + 1);
};
const getNamedCurve = (keyData)=>{
    switch(true){
        case findOid(keyData, [
            0x2a,
            0x86,
            0x48,
            0xce,
            0x3d,
            0x03,
            0x01,
            0x07
        ]):
            return "P-256";
        case findOid(keyData, [
            0x2b,
            0x81,
            0x04,
            0x00,
            0x22
        ]):
            return "P-384";
        case findOid(keyData, [
            0x2b,
            0x81,
            0x04,
            0x00,
            0x23
        ]):
            return "P-521";
        case findOid(keyData, [
            0x2b,
            0x65,
            0x6e
        ]):
            return "X25519";
        case findOid(keyData, [
            0x2b,
            0x65,
            0x6f
        ]):
            return "X448";
        case findOid(keyData, [
            0x2b,
            0x65,
            0x70
        ]):
            return "Ed25519";
        case findOid(keyData, [
            0x2b,
            0x65,
            0x71
        ]):
            return "Ed448";
        default:
            throw new (0, _errorsJs.JOSENotSupported)("Invalid or unsupported EC Key Curve or OKP Key Sub Type");
    }
};
const genericImport = async (replace, keyFormat, pem, alg, options)=>{
    var _a;
    let algorithm;
    let keyUsages;
    const keyData = new Uint8Array(atob(pem.replace(replace, "")).split("").map((c)=>c.charCodeAt(0)));
    const isPublic = keyFormat === "spki";
    switch(alg){
        case "PS256":
        case "PS384":
        case "PS512":
            algorithm = {
                name: "RSA-PSS",
                hash: `SHA-${alg.slice(-3)}`
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        case "RS256":
        case "RS384":
        case "RS512":
            algorithm = {
                name: "RSASSA-PKCS1-v1_5",
                hash: `SHA-${alg.slice(-3)}`
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            algorithm = {
                name: "RSA-OAEP",
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
            };
            keyUsages = isPublic ? [
                "encrypt",
                "wrapKey"
            ] : [
                "decrypt",
                "unwrapKey"
            ];
            break;
        case "ES256":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-256"
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        case "ES384":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-384"
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        case "ES512":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-521"
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
            {
                const namedCurve = getNamedCurve(keyData);
                algorithm = namedCurve.startsWith("P-") ? {
                    name: "ECDH",
                    namedCurve
                } : {
                    name: namedCurve
                };
                keyUsages = isPublic ? [] : [
                    "deriveBits"
                ];
                break;
            }
        case "EdDSA":
            algorithm = {
                name: getNamedCurve(keyData)
            };
            keyUsages = isPublic ? [
                "verify"
            ] : [
                "sign"
            ];
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (Algorithm) value');
    }
    return (0, _webcryptoJsDefault.default).subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
};
const fromPKCS8 = (pem, alg, options)=>{
    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, "pkcs8", pem, alg, options);
};
const fromSPKI = (pem, alg, options)=>{
    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, "spki", pem, alg, options);
};
function getElement(seq) {
    let result = [];
    let next = 0;
    while(next < seq.length){
        let nextPart = parseElement(seq.subarray(next));
        result.push(nextPart);
        next += nextPart.byteLength;
    }
    return result;
}
function parseElement(bytes) {
    let position = 0;
    let tag = bytes[0] & 0x1f;
    position++;
    if (tag === 0x1f) {
        tag = 0;
        while(bytes[position] >= 0x80){
            tag = tag * 128 + bytes[position] - 0x80;
            position++;
        }
        tag = tag * 128 + bytes[position] - 0x80;
        position++;
    }
    let length = 0;
    if (bytes[position] < 0x80) {
        length = bytes[position];
        position++;
    } else if (length === 0x80) {
        length = 0;
        while(bytes[position + length] !== 0 || bytes[position + length + 1] !== 0){
            if (length > bytes.byteLength) throw new TypeError("invalid indefinite form length");
            length++;
        }
        const byteLength = position + length + 2;
        return {
            byteLength,
            contents: bytes.subarray(position, position + length),
            raw: bytes.subarray(0, byteLength)
        };
    } else {
        let numberOfDigits = bytes[position] & 0x7f;
        position++;
        length = 0;
        for(let i = 0; i < numberOfDigits; i++){
            length = length * 256 + bytes[position];
            position++;
        }
    }
    const byteLength = position + length;
    return {
        byteLength,
        contents: bytes.subarray(position, byteLength),
        raw: bytes.subarray(0, byteLength)
    };
}
function spkiFromX509(buf) {
    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
    return (0, _base64UrlJs.encodeBase64)(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);
}
function getSPKI(x509) {
    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, "");
    const raw = (0, _base64UrlJs.decodeBase64)(pem);
    return (0, _formatPemJsDefault.default)(spkiFromX509(raw), "PUBLIC KEY");
}
const fromX509 = (pem, alg, options)=>{
    let spki;
    try {
        spki = getSPKI(pem);
    } catch (cause) {
        throw new TypeError("Failed to parse the X.509 certificate", {
            cause
        });
    }
    return fromSPKI(spki, alg, options);
};

},{"./webcrypto.js":"i291m","../lib/invalid_key_input.js":"6MovY","./base64url.js":"4jG0b","../lib/format_pem.js":"bakbk","../util/errors.js":"2X1qM","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bakbk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (b64, descriptor)=>{
    const newlined = (b64.match(/.{1,64}/g) || []).join("\n");
    return `-----BEGIN ${descriptor}-----\n${newlined}\n-----END ${descriptor}-----`;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"88bzq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _errorsJs = require("../util/errors.js");
var _base64UrlJs = require("./base64url.js");
function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch(jwk.kty){
        case "oct":
            switch(jwk.alg){
                case "HS256":
                case "HS384":
                case "HS512":
                    algorithm = {
                        name: "HMAC",
                        hash: `SHA-${jwk.alg.slice(-3)}`
                    };
                    keyUsages = [
                        "sign",
                        "verify"
                    ];
                    break;
                case "A128CBC-HS256":
                case "A192CBC-HS384":
                case "A256CBC-HS512":
                    throw new (0, _errorsJs.JOSENotSupported)(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
                case "A128GCM":
                case "A192GCM":
                case "A256GCM":
                case "A128GCMKW":
                case "A192GCMKW":
                case "A256GCMKW":
                    algorithm = {
                        name: "AES-GCM"
                    };
                    keyUsages = [
                        "encrypt",
                        "decrypt"
                    ];
                    break;
                case "A128KW":
                case "A192KW":
                case "A256KW":
                    algorithm = {
                        name: "AES-KW"
                    };
                    keyUsages = [
                        "wrapKey",
                        "unwrapKey"
                    ];
                    break;
                case "PBES2-HS256+A128KW":
                case "PBES2-HS384+A192KW":
                case "PBES2-HS512+A256KW":
                    algorithm = {
                        name: "PBKDF2"
                    };
                    keyUsages = [
                        "deriveBits"
                    ];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case "RSA":
            switch(jwk.alg){
                case "PS256":
                case "PS384":
                case "PS512":
                    algorithm = {
                        name: "RSA-PSS",
                        hash: `SHA-${jwk.alg.slice(-3)}`
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "RS256":
                case "RS384":
                case "RS512":
                    algorithm = {
                        name: "RSASSA-PKCS1-v1_5",
                        hash: `SHA-${jwk.alg.slice(-3)}`
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "RSA-OAEP":
                case "RSA-OAEP-256":
                case "RSA-OAEP-384":
                case "RSA-OAEP-512":
                    algorithm = {
                        name: "RSA-OAEP",
                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
                    };
                    keyUsages = jwk.d ? [
                        "decrypt",
                        "unwrapKey"
                    ] : [
                        "encrypt",
                        "wrapKey"
                    ];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case "EC":
            switch(jwk.alg){
                case "ES256":
                    algorithm = {
                        name: "ECDSA",
                        namedCurve: "P-256"
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "ES384":
                    algorithm = {
                        name: "ECDSA",
                        namedCurve: "P-384"
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "ES512":
                    algorithm = {
                        name: "ECDSA",
                        namedCurve: "P-521"
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "ECDH-ES":
                case "ECDH-ES+A128KW":
                case "ECDH-ES+A192KW":
                case "ECDH-ES+A256KW":
                    algorithm = {
                        name: "ECDH",
                        namedCurve: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        "deriveBits"
                    ] : [];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case "OKP":
            switch(jwk.alg){
                case "EdDSA":
                    algorithm = {
                        name: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        "sign"
                    ] : [
                        "verify"
                    ];
                    break;
                case "ECDH-ES":
                case "ECDH-ES+A128KW":
                case "ECDH-ES+A192KW":
                case "ECDH-ES+A256KW":
                    algorithm = {
                        name: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        "deriveBits"
                    ] : [];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return {
        algorithm,
        keyUsages
    };
}
const parse = async (jwk)=>{
    var _a, _b;
    if (!jwk.alg) throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    const { algorithm, keyUsages } = subtleMapping(jwk);
    const rest = [
        algorithm,
        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,
        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages
    ];
    if (algorithm.name === "PBKDF2") return (0, _webcryptoJsDefault.default).subtle.importKey("raw", (0, _base64UrlJs.decode)(jwk.k), ...rest);
    const keyData = {
        ...jwk
    };
    delete keyData.alg;
    delete keyData.use;
    return (0, _webcryptoJsDefault.default).subtle.importKey("jwk", keyData, ...rest);
};
exports.default = parse;

},{"./webcrypto.js":"i291m","../util/errors.js":"2X1qM","./base64url.js":"4jG0b","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6wUbO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invalidKeyInputJs = require("./invalid_key_input.js");
var _isKeyLikeJs = require("../runtime/is_key_like.js");
var _isKeyLikeJsDefault = parcelHelpers.interopDefault(_isKeyLikeJs);
const symmetricTypeCheck = (alg, key)=>{
    if (key instanceof Uint8Array) return;
    if (!(0, _isKeyLikeJsDefault.default)(key)) throw new TypeError((0, _invalidKeyInputJs.withAlg)(alg, key, ...(0, _isKeyLikeJs.types), "Uint8Array"));
    if (key.type !== "secret") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for symmetric algorithms must be of type "secret"`);
};
const asymmetricTypeCheck = (alg, key, usage)=>{
    if (!(0, _isKeyLikeJsDefault.default)(key)) throw new TypeError((0, _invalidKeyInputJs.withAlg)(alg, key, ...(0, _isKeyLikeJs.types)));
    if (key.type === "secret") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);
    if (usage === "sign" && key.type === "public") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);
    if (usage === "decrypt" && key.type === "public") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);
    if (key.algorithm && usage === "verify" && key.type === "private") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);
    if (key.algorithm && usage === "encrypt" && key.type === "private") throw new TypeError(`${(0, _isKeyLikeJs.types).join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`);
};
const checkKeyType = (alg, key, usage)=>{
    const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) symmetricTypeCheck(alg, key);
    else asymmetricTypeCheck(alg, key, usage);
};
exports.default = checkKeyType;

},{"./invalid_key_input.js":"6MovY","../runtime/is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"39d3M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
parcelHelpers.export(exports, "unwrap", ()=>unwrap);
var _encryptJs = require("../runtime/encrypt.js");
var _encryptJsDefault = parcelHelpers.interopDefault(_encryptJs);
var _decryptJs = require("../runtime/decrypt.js");
var _decryptJsDefault = parcelHelpers.interopDefault(_decryptJs);
var _ivJs = require("./iv.js");
var _ivJsDefault = parcelHelpers.interopDefault(_ivJs);
var _base64UrlJs = require("../runtime/base64url.js");
async function wrap(alg, key, cek, iv) {
    const jweAlgorithm = alg.slice(0, 7);
    iv || (iv = (0, _ivJsDefault.default)(jweAlgorithm));
    const { ciphertext: encryptedKey, tag } = await (0, _encryptJsDefault.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return {
        encryptedKey,
        iv: (0, _base64UrlJs.encode)(iv),
        tag: (0, _base64UrlJs.encode)(tag)
    };
}
async function unwrap(alg, key, encryptedKey, iv, tag) {
    const jweAlgorithm = alg.slice(0, 7);
    return (0, _decryptJsDefault.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}

},{"../runtime/encrypt.js":"WbXdF","../runtime/decrypt.js":"4MYyY","./iv.js":"2DE5r","../runtime/base64url.js":"4jG0b","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"WbXdF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _checkIvLengthJs = require("../lib/check_iv_length.js");
var _checkIvLengthJsDefault = parcelHelpers.interopDefault(_checkIvLengthJs);
var _checkCekLengthJs = require("./check_cek_length.js");
var _checkCekLengthJsDefault = parcelHelpers.interopDefault(_checkCekLengthJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _errorsJs = require("../util/errors.js");
var _isKeyLikeJs = require("./is_key_like.js");
async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    if (!(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, "Uint8Array"));
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, [
        "encrypt"
    ]);
    const macKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: "HMAC"
    }, false, [
        "sign"
    ]);
    const ciphertext = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt({
        iv,
        name: "AES-CBC"
    }, encKey, plaintext));
    const macData = (0, _bufferUtilsJs.concat)(aad, iv, ciphertext, (0, _bufferUtilsJs.uint64be)(aad.length << 3));
    const tag = new Uint8Array((await (0, _webcryptoJsDefault.default).subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
    return {
        ciphertext,
        tag
    };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
    let encKey;
    if (cek instanceof Uint8Array) encKey = await (0, _webcryptoJsDefault.default).subtle.importKey("raw", cek, "AES-GCM", false, [
        "encrypt"
    ]);
    else {
        (0, _cryptoKeyJs.checkEncCryptoKey)(cek, enc, "encrypt");
        encKey = cek;
    }
    const encrypted = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt({
        additionalData: aad,
        iv,
        name: "AES-GCM",
        tagLength: 128
    }, encKey, plaintext));
    const tag = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return {
        ciphertext,
        tag
    };
}
const encrypt = async (enc, plaintext, cek, iv, aad)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, ...(0, _isKeyLikeJs.types), "Uint8Array"));
    (0, _checkIvLengthJsDefault.default)(enc, iv);
    switch(enc){
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(-3), 10));
            return cbcEncrypt(enc, plaintext, cek, iv, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(1, 4), 10));
            return gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
            throw new (0, _errorsJs.JOSENotSupported)("Unsupported JWE Content Encryption Algorithm");
    }
};
exports.default = encrypt;

},{"../lib/buffer_utils.js":"fv5jM","../lib/check_iv_length.js":"3wvHa","./check_cek_length.js":"fQXod","./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","../util/errors.js":"2X1qM","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"dXiTZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    if (!protectedHeader || protectedHeader.crit === undefined) return new Set();
    if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input)=>typeof input !== "string" || input.length === 0)) throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    let recognized;
    if (recognizedOption !== undefined) recognized = new Map([
        ...Object.entries(recognizedOption),
        ...recognizedDefault.entries()
    ]);
    else recognized = recognizedDefault;
    for (const parameter of protectedHeader.crit){
        if (!recognized.has(parameter)) throw new (0, _errorsJs.JOSENotSupported)(`Extension Header Parameter "${parameter}" is not recognized`);
        if (joseHeader[parameter] === undefined) throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
    return new Set(protectedHeader.crit);
}
exports.default = validateCrit;

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"64cJv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const validateAlgorithms = (option, algorithms)=>{
    if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some((s)=>typeof s !== "string"))) throw new TypeError(`"${option}" option must be an array of strings`);
    if (!algorithms) return undefined;
    return new Set(algorithms);
};
exports.default = validateAlgorithms;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lBvNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generalDecrypt", ()=>generalDecrypt);
var _decryptJs = require("../flattened/decrypt.js");
var _errorsJs = require("../../util/errors.js");
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function generalDecrypt(jwe, key, options) {
    if (!(0, _isObjectJsDefault.default)(jwe)) throw new (0, _errorsJs.JWEInvalid)("General JWE must be an object");
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every((0, _isObjectJsDefault.default))) throw new (0, _errorsJs.JWEInvalid)("JWE Recipients missing or incorrect type");
    if (!jwe.recipients.length) throw new (0, _errorsJs.JWEInvalid)("JWE Recipients has no members");
    for (const recipient of jwe.recipients)try {
        return await (0, _decryptJs.flattenedDecrypt)({
            aad: jwe.aad,
            ciphertext: jwe.ciphertext,
            encrypted_key: recipient.encrypted_key,
            header: recipient.header,
            iv: jwe.iv,
            protected: jwe.protected,
            tag: jwe.tag,
            unprotected: jwe.unprotected
        }, key, options);
    } catch (_a) {}
    throw new (0, _errorsJs.JWEDecryptionFailed)();
}

},{"../flattened/decrypt.js":"6P9KA","../../util/errors.js":"2X1qM","../../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"hvvCQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GeneralEncrypt", ()=>GeneralEncrypt);
var _encryptJs = require("../flattened/encrypt.js");
var _errorsJs = require("../../util/errors.js");
var _cekJs = require("../../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _encryptKeyManagementJs = require("../../lib/encrypt_key_management.js");
var _encryptKeyManagementJsDefault = parcelHelpers.interopDefault(_encryptKeyManagementJs);
var _base64UrlJs = require("../../runtime/base64url.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
class IndividualRecipient {
    constructor(enc, key, options){
        this.parent = enc;
        this.key = key;
        this.options = options;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addRecipient(...args) {
        return this.parent.addRecipient(...args);
    }
    encrypt(...args) {
        return this.parent.encrypt(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralEncrypt {
    constructor(plaintext){
        this._recipients = [];
        this._plaintext = plaintext;
    }
    addRecipient(key, options) {
        const recipient = new IndividualRecipient(this, key, {
            crit: options === null || options === void 0 ? void 0 : options.crit
        });
        this._recipients.push(recipient);
        return recipient;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError("setSharedUnprotectedHeader can only be called once");
        this._unprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    async encrypt(options) {
        var _a, _b, _c;
        if (!this._recipients.length) throw new (0, _errorsJs.JWEInvalid)("at least one recipient must be added");
        options = {
            deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw
        };
        if (this._recipients.length === 1) {
            const [recipient] = this._recipients;
            const flattened = await new (0, _encryptJs.FlattenedEncrypt)(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, {
                ...recipient.options,
                ...options
            });
            let jwe = {
                ciphertext: flattened.ciphertext,
                iv: flattened.iv,
                recipients: [
                    {}
                ],
                tag: flattened.tag
            };
            if (flattened.aad) jwe.aad = flattened.aad;
            if (flattened.protected) jwe.protected = flattened.protected;
            if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
            if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;
            if (flattened.header) jwe.recipients[0].header = flattened.header;
            return jwe;
        }
        let enc;
        for(let i = 0; i < this._recipients.length; i++){
            const recipient = this._recipients[i];
            if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) throw new (0, _errorsJs.JWEInvalid)("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader
            };
            const { alg } = joseHeader;
            if (typeof alg !== "string" || !alg) throw new (0, _errorsJs.JWEInvalid)('JWE "alg" (Algorithm) Header Parameter missing or invalid');
            if (alg === "dir" || alg === "ECDH-ES") throw new (0, _errorsJs.JWEInvalid)('"dir" and "ECDH-ES" alg may only be used with a single recipient');
            if (typeof joseHeader.enc !== "string" || !joseHeader.enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
            if (!enc) enc = joseHeader.enc;
            else if (enc !== joseHeader.enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
            (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
            if (joseHeader.zip !== undefined) {
                if (!this._protectedHeader || !this._protectedHeader.zip) throw new (0, _errorsJs.JWEInvalid)('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
            }
        }
        const cek = (0, _cekJsDefault.default)(enc);
        let jwe = {
            ciphertext: "",
            iv: "",
            recipients: [],
            tag: ""
        };
        for(let i = 0; i < this._recipients.length; i++){
            const recipient = this._recipients[i];
            const target = {};
            jwe.recipients.push(target);
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader
            };
            const p2c = joseHeader.alg.startsWith("PBES2") ? 2048 + i : undefined;
            if (i === 0) {
                const flattened = await new (0, _encryptJs.FlattenedEncrypt)(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({
                    p2c
                }).encrypt(recipient.key, {
                    ...recipient.options,
                    ...options,
                    [(0, _encryptJs.unprotected)]: true
                });
                jwe.ciphertext = flattened.ciphertext;
                jwe.iv = flattened.iv;
                jwe.tag = flattened.tag;
                if (flattened.aad) jwe.aad = flattened.aad;
                if (flattened.protected) jwe.protected = flattened.protected;
                if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
                target.encrypted_key = flattened.encrypted_key;
                if (flattened.header) target.header = flattened.header;
                continue;
            }
            const { encryptedKey, parameters } = await (0, _encryptKeyManagementJsDefault.default)(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, {
                p2c
            });
            target.encrypted_key = (0, _base64UrlJs.encode)(encryptedKey);
            if (recipient.unprotectedHeader || parameters) target.header = {
                ...recipient.unprotectedHeader,
                ...parameters
            };
        }
        return jwe;
    }
}

},{"../flattened/encrypt.js":"cKGQ7","../../util/errors.js":"2X1qM","../../lib/cek.js":"fYJCA","../../lib/is_disjoint.js":"KLjre","../../lib/encrypt_key_management.js":"e39iF","../../runtime/base64url.js":"4jG0b","../../lib/validate_crit.js":"dXiTZ","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"cKGQ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unprotected", ()=>unprotected);
parcelHelpers.export(exports, "FlattenedEncrypt", ()=>FlattenedEncrypt);
var _base64UrlJs = require("../../runtime/base64url.js");
var _encryptJs = require("../../runtime/encrypt.js");
var _encryptJsDefault = parcelHelpers.interopDefault(_encryptJs);
var _zlibJs = require("../../runtime/zlib.js");
var _ivJs = require("../../lib/iv.js");
var _ivJsDefault = parcelHelpers.interopDefault(_ivJs);
var _encryptKeyManagementJs = require("../../lib/encrypt_key_management.js");
var _encryptKeyManagementJsDefault = parcelHelpers.interopDefault(_encryptKeyManagementJs);
var _errorsJs = require("../../util/errors.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
const unprotected = Symbol();
class FlattenedEncrypt {
    constructor(plaintext){
        if (!(plaintext instanceof Uint8Array)) throw new TypeError("plaintext must be an instance of Uint8Array");
        this._plaintext = plaintext;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) throw new TypeError("setKeyManagementParameters can only be called once");
        this._keyManagementParameters = parameters;
        return this;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) throw new TypeError("setSharedUnprotectedHeader can only be called once");
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) throw new TypeError("setContentEncryptionKey can only be called once");
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) throw new TypeError("setInitializationVector can only be called once");
        this._iv = iv;
        return this;
    }
    async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) throw new (0, _errorsJs.JWEInvalid)("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
        if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) throw new (0, _errorsJs.JWEInvalid)("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader
        };
        (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== undefined) {
            if (!this._protectedHeader || !this._protectedHeader.zip) throw new (0, _errorsJs.JWEInvalid)('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
            if (joseHeader.zip !== "DEF") throw new (0, _errorsJs.JOSENotSupported)('Unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
        }
        const { alg, enc } = joseHeader;
        if (typeof alg !== "string" || !alg) throw new (0, _errorsJs.JWEInvalid)('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        if (typeof enc !== "string" || !enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        let encryptedKey;
        if (alg === "dir") {
            if (this._cek) throw new TypeError("setContentEncryptionKey cannot be called when using Direct Encryption");
        } else if (alg === "ECDH-ES") {
            if (this._cek) throw new TypeError("setContentEncryptionKey cannot be called when using Direct Key Agreement");
        }
        let cek;
        {
            let parameters;
            ({ cek, encryptedKey, parameters } = await (0, _encryptKeyManagementJsDefault.default)(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
                if (options && unprotected in options) {
                    if (!this._unprotectedHeader) this.setUnprotectedHeader(parameters);
                    else this._unprotectedHeader = {
                        ...this._unprotectedHeader,
                        ...parameters
                    };
                } else if (!this._protectedHeader) this.setProtectedHeader(parameters);
                else this._protectedHeader = {
                    ...this._protectedHeader,
                    ...parameters
                };
            }
        }
        this._iv || (this._iv = (0, _ivJsDefault.default)(enc));
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) protectedHeader = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(JSON.stringify(this._protectedHeader)));
        else protectedHeader = (0, _bufferUtilsJs.encoder).encode("");
        if (this._aad) {
            aadMember = (0, _base64UrlJs.encode)(this._aad);
            additionalData = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode("."), (0, _bufferUtilsJs.encoder).encode(aadMember));
        } else additionalData = protectedHeader;
        let ciphertext;
        let tag;
        if (joseHeader.zip === "DEF") {
            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || (0, _zlibJs.deflate))(this._plaintext);
            ({ ciphertext, tag } = await (0, _encryptJsDefault.default)(enc, deflated, cek, this._iv, additionalData));
        } else ({ ciphertext, tag } = await (0, _encryptJsDefault.default)(enc, this._plaintext, cek, this._iv, additionalData));
        const jwe = {
            ciphertext: (0, _base64UrlJs.encode)(ciphertext),
            iv: (0, _base64UrlJs.encode)(this._iv),
            tag: (0, _base64UrlJs.encode)(tag)
        };
        if (encryptedKey) jwe.encrypted_key = (0, _base64UrlJs.encode)(encryptedKey);
        if (aadMember) jwe.aad = aadMember;
        if (this._protectedHeader) jwe.protected = (0, _bufferUtilsJs.decoder).decode(protectedHeader);
        if (this._sharedUnprotectedHeader) jwe.unprotected = this._sharedUnprotectedHeader;
        if (this._unprotectedHeader) jwe.header = this._unprotectedHeader;
        return jwe;
    }
}

},{"../../runtime/base64url.js":"4jG0b","../../runtime/encrypt.js":"WbXdF","../../runtime/zlib.js":"7K7kb","../../lib/iv.js":"2DE5r","../../lib/encrypt_key_management.js":"e39iF","../../util/errors.js":"2X1qM","../../lib/is_disjoint.js":"KLjre","../../lib/buffer_utils.js":"fv5jM","../../lib/validate_crit.js":"dXiTZ","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"e39iF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _aeskwJs = require("../runtime/aeskw.js");
var _ecdhesJs = require("../runtime/ecdhes.js");
var _pbes2KwJs = require("../runtime/pbes2kw.js");
var _rsaesJs = require("../runtime/rsaes.js");
var _base64UrlJs = require("../runtime/base64url.js");
var _cekJs = require("../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _errorsJs = require("../util/errors.js");
var _exportJs = require("../key/export.js");
var _checkKeyTypeJs = require("./check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _aesgcmkwJs = require("./aesgcmkw.js");
async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    (0, _checkKeyTypeJsDefault.default)(alg, key, "encrypt");
    switch(alg){
        case "dir":
            cek = key;
            break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
            {
                if (!_ecdhesJs.ecdhAllowed(key)) throw new (0, _errorsJs.JOSENotSupported)("ECDH with the provided key is not allowed or not supported by your javascript runtime");
                const { apu, apv } = providedParameters;
                let { epk: ephemeralKey } = providedParameters;
                ephemeralKey || (ephemeralKey = (await _ecdhesJs.generateEpk(key)).privateKey);
                const { x, y, crv, kty } = await (0, _exportJs.exportJWK)(ephemeralKey);
                const sharedSecret = await _ecdhesJs.deriveKey(key, ephemeralKey, alg === "ECDH-ES" ? enc : alg, alg === "ECDH-ES" ? (0, _cekJs.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
                parameters = {
                    epk: {
                        x,
                        crv,
                        kty
                    }
                };
                if (kty === "EC") parameters.epk.y = y;
                if (apu) parameters.apu = (0, _base64UrlJs.encode)(apu);
                if (apv) parameters.apv = (0, _base64UrlJs.encode)(apv);
                if (alg === "ECDH-ES") {
                    cek = sharedSecret;
                    break;
                }
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const kwAlg = alg.slice(-6);
                encryptedKey = await (0, _aeskwJs.wrap)(kwAlg, sharedSecret, cek);
                break;
            }
        case "RSA1_5":
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            cek = providedCek || (0, _cekJsDefault.default)(enc);
            encryptedKey = await (0, _rsaesJs.encrypt)(alg, key, cek);
            break;
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
            {
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const { p2c, p2s } = providedParameters;
                ({ encryptedKey, ...parameters } = await (0, _pbes2KwJs.encrypt)(alg, key, cek, p2c, p2s));
                break;
            }
        case "A128KW":
        case "A192KW":
        case "A256KW":
            cek = providedCek || (0, _cekJsDefault.default)(enc);
            encryptedKey = await (0, _aeskwJs.wrap)(alg, key, cek);
            break;
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
            {
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const { iv } = providedParameters;
                ({ encryptedKey, ...parameters } = await (0, _aesgcmkwJs.wrap)(alg, key, cek, iv));
                break;
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
    return {
        cek,
        encryptedKey,
        parameters
    };
}
exports.default = encryptKeyManagement;

},{"../runtime/aeskw.js":"ArHmU","../runtime/ecdhes.js":"iZXOY","../runtime/pbes2kw.js":"l759B","../runtime/rsaes.js":"jEK1c","../runtime/base64url.js":"4jG0b","../lib/cek.js":"fYJCA","../util/errors.js":"2X1qM","../key/export.js":"f6GwS","./check_key_type.js":"6wUbO","./aesgcmkw.js":"39d3M","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"f6GwS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exportSPKI", ()=>exportSPKI);
parcelHelpers.export(exports, "exportPKCS8", ()=>exportPKCS8);
parcelHelpers.export(exports, "exportJWK", ()=>exportJWK);
var _asn1Js = require("../runtime/asn1.js");
var _keyToJwkJs = require("../runtime/key_to_jwk.js");
var _keyToJwkJsDefault = parcelHelpers.interopDefault(_keyToJwkJs);
async function exportSPKI(key) {
    return (0, _asn1Js.toSPKI)(key);
}
async function exportPKCS8(key) {
    return (0, _asn1Js.toPKCS8)(key);
}
async function exportJWK(key) {
    return (0, _keyToJwkJsDefault.default)(key);
}

},{"../runtime/asn1.js":"bT8TP","../runtime/key_to_jwk.js":"iRsJ0","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"iRsJ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _base64UrlJs = require("./base64url.js");
var _isKeyLikeJs = require("./is_key_like.js");
const keyToJWK = async (key)=>{
    if (key instanceof Uint8Array) return {
        kty: "oct",
        k: (0, _base64UrlJs.encode)(key)
    };
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), "Uint8Array"));
    if (!key.extractable) throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");
    const { ext, key_ops, alg, use, ...jwk } = await (0, _webcryptoJsDefault.default).subtle.exportKey("jwk", key);
    return jwk;
};
exports.default = keyToJWK;

},{"./webcrypto.js":"i291m","../lib/invalid_key_input.js":"6MovY","./base64url.js":"4jG0b","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"eD3Di":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactVerify", ()=>compactVerify);
var _verifyJs = require("../flattened/verify.js");
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) jws = (0, _bufferUtilsJs.decoder).decode(jws);
    if (typeof jws !== "string") throw new (0, _errorsJs.JWSInvalid)("Compact JWS must be a string or Uint8Array");
    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
    if (length !== 3) throw new (0, _errorsJs.JWSInvalid)("Invalid Compact JWS");
    const verified = await (0, _verifyJs.flattenedVerify)({
        payload,
        protected: protectedHeader,
        signature
    }, key, options);
    const result = {
        payload: verified.payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === "function") return {
        ...result,
        key: verified.key
    };
    return result;
}

},{"../flattened/verify.js":"1k3Lx","../../util/errors.js":"2X1qM","../../lib/buffer_utils.js":"fv5jM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"1k3Lx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenedVerify", ()=>flattenedVerify);
var _base64UrlJs = require("../../runtime/base64url.js");
var _verifyJs = require("../../runtime/verify.js");
var _verifyJsDefault = parcelHelpers.interopDefault(_verifyJs);
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _checkKeyTypeJs = require("../../lib/check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
var _validateAlgorithmsJs = require("../../lib/validate_algorithms.js");
var _validateAlgorithmsJsDefault = parcelHelpers.interopDefault(_validateAlgorithmsJs);
async function flattenedVerify(jws, key, options) {
    var _a;
    if (!(0, _isObjectJsDefault.default)(jws)) throw new (0, _errorsJs.JWSInvalid)("Flattened JWS must be an object");
    if (jws.protected === undefined && jws.header === undefined) throw new (0, _errorsJs.JWSInvalid)('Flattened JWS must have either of the "protected" or "header" members');
    if (jws.protected !== undefined && typeof jws.protected !== "string") throw new (0, _errorsJs.JWSInvalid)("JWS Protected Header incorrect type");
    if (jws.payload === undefined) throw new (0, _errorsJs.JWSInvalid)("JWS Payload missing");
    if (typeof jws.signature !== "string") throw new (0, _errorsJs.JWSInvalid)("JWS Signature missing or incorrect type");
    if (jws.header !== undefined && !(0, _isObjectJsDefault.default)(jws.header)) throw new (0, _errorsJs.JWSInvalid)("JWS Unprotected Header incorrect type");
    let parsedProt = {};
    if (jws.protected) try {
        const protectedHeader = (0, _base64UrlJs.decode)(jws.protected);
        parsedProt = JSON.parse((0, _bufferUtilsJs.decoder).decode(protectedHeader));
    } catch (_b) {
        throw new (0, _errorsJs.JWSInvalid)("JWS Protected Header is invalid");
    }
    if (!(0, _isDisjointJsDefault.default)(parsedProt, jws.header)) throw new (0, _errorsJs.JWSInvalid)("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
    const joseHeader = {
        ...parsedProt,
        ...jws.header
    };
    const extensions = (0, _validateCritJsDefault.default)((0, _errorsJs.JWSInvalid), new Map([
        [
            "b64",
            true
        ]
    ]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has("b64")) {
        b64 = parsedProt.b64;
        if (typeof b64 !== "boolean") throw new (0, _errorsJs.JWSInvalid)('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
    const { alg } = joseHeader;
    if (typeof alg !== "string" || !alg) throw new (0, _errorsJs.JWSInvalid)('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    const algorithms = options && (0, _validateAlgorithmsJsDefault.default)("algorithms", options.algorithms);
    if (algorithms && !algorithms.has(alg)) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"alg" (Algorithm) Header Parameter not allowed');
    if (b64) {
        if (typeof jws.payload !== "string") throw new (0, _errorsJs.JWSInvalid)("JWS Payload must be a string");
    } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) throw new (0, _errorsJs.JWSInvalid)("JWS Payload must be a string or an Uint8Array instance");
    let resolvedKey = false;
    if (typeof key === "function") {
        key = await key(parsedProt, jws);
        resolvedKey = true;
    }
    (0, _checkKeyTypeJsDefault.default)(alg, key, "verify");
    const data = (0, _bufferUtilsJs.concat)((0, _bufferUtilsJs.encoder).encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ""), (0, _bufferUtilsJs.encoder).encode("."), typeof jws.payload === "string" ? (0, _bufferUtilsJs.encoder).encode(jws.payload) : jws.payload);
    let signature;
    try {
        signature = (0, _base64UrlJs.decode)(jws.signature);
    } catch (_c) {
        throw new (0, _errorsJs.JWSInvalid)("Failed to base64url decode the signature");
    }
    const verified = await (0, _verifyJsDefault.default)(alg, key, signature, data);
    if (!verified) throw new (0, _errorsJs.JWSSignatureVerificationFailed)();
    let payload;
    if (b64) try {
        payload = (0, _base64UrlJs.decode)(jws.payload);
    } catch (_d) {
        throw new (0, _errorsJs.JWSInvalid)("Failed to base64url decode the payload");
    }
    else if (typeof jws.payload === "string") payload = (0, _bufferUtilsJs.encoder).encode(jws.payload);
    else payload = jws.payload;
    const result = {
        payload
    };
    if (jws.protected !== undefined) result.protectedHeader = parsedProt;
    if (jws.header !== undefined) result.unprotectedHeader = jws.header;
    if (resolvedKey) return {
        ...result,
        key
    };
    return result;
}

},{"../../runtime/base64url.js":"4jG0b","../../runtime/verify.js":"lP6oY","../../util/errors.js":"2X1qM","../../lib/buffer_utils.js":"fv5jM","../../lib/is_disjoint.js":"KLjre","../../lib/is_object.js":"clAVD","../../lib/check_key_type.js":"6wUbO","../../lib/validate_crit.js":"dXiTZ","../../lib/validate_algorithms.js":"64cJv","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lP6oY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _subtleDsaJs = require("./subtle_dsa.js");
var _subtleDsaJsDefault = parcelHelpers.interopDefault(_subtleDsaJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _getSignVerifyKeyJs = require("./get_sign_verify_key.js");
var _getSignVerifyKeyJsDefault = parcelHelpers.interopDefault(_getSignVerifyKeyJs);
const verify = async (alg, key, signature, data)=>{
    const cryptoKey = await (0, _getSignVerifyKeyJsDefault.default)(alg, key, "verify");
    (0, _checkKeyLengthJsDefault.default)(alg, cryptoKey);
    const algorithm = (0, _subtleDsaJsDefault.default)(alg, cryptoKey.algorithm);
    try {
        return await (0, _webcryptoJsDefault.default).subtle.verify(algorithm, cryptoKey, signature, data);
    } catch (_a) {
        return false;
    }
};
exports.default = verify;

},{"./subtle_dsa.js":"cHJH9","./webcrypto.js":"i291m","./check_key_length.js":"1mG3B","./get_sign_verify_key.js":"lDW8z","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"cHJH9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>subtleDsa);
var _errorsJs = require("../util/errors.js");
function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch(alg){
        case "HS256":
        case "HS384":
        case "HS512":
            return {
                hash,
                name: "HMAC"
            };
        case "PS256":
        case "PS384":
        case "PS512":
            return {
                hash,
                name: "RSA-PSS",
                saltLength: alg.slice(-3) >> 3
            };
        case "RS256":
        case "RS384":
        case "RS512":
            return {
                hash,
                name: "RSASSA-PKCS1-v1_5"
            };
        case "ES256":
        case "ES384":
        case "ES512":
            return {
                hash,
                name: "ECDSA",
                namedCurve: algorithm.namedCurve
            };
        case "EdDSA":
            return {
                name: algorithm.name
            };
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lDW8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCryptoKey);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
function getCryptoKey(alg, key, usage) {
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkSigCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith("HS")) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
        return (0, _webcryptoJsDefault.default).subtle.importKey("raw", key, {
            hash: `SHA-${alg.slice(-3)}`,
            name: "HMAC"
        }, false, [
            usage
        ]);
    }
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), "Uint8Array"));
}

},{"./webcrypto.js":"i291m","../lib/crypto_key.js":"39DH4","../lib/invalid_key_input.js":"6MovY","./is_key_like.js":"iMvzY","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"2UysX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generalVerify", ()=>generalVerify);
var _verifyJs = require("../flattened/verify.js");
var _errorsJs = require("../../util/errors.js");
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function generalVerify(jws, key, options) {
    if (!(0, _isObjectJsDefault.default)(jws)) throw new (0, _errorsJs.JWSInvalid)("General JWS must be an object");
    if (!Array.isArray(jws.signatures) || !jws.signatures.every((0, _isObjectJsDefault.default))) throw new (0, _errorsJs.JWSInvalid)("JWS Signatures missing or incorrect type");
    for (const signature of jws.signatures)try {
        return await (0, _verifyJs.flattenedVerify)({
            header: signature.header,
            payload: jws.payload,
            protected: signature.protected,
            signature: signature.signature
        }, key, options);
    } catch (_a) {}
    throw new (0, _errorsJs.JWSSignatureVerificationFailed)();
}

},{"../flattened/verify.js":"1k3Lx","../../util/errors.js":"2X1qM","../../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"jCkEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jwtVerify", ()=>jwtVerify);
var _verifyJs = require("../jws/compact/verify.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _errorsJs = require("../util/errors.js");
async function jwtVerify(jwt, key, options) {
    var _a;
    const verified = await (0, _verifyJs.compactVerify)(jwt, key, options);
    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes("b64")) && verified.protectedHeader.b64 === false) throw new (0, _errorsJs.JWTInvalid)("JWTs MUST NOT use unencoded payload");
    const payload = (0, _jwtClaimsSetJsDefault.default)(verified.protectedHeader, verified.payload, options);
    const result = {
        payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === "function") return {
        ...result,
        key: verified.key
    };
    return result;
}

},{"../jws/compact/verify.js":"eD3Di","../lib/jwt_claims_set.js":"6kooG","../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6kooG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("./buffer_utils.js");
var _epochJs = require("./epoch.js");
var _epochJsDefault = parcelHelpers.interopDefault(_epochJs);
var _secsJs = require("./secs.js");
var _secsJsDefault = parcelHelpers.interopDefault(_secsJs);
var _isObjectJs = require("./is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
const normalizeTyp = (value)=>value.toLowerCase().replace(/^application\//, "");
const checkAudiencePresence = (audPayload, audOption)=>{
    if (typeof audPayload === "string") return audOption.includes(audPayload);
    if (Array.isArray(audPayload)) return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
    return false;
};
exports.default = (protectedHeader, encodedPayload, options = {})=>{
    const { typ } = options;
    if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "typ" JWT header value', "typ", "check_failed");
    let payload;
    try {
        payload = JSON.parse((0, _bufferUtilsJs.decoder).decode(encodedPayload));
    } catch (_a) {}
    if (!(0, _isObjectJsDefault.default)(payload)) throw new (0, _errorsJs.JWTInvalid)("JWT Claims Set must be a top-level JSON object");
    const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
    if (maxTokenAge !== undefined) requiredClaims.push("iat");
    if (audience !== undefined) requiredClaims.push("aud");
    if (subject !== undefined) requiredClaims.push("sub");
    if (issuer !== undefined) requiredClaims.push("iss");
    for (const claim of new Set(requiredClaims.reverse())){
        if (!(claim in payload)) throw new (0, _errorsJs.JWTClaimValidationFailed)(`missing required "${claim}" claim`, claim, "missing");
    }
    if (issuer && !(Array.isArray(issuer) ? issuer : [
        issuer
    ]).includes(payload.iss)) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "iss" claim value', "iss", "check_failed");
    if (subject && payload.sub !== subject) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "sub" claim value', "sub", "check_failed");
    if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [
        audience
    ] : audience)) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "aud" claim value', "aud", "check_failed");
    let tolerance;
    switch(typeof options.clockTolerance){
        case "string":
            tolerance = (0, _secsJsDefault.default)(options.clockTolerance);
            break;
        case "number":
            tolerance = options.clockTolerance;
            break;
        case "undefined":
            tolerance = 0;
            break;
        default:
            throw new TypeError("Invalid clockTolerance option type");
    }
    const { currentDate } = options;
    const now = (0, _epochJsDefault.default)(currentDate || new Date());
    if ((payload.iat !== undefined || maxTokenAge) && typeof payload.iat !== "number") throw new (0, _errorsJs.JWTClaimValidationFailed)('"iat" claim must be a number', "iat", "invalid");
    if (payload.nbf !== undefined) {
        if (typeof payload.nbf !== "number") throw new (0, _errorsJs.JWTClaimValidationFailed)('"nbf" claim must be a number', "nbf", "invalid");
        if (payload.nbf > now + tolerance) throw new (0, _errorsJs.JWTClaimValidationFailed)('"nbf" claim timestamp check failed', "nbf", "check_failed");
    }
    if (payload.exp !== undefined) {
        if (typeof payload.exp !== "number") throw new (0, _errorsJs.JWTClaimValidationFailed)('"exp" claim must be a number', "exp", "invalid");
        if (payload.exp <= now - tolerance) throw new (0, _errorsJs.JWTExpired)('"exp" claim timestamp check failed', "exp", "check_failed");
    }
    if (maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof maxTokenAge === "number" ? maxTokenAge : (0, _secsJsDefault.default)(maxTokenAge);
        if (age - tolerance > max) throw new (0, _errorsJs.JWTExpired)('"iat" claim timestamp check failed (too far in the past)', "iat", "check_failed");
        if (age < 0 - tolerance) throw new (0, _errorsJs.JWTClaimValidationFailed)('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
    }
    return payload;
};

},{"../util/errors.js":"2X1qM","./buffer_utils.js":"fv5jM","./epoch.js":"io8UP","./secs.js":"dLWws","./is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"io8UP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (date)=>Math.floor(date.getTime() / 1000);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"dLWws":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
exports.default = (str)=>{
    const matched = REGEX.exec(str);
    if (!matched) throw new TypeError("Invalid time period format");
    const value = parseFloat(matched[1]);
    const unit = matched[2].toLowerCase();
    switch(unit){
        case "sec":
        case "secs":
        case "second":
        case "seconds":
        case "s":
            return Math.round(value);
        case "minute":
        case "minutes":
        case "min":
        case "mins":
        case "m":
            return Math.round(value * minute);
        case "hour":
        case "hours":
        case "hr":
        case "hrs":
        case "h":
            return Math.round(value * hour);
        case "day":
        case "days":
        case "d":
            return Math.round(value * day);
        case "week":
        case "weeks":
        case "w":
            return Math.round(value * week);
        default:
            return Math.round(value * year);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"8yuOH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jwtDecrypt", ()=>jwtDecrypt);
var _decryptJs = require("../jwe/compact/decrypt.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _errorsJs = require("../util/errors.js");
async function jwtDecrypt(jwt, key, options) {
    const decrypted = await (0, _decryptJs.compactDecrypt)(jwt, key, options);
    const payload = (0, _jwtClaimsSetJsDefault.default)(decrypted.protectedHeader, decrypted.plaintext, options);
    const { protectedHeader } = decrypted;
    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "iss" claim header parameter mismatch', "iss", "mismatch");
    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "sub" claim header parameter mismatch', "sub", "mismatch");
    if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "aud" claim header parameter mismatch', "aud", "mismatch");
    const result = {
        payload,
        protectedHeader
    };
    if (typeof key === "function") return {
        ...result,
        key: decrypted.key
    };
    return result;
}

},{"../jwe/compact/decrypt.js":"14cD9","../lib/jwt_claims_set.js":"6kooG","../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bjbZ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompactEncrypt", ()=>CompactEncrypt);
var _encryptJs = require("../flattened/encrypt.js");
class CompactEncrypt {
    constructor(plaintext){
        this._flattened = new (0, _encryptJs.FlattenedEncrypt)(plaintext);
    }
    setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
    }
    setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
    }
    async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [
            jwe.protected,
            jwe.encrypted_key,
            jwe.iv,
            jwe.ciphertext,
            jwe.tag
        ].join(".");
    }
}

},{"../flattened/encrypt.js":"cKGQ7","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"1E3cQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompactSign", ()=>CompactSign);
var _signJs = require("../flattened/sign.js");
class CompactSign {
    constructor(payload){
        this._flattened = new (0, _signJs.FlattenedSign)(payload);
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === undefined) throw new TypeError("use the flattened module for creating JWS with b64: false");
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
    }
}

},{"../flattened/sign.js":"5kkGS","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"5kkGS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FlattenedSign", ()=>FlattenedSign);
var _base64UrlJs = require("../../runtime/base64url.js");
var _signJs = require("../../runtime/sign.js");
var _signJsDefault = parcelHelpers.interopDefault(_signJs);
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _checkKeyTypeJs = require("../../lib/check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
class FlattenedSign {
    constructor(payload){
        if (!(payload instanceof Uint8Array)) throw new TypeError("payload must be an instance of Uint8Array");
        this._payload = payload;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) throw new (0, _errorsJs.JWSInvalid)("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
        if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader)) throw new (0, _errorsJs.JWSInvalid)("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader
        };
        const extensions = (0, _validateCritJsDefault.default)((0, _errorsJs.JWSInvalid), new Map([
            [
                "b64",
                true
            ]
        ]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has("b64")) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== "boolean") throw new (0, _errorsJs.JWSInvalid)('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
        const { alg } = joseHeader;
        if (typeof alg !== "string" || !alg) throw new (0, _errorsJs.JWSInvalid)('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        (0, _checkKeyTypeJsDefault.default)(alg, key, "sign");
        let payload = this._payload;
        if (b64) payload = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(payload));
        let protectedHeader;
        if (this._protectedHeader) protectedHeader = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(JSON.stringify(this._protectedHeader)));
        else protectedHeader = (0, _bufferUtilsJs.encoder).encode("");
        const data = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode("."), payload);
        const signature = await (0, _signJsDefault.default)(alg, key, data);
        const jws = {
            signature: (0, _base64UrlJs.encode)(signature),
            payload: ""
        };
        if (b64) jws.payload = (0, _bufferUtilsJs.decoder).decode(payload);
        if (this._unprotectedHeader) jws.header = this._unprotectedHeader;
        if (this._protectedHeader) jws.protected = (0, _bufferUtilsJs.decoder).decode(protectedHeader);
        return jws;
    }
}

},{"../../runtime/base64url.js":"4jG0b","../../runtime/sign.js":"dIS5U","../../lib/is_disjoint.js":"KLjre","../../util/errors.js":"2X1qM","../../lib/buffer_utils.js":"fv5jM","../../lib/check_key_type.js":"6wUbO","../../lib/validate_crit.js":"dXiTZ","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"dIS5U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _subtleDsaJs = require("./subtle_dsa.js");
var _subtleDsaJsDefault = parcelHelpers.interopDefault(_subtleDsaJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _getSignVerifyKeyJs = require("./get_sign_verify_key.js");
var _getSignVerifyKeyJsDefault = parcelHelpers.interopDefault(_getSignVerifyKeyJs);
const sign = async (alg, key, data)=>{
    const cryptoKey = await (0, _getSignVerifyKeyJsDefault.default)(alg, key, "sign");
    (0, _checkKeyLengthJsDefault.default)(alg, cryptoKey);
    const signature = await (0, _webcryptoJsDefault.default).subtle.sign((0, _subtleDsaJsDefault.default)(alg, cryptoKey.algorithm), cryptoKey, data);
    return new Uint8Array(signature);
};
exports.default = sign;

},{"./subtle_dsa.js":"cHJH9","./webcrypto.js":"i291m","./check_key_length.js":"1mG3B","./get_sign_verify_key.js":"lDW8z","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"cAp2l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GeneralSign", ()=>GeneralSign);
var _signJs = require("../flattened/sign.js");
var _errorsJs = require("../../util/errors.js");
class IndividualSignature {
    constructor(sig, key, options){
        this.parent = sig;
        this.key = key;
        this.options = options;
    }
    setProtectedHeader(protectedHeader) {
        if (this.protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
        this.protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addSignature(...args) {
        return this.parent.addSignature(...args);
    }
    sign(...args) {
        return this.parent.sign(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralSign {
    constructor(payload){
        this._signatures = [];
        this._payload = payload;
    }
    addSignature(key, options) {
        const signature = new IndividualSignature(this, key, options);
        this._signatures.push(signature);
        return signature;
    }
    async sign() {
        if (!this._signatures.length) throw new (0, _errorsJs.JWSInvalid)("at least one signature must be added");
        const jws = {
            signatures: [],
            payload: ""
        };
        for(let i = 0; i < this._signatures.length; i++){
            const signature = this._signatures[i];
            const flattened = new (0, _signJs.FlattenedSign)(this._payload);
            flattened.setProtectedHeader(signature.protectedHeader);
            flattened.setUnprotectedHeader(signature.unprotectedHeader);
            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
            if (i === 0) jws.payload = payload;
            else if (jws.payload !== payload) throw new (0, _errorsJs.JWSInvalid)("inconsistent use of JWS Unencoded Payload (RFC7797)");
            jws.signatures.push(rest);
        }
        return jws;
    }
}

},{"../flattened/sign.js":"5kkGS","../../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"aB6hw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignJWT", ()=>SignJWT);
var _signJs = require("../jws/compact/sign.js");
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _produceJs = require("./produce.js");
class SignJWT extends (0, _produceJs.ProduceJWT) {
    setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
    }
    async sign(key, options) {
        var _a;
        const sig = new (0, _signJs.CompactSign)((0, _bufferUtilsJs.encoder).encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) throw new (0, _errorsJs.JWTInvalid)("JWTs MUST NOT use unencoded payload");
        return sig.sign(key, options);
    }
}

},{"../jws/compact/sign.js":"1E3cQ","../util/errors.js":"2X1qM","../lib/buffer_utils.js":"fv5jM","./produce.js":"jBlqC","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"jBlqC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProduceJWT", ()=>ProduceJWT);
var _epochJs = require("../lib/epoch.js");
var _epochJsDefault = parcelHelpers.interopDefault(_epochJs);
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _secsJs = require("../lib/secs.js");
var _secsJsDefault = parcelHelpers.interopDefault(_secsJs);
class ProduceJWT {
    constructor(payload){
        if (!(0, _isObjectJsDefault.default)(payload)) throw new TypeError("JWT Claims Set MUST be an object");
        this._payload = payload;
    }
    setIssuer(issuer) {
        this._payload = {
            ...this._payload,
            iss: issuer
        };
        return this;
    }
    setSubject(subject) {
        this._payload = {
            ...this._payload,
            sub: subject
        };
        return this;
    }
    setAudience(audience) {
        this._payload = {
            ...this._payload,
            aud: audience
        };
        return this;
    }
    setJti(jwtId) {
        this._payload = {
            ...this._payload,
            jti: jwtId
        };
        return this;
    }
    setNotBefore(input) {
        if (typeof input === "number") this._payload = {
            ...this._payload,
            nbf: input
        };
        else this._payload = {
            ...this._payload,
            nbf: (0, _epochJsDefault.default)(new Date()) + (0, _secsJsDefault.default)(input)
        };
        return this;
    }
    setExpirationTime(input) {
        if (typeof input === "number") this._payload = {
            ...this._payload,
            exp: input
        };
        else this._payload = {
            ...this._payload,
            exp: (0, _epochJsDefault.default)(new Date()) + (0, _secsJsDefault.default)(input)
        };
        return this;
    }
    setIssuedAt(input) {
        if (typeof input === "undefined") this._payload = {
            ...this._payload,
            iat: (0, _epochJsDefault.default)(new Date())
        };
        else this._payload = {
            ...this._payload,
            iat: input
        };
        return this;
    }
}

},{"../lib/epoch.js":"io8UP","../lib/is_object.js":"clAVD","../lib/secs.js":"dLWws","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"h7xrx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EncryptJWT", ()=>EncryptJWT);
var _encryptJs = require("../jwe/compact/encrypt.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _produceJs = require("./produce.js");
class EncryptJWT extends (0, _produceJs.ProduceJWT) {
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
        this._protectedHeader = protectedHeader;
        return this;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) throw new TypeError("setKeyManagementParameters can only be called once");
        this._keyManagementParameters = parameters;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) throw new TypeError("setContentEncryptionKey can only be called once");
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) throw new TypeError("setInitializationVector can only be called once");
        this._iv = iv;
        return this;
    }
    replicateIssuerAsHeader() {
        this._replicateIssuerAsHeader = true;
        return this;
    }
    replicateSubjectAsHeader() {
        this._replicateSubjectAsHeader = true;
        return this;
    }
    replicateAudienceAsHeader() {
        this._replicateAudienceAsHeader = true;
        return this;
    }
    async encrypt(key, options) {
        const enc = new (0, _encryptJs.CompactEncrypt)((0, _bufferUtilsJs.encoder).encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            iss: this._payload.iss
        };
        if (this._replicateSubjectAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            sub: this._payload.sub
        };
        if (this._replicateAudienceAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            aud: this._payload.aud
        };
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) enc.setInitializationVector(this._iv);
        if (this._cek) enc.setContentEncryptionKey(this._cek);
        if (this._keyManagementParameters) enc.setKeyManagementParameters(this._keyManagementParameters);
        return enc.encrypt(key, options);
    }
}

},{"../jwe/compact/encrypt.js":"bjbZ8","../lib/buffer_utils.js":"fv5jM","./produce.js":"jBlqC","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lhTW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateJwkThumbprint", ()=>calculateJwkThumbprint);
parcelHelpers.export(exports, "calculateJwkThumbprintUri", ()=>calculateJwkThumbprintUri);
var _digestJs = require("../runtime/digest.js");
var _digestJsDefault = parcelHelpers.interopDefault(_digestJs);
var _base64UrlJs = require("../runtime/base64url.js");
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
const check = (value, description)=>{
    if (typeof value !== "string" || !value) throw new (0, _errorsJs.JWKInvalid)(`${description} missing or invalid`);
};
async function calculateJwkThumbprint(jwk, digestAlgorithm) {
    if (!(0, _isObjectJsDefault.default)(jwk)) throw new TypeError("JWK must be an object");
    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = "sha256";
    if (digestAlgorithm !== "sha256" && digestAlgorithm !== "sha384" && digestAlgorithm !== "sha512") throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
    let components;
    switch(jwk.kty){
        case "EC":
            check(jwk.crv, '"crv" (Curve) Parameter');
            check(jwk.x, '"x" (X Coordinate) Parameter');
            check(jwk.y, '"y" (Y Coordinate) Parameter');
            components = {
                crv: jwk.crv,
                kty: jwk.kty,
                x: jwk.x,
                y: jwk.y
            };
            break;
        case "OKP":
            check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
            check(jwk.x, '"x" (Public Key) Parameter');
            components = {
                crv: jwk.crv,
                kty: jwk.kty,
                x: jwk.x
            };
            break;
        case "RSA":
            check(jwk.e, '"e" (Exponent) Parameter');
            check(jwk.n, '"n" (Modulus) Parameter');
            components = {
                e: jwk.e,
                kty: jwk.kty,
                n: jwk.n
            };
            break;
        case "oct":
            check(jwk.k, '"k" (Key Value) Parameter');
            components = {
                k: jwk.k,
                kty: jwk.kty
            };
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('"kty" (Key Type) Parameter missing or unsupported');
    }
    const data = (0, _bufferUtilsJs.encoder).encode(JSON.stringify(components));
    return (0, _base64UrlJs.encode)(await (0, _digestJsDefault.default)(digestAlgorithm, data));
}
async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = "sha256";
    const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
    return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
}

},{"../runtime/digest.js":"4tSkm","../runtime/base64url.js":"4jG0b","../util/errors.js":"2X1qM","../lib/buffer_utils.js":"fv5jM","../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bitco":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EmbeddedJWK", ()=>EmbeddedJWK);
var _importJs = require("../key/import.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _errorsJs = require("../util/errors.js");
async function EmbeddedJWK(protectedHeader, token) {
    const joseHeader = {
        ...protectedHeader,
        ...token === null || token === void 0 ? void 0 : token.header
    };
    if (!(0, _isObjectJsDefault.default)(joseHeader.jwk)) throw new (0, _errorsJs.JWSInvalid)('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
    const key = await (0, _importJs.importJWK)({
        ...joseHeader.jwk,
        ext: true
    }, joseHeader.alg, true);
    if (key instanceof Uint8Array || key.type !== "public") throw new (0, _errorsJs.JWSInvalid)('"jwk" (JSON Web Key) Header Parameter must be a public key');
    return key;
}

},{"../key/import.js":"bZstH","../lib/is_object.js":"clAVD","../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"aS9cR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isJWKSLike", ()=>isJWKSLike);
parcelHelpers.export(exports, "LocalJWKSet", ()=>LocalJWKSet);
parcelHelpers.export(exports, "createLocalJWKSet", ()=>createLocalJWKSet);
var _importJs = require("../key/import.js");
var _errorsJs = require("../util/errors.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function getKtyFromAlg(alg) {
    switch(typeof alg === "string" && alg.slice(0, 2)){
        case "RS":
        case "PS":
            return "RSA";
        case "ES":
            return "EC";
        case "Ed":
            return "OKP";
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported "alg" value for a JSON Web Key Set');
    }
}
function isJWKSLike(jwks) {
    return jwks && typeof jwks === "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}
function isJWKLike(key) {
    return (0, _isObjectJsDefault.default)(key);
}
function clone(obj) {
    if (typeof structuredClone === "function") return structuredClone(obj);
    return JSON.parse(JSON.stringify(obj));
}
class LocalJWKSet {
    constructor(jwks){
        this._cached = new WeakMap();
        if (!isJWKSLike(jwks)) throw new (0, _errorsJs.JWKSInvalid)("JSON Web Key Set malformed");
        this._jwks = clone(jwks);
    }
    async getKey(protectedHeader, token) {
        const { alg, kid } = {
            ...protectedHeader,
            ...token === null || token === void 0 ? void 0 : token.header
        };
        const kty = getKtyFromAlg(alg);
        const candidates = this._jwks.keys.filter((jwk)=>{
            let candidate = kty === jwk.kty;
            if (candidate && typeof kid === "string") candidate = kid === jwk.kid;
            if (candidate && typeof jwk.alg === "string") candidate = alg === jwk.alg;
            if (candidate && typeof jwk.use === "string") candidate = jwk.use === "sig";
            if (candidate && Array.isArray(jwk.key_ops)) candidate = jwk.key_ops.includes("verify");
            if (candidate && alg === "EdDSA") candidate = jwk.crv === "Ed25519" || jwk.crv === "Ed448";
            if (candidate) switch(alg){
                case "ES256":
                    candidate = jwk.crv === "P-256";
                    break;
                case "ES256K":
                    candidate = jwk.crv === "secp256k1";
                    break;
                case "ES384":
                    candidate = jwk.crv === "P-384";
                    break;
                case "ES512":
                    candidate = jwk.crv === "P-521";
                    break;
            }
            return candidate;
        });
        const { 0: jwk, length } = candidates;
        if (length === 0) throw new (0, _errorsJs.JWKSNoMatchingKey)();
        else if (length !== 1) {
            const error = new (0, _errorsJs.JWKSMultipleMatchingKeys)();
            const { _cached } = this;
            error[Symbol.asyncIterator] = async function*() {
                for (const jwk of candidates)try {
                    yield await importWithAlgCache(_cached, jwk, alg);
                } catch (_a) {
                    continue;
                }
            };
            throw error;
        }
        return importWithAlgCache(this._cached, jwk, alg);
    }
}
async function importWithAlgCache(cache, jwk, alg) {
    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
    if (cached[alg] === undefined) {
        const key = await (0, _importJs.importJWK)({
            ...jwk,
            ext: true
        }, alg);
        if (key instanceof Uint8Array || key.type !== "public") throw new (0, _errorsJs.JWKSInvalid)("JSON Web Key Set members must be public keys");
        cached[alg] = key;
    }
    return cached[alg];
}
function createLocalJWKSet(jwks) {
    const set = new LocalJWKSet(jwks);
    return async function(protectedHeader, token) {
        return set.getKey(protectedHeader, token);
    };
}

},{"../key/import.js":"bZstH","../util/errors.js":"2X1qM","../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"jh6tj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRemoteJWKSet", ()=>createRemoteJWKSet);
var _fetchJwksJs = require("../runtime/fetch_jwks.js");
var _fetchJwksJsDefault = parcelHelpers.interopDefault(_fetchJwksJs);
var _errorsJs = require("../util/errors.js");
var _localJs = require("./local.js");
function isCloudflareWorkers() {
    return typeof WebSocketPair !== "undefined" || typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers" || typeof EdgeRuntime !== "undefined" && EdgeRuntime === "vercel";
}
class RemoteJWKSet extends (0, _localJs.LocalJWKSet) {
    constructor(url, options){
        super({
            keys: []
        });
        this._jwks = undefined;
        if (!(url instanceof URL)) throw new TypeError("url must be an instance of URL");
        this._url = new URL(url.href);
        this._options = {
            agent: options === null || options === void 0 ? void 0 : options.agent,
            headers: options === null || options === void 0 ? void 0 : options.headers
        };
        this._timeoutDuration = typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === "number" ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;
        this._cooldownDuration = typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === "number" ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;
        this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === "number" ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;
    }
    coolingDown() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
    }
    fresh() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
    }
    async getKey(protectedHeader, token) {
        if (!this._jwks || !this.fresh()) await this.reload();
        try {
            return await super.getKey(protectedHeader, token);
        } catch (err) {
            if (err instanceof (0, _errorsJs.JWKSNoMatchingKey)) {
                if (this.coolingDown() === false) {
                    await this.reload();
                    return super.getKey(protectedHeader, token);
                }
            }
            throw err;
        }
    }
    async reload() {
        if (this._pendingFetch && isCloudflareWorkers()) this._pendingFetch = undefined;
        this._pendingFetch || (this._pendingFetch = (0, _fetchJwksJsDefault.default)(this._url, this._timeoutDuration, this._options).then((json)=>{
            if (!(0, _localJs.isJWKSLike)(json)) throw new (0, _errorsJs.JWKSInvalid)("JSON Web Key Set malformed");
            this._jwks = {
                keys: json.keys
            };
            this._jwksTimestamp = Date.now();
            this._pendingFetch = undefined;
        }).catch((err)=>{
            this._pendingFetch = undefined;
            throw err;
        }));
        await this._pendingFetch;
    }
}
function createRemoteJWKSet(url, options) {
    const set = new RemoteJWKSet(url, options);
    return async function(protectedHeader, token) {
        return set.getKey(protectedHeader, token);
    };
}

},{"../runtime/fetch_jwks.js":"hukHc","../util/errors.js":"2X1qM","./local.js":"aS9cR","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"hukHc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
const fetchJwks = async (url, timeout, options)=>{
    let controller;
    let id;
    let timedOut = false;
    if (typeof AbortController === "function") {
        controller = new AbortController();
        id = setTimeout(()=>{
            timedOut = true;
            controller.abort();
        }, timeout);
    }
    const response = await fetch(url.href, {
        signal: controller ? controller.signal : undefined,
        redirect: "manual",
        headers: options.headers
    }).catch((err)=>{
        if (timedOut) throw new (0, _errorsJs.JWKSTimeout)();
        throw err;
    });
    if (id !== undefined) clearTimeout(id);
    if (response.status !== 200) throw new (0, _errorsJs.JOSEError)("Expected 200 OK from the JSON Web Key Set HTTP response");
    try {
        return await response.json();
    } catch (_a) {
        throw new (0, _errorsJs.JOSEError)("Failed to parse the JSON Web Key Set HTTP response as JSON");
    }
};
exports.default = fetchJwks;

},{"../util/errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"72mr5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnsecuredJWT", ()=>UnsecuredJWT);
var _base64UrlJs = require("../runtime/base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _errorsJs = require("../util/errors.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _produceJs = require("./produce.js");
class UnsecuredJWT extends (0, _produceJs.ProduceJWT) {
    encode() {
        const header = _base64UrlJs.encode(JSON.stringify({
            alg: "none"
        }));
        const payload = _base64UrlJs.encode(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
    }
    static decode(jwt, options) {
        if (typeof jwt !== "string") throw new (0, _errorsJs.JWTInvalid)("Unsecured JWT must be a string");
        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split(".");
        if (length !== 3 || signature !== "") throw new (0, _errorsJs.JWTInvalid)("Invalid Unsecured JWT");
        let header;
        try {
            header = JSON.parse((0, _bufferUtilsJs.decoder).decode(_base64UrlJs.decode(encodedHeader)));
            if (header.alg !== "none") throw new Error();
        } catch (_a) {
            throw new (0, _errorsJs.JWTInvalid)("Invalid Unsecured JWT");
        }
        const payload = (0, _jwtClaimsSetJsDefault.default)(header, _base64UrlJs.decode(encodedPayload), options);
        return {
            payload,
            header
        };
    }
}

},{"../runtime/base64url.js":"4jG0b","../lib/buffer_utils.js":"fv5jM","../util/errors.js":"2X1qM","../lib/jwt_claims_set.js":"6kooG","./produce.js":"jBlqC","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"ue0eA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeProtectedHeader", ()=>decodeProtectedHeader);
var _base64UrlJs = require("./base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === "string") {
        const parts = token.split(".");
        if (parts.length === 3 || parts.length === 5) [protectedB64u] = parts;
    } else if (typeof token === "object" && token) {
        if ("protected" in token) protectedB64u = token.protected;
        else throw new TypeError("Token does not contain a Protected Header");
    }
    try {
        if (typeof protectedB64u !== "string" || !protectedB64u) throw new Error();
        const result = JSON.parse((0, _bufferUtilsJs.decoder).decode((0, _base64UrlJs.decode)(protectedB64u)));
        if (!(0, _isObjectJsDefault.default)(result)) throw new Error();
        return result;
    } catch (_a) {
        throw new TypeError("Invalid Token or Protected Header formatting");
    }
}

},{"./base64url.js":"5RLxa","../lib/buffer_utils.js":"fv5jM","../lib/is_object.js":"clAVD","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"5RLxa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decode", ()=>decode);
var _base64UrlJs = require("../runtime/base64url.js");
const encode = _base64UrlJs.encode;
const decode = _base64UrlJs.decode;

},{"../runtime/base64url.js":"4jG0b","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"eAG6c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeJwt", ()=>decodeJwt);
var _base64UrlJs = require("./base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _errorsJs = require("./errors.js");
function decodeJwt(jwt) {
    if (typeof jwt !== "string") throw new (0, _errorsJs.JWTInvalid)("JWTs must use Compact JWS serialization, JWT must be a string");
    const { 1: payload, length } = jwt.split(".");
    if (length === 5) throw new (0, _errorsJs.JWTInvalid)("Only JWTs using Compact JWS serialization can be decoded");
    if (length !== 3) throw new (0, _errorsJs.JWTInvalid)("Invalid JWT");
    if (!payload) throw new (0, _errorsJs.JWTInvalid)("JWTs must contain a payload");
    let decoded;
    try {
        decoded = (0, _base64UrlJs.decode)(payload);
    } catch (_a) {
        throw new (0, _errorsJs.JWTInvalid)("Failed to base64url decode the payload");
    }
    let result;
    try {
        result = JSON.parse((0, _bufferUtilsJs.decoder).decode(decoded));
    } catch (_b) {
        throw new (0, _errorsJs.JWTInvalid)("Failed to parse the decoded payload as JSON");
    }
    if (!(0, _isObjectJsDefault.default)(result)) throw new (0, _errorsJs.JWTInvalid)("Invalid JWT Claims Set");
    return result;
}

},{"./base64url.js":"5RLxa","../lib/buffer_utils.js":"fv5jM","../lib/is_object.js":"clAVD","./errors.js":"2X1qM","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"gj3x6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateKeyPair", ()=>generateKeyPair);
var _generateJs = require("../runtime/generate.js");
async function generateKeyPair(alg, options) {
    return (0, _generateJs.generateKeyPair)(alg, options);
}

},{"../runtime/generate.js":"1KKtG","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"1KKtG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateSecret", ()=>generateSecret);
parcelHelpers.export(exports, "generateKeyPair", ()=>generateKeyPair);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
async function generateSecret(alg, options) {
    var _a;
    let length;
    let algorithm;
    let keyUsages;
    switch(alg){
        case "HS256":
        case "HS384":
        case "HS512":
            length = parseInt(alg.slice(-3), 10);
            algorithm = {
                name: "HMAC",
                hash: `SHA-${length}`,
                length
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
            length = parseInt(alg.slice(-3), 10);
            return (0, _randomJsDefault.default)(new Uint8Array(length >> 3));
        case "A128KW":
        case "A192KW":
        case "A256KW":
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = {
                name: "AES-KW",
                length
            };
            keyUsages = [
                "wrapKey",
                "unwrapKey"
            ];
            break;
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = {
                name: "AES-GCM",
                length
            };
            keyUsages = [
                "encrypt",
                "decrypt"
            ];
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return (0, _webcryptoJsDefault.default).subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);
}
function getModulusLengthOption(options) {
    var _a;
    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;
    if (typeof modulusLength !== "number" || modulusLength < 2048) throw new (0, _errorsJs.JOSENotSupported)("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
    return modulusLength;
}
async function generateKeyPair(alg, options) {
    var _a, _b, _c;
    let algorithm;
    let keyUsages;
    switch(alg){
        case "PS256":
        case "PS384":
        case "PS512":
            algorithm = {
                name: "RSA-PSS",
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "RS256":
        case "RS384":
        case "RS512":
            algorithm = {
                name: "RSASSA-PKCS1-v1_5",
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
            algorithm = {
                name: "RSA-OAEP",
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                "decrypt",
                "unwrapKey",
                "encrypt",
                "wrapKey"
            ];
            break;
        case "ES256":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-256"
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "ES384":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-384"
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "ES512":
            algorithm = {
                name: "ECDSA",
                namedCurve: "P-521"
            };
            keyUsages = [
                "sign",
                "verify"
            ];
            break;
        case "EdDSA":
            keyUsages = [
                "sign",
                "verify"
            ];
            const crv = (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : "Ed25519";
            switch(crv){
                case "Ed25519":
                case "Ed448":
                    algorithm = {
                        name: crv
                    };
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)("Invalid or unsupported crv option provided");
            }
            break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
            {
                keyUsages = [
                    "deriveKey",
                    "deriveBits"
                ];
                const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : "P-256";
                switch(crv){
                    case "P-256":
                    case "P-384":
                    case "P-521":
                        algorithm = {
                            name: "ECDH",
                            namedCurve: crv
                        };
                        break;
                    case "X25519":
                    case "X448":
                        algorithm = {
                            name: crv
                        };
                        break;
                    default:
                        throw new (0, _errorsJs.JOSENotSupported)("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
                }
                break;
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return (0, _webcryptoJsDefault.default).subtle.generateKey(algorithm, (_c = options === null || options === void 0 ? void 0 : options.extractable) !== null && _c !== void 0 ? _c : false, keyUsages);
}

},{"./webcrypto.js":"i291m","../util/errors.js":"2X1qM","./random.js":"lgsam","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"eqsi9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateSecret", ()=>generateSecret);
var _generateJs = require("../runtime/generate.js");
async function generateSecret(alg, options) {
    return (0, _generateJs.generateSecret)(alg, options);
}

},{"../runtime/generate.js":"1KKtG","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"aBiZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("../runtime/runtime.js");
var _runtimeJsDefault = parcelHelpers.interopDefault(_runtimeJs);
exports.default = (0, _runtimeJsDefault.default);

},{"../runtime/runtime.js":"ekifg","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"ekifg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "WebCryptoAPI";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"j4KJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v1", ()=>(0, _v1JsDefault.default));
parcelHelpers.export(exports, "v3", ()=>(0, _v3JsDefault.default));
parcelHelpers.export(exports, "v4", ()=>(0, _v4JsDefault.default));
parcelHelpers.export(exports, "v5", ()=>(0, _v5JsDefault.default));
parcelHelpers.export(exports, "NIL", ()=>(0, _nilJsDefault.default));
parcelHelpers.export(exports, "version", ()=>(0, _versionJsDefault.default));
parcelHelpers.export(exports, "validate", ()=>(0, _validateJsDefault.default));
parcelHelpers.export(exports, "stringify", ()=>(0, _stringifyJsDefault.default));
parcelHelpers.export(exports, "parse", ()=>(0, _parseJsDefault.default));
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v3Js = require("./v3.js");
var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
var _v4Js = require("./v4.js");
var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
var _v5Js = require("./v5.js");
var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
var _nilJs = require("./nil.js");
var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
var _versionJs = require("./version.js");
var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);

},{"./v1.js":"9qfh9","./v3.js":"3RlI2","./v4.js":"8zJtu","./v5.js":"i3cfs","./nil.js":"kcLFq","./version.js":"gvRcF","./validate.js":"eHPgI","./stringify.js":"5Y9F1","./parse.js":"6aVVs","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"9qfh9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js"); // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;
let _clockseq; // Previous uuid creation time
let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || (0, _rngJsDefault.default))();
        if (node == null) // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
        ];
        if (clockseq == null) // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) clockseq = clockseq + 1 & 0x3fff;
     // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) nsecs = 0;
     // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000; // `time_low`
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff; // `time_mid`
    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff; // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`
    b[i++] = clockseq & 0xff; // `node`
    for(let n = 0; n < 6; ++n)b[i + n] = node[n];
    return buf || (0, _stringifyJs.unsafeStringify)(b);
}
exports.default = v1;

},{"./rng.js":"2psyE","./stringify.js":"5Y9F1","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"2psyE":[function(require,module,exports) {
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rng);
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return getRandomValues(rnds8);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"5Y9F1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unsafeStringify", ()=>unsafeStringify);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ const byteToHex = [];
for(let i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).slice(1));
function unsafeStringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
exports.default = stringify;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"eHPgI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regexJs = require("./regex.js");
var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
function validate(uuid) {
    return typeof uuid === "string" && (0, _regexJsDefault.default).test(uuid);
}
exports.default = validate;

},{"./regex.js":"bUa5g","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"bUa5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"3RlI2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _v35Js = require("./v35.js");
var _v35JsDefault = parcelHelpers.interopDefault(_v35Js);
var _md5Js = require("./md5.js");
var _md5JsDefault = parcelHelpers.interopDefault(_md5Js);
const v3 = (0, _v35JsDefault.default)("v3", 0x30, (0, _md5JsDefault.default));
exports.default = v3;

},{"./v35.js":"f7cVj","./md5.js":"k0SFu","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"f7cVj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DNS", ()=>DNS);
parcelHelpers.export(exports, "URL", ()=>URL);
parcelHelpers.export(exports, "default", ()=>v35);
var _stringifyJs = require("./stringify.js");
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
function stringToBytes(str) {
    str = unescape(encodeURIComponent(str)); // UTF8 escape
    const bytes = [];
    for(let i = 0; i < str.length; ++i)bytes.push(str.charCodeAt(i));
    return bytes;
}
const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
const URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === "string") value = stringToBytes(value);
        if (typeof namespace === "string") namespace = (0, _parseJsDefault.default)(namespace);
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
         // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;
        if (buf) {
            offset = offset || 0;
            for(let i = 0; i < 16; ++i)buf[offset + i] = bytes[i];
            return buf;
        }
        return (0, _stringifyJs.unsafeStringify)(bytes);
    } // Function#name is not settable on some platforms (#270)
    try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
    } catch (err) {} // For CommonJS default export support
    generateUUID.DNS = DNS;
    generateUUID.URL = URL;
    return generateUUID;
}

},{"./stringify.js":"5Y9F1","./parse.js":"6aVVs","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"6aVVs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
function parse(uuid) {
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError("Invalid UUID");
    let v;
    const arr = new Uint8Array(16); // Parse ########-....-....-....-............
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 0xff;
    arr[2] = v >>> 8 & 0xff;
    arr[3] = v & 0xff; // Parse ........-####-....-....-............
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 0xff; // Parse ........-....-####-....-............
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 0xff; // Parse ........-....-....-####-............
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 0xff; // Parse ........-....-....-....-############
    // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
    arr[11] = v / 0x100000000 & 0xff;
    arr[12] = v >>> 24 & 0xff;
    arr[13] = v >>> 16 & 0xff;
    arr[14] = v >>> 8 & 0xff;
    arr[15] = v & 0xff;
    return arr;
}
exports.default = parse;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"k0SFu":[function(require,module,exports) {
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function md5(bytes) {
    if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape
        bytes = new Uint8Array(msg.length);
        for(let i = 0; i < msg.length; ++i)bytes[i] = msg.charCodeAt(i);
    }
    return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */ function md5ToHexEncodedArray(input) {
    const output = [];
    const length32 = input.length * 32;
    const hexTab = "0123456789abcdef";
    for(let i = 0; i < length32; i += 8){
        const x = input[i >> 5] >>> i % 32 & 0xff;
        const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
        output.push(hex);
    }
    return output;
}
/**
 * Calculate output length with padding and bit length
 */ function getOutputLength(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */ function wordsToMd5(x, len) {
    /* append padding */ x[len >> 5] |= 0x80 << len % 32;
    x[getOutputLength(len) - 1] = len;
    let a = 1732584193;
    let b = -271733879;
    let c = -1732584194;
    let d = 271733878;
    for(let i = 0; i < x.length; i += 16){
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
    }
    return [
        a,
        b,
        c,
        d
    ];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */ function bytesToWords(input) {
    if (input.length === 0) return [];
    const length8 = input.length * 8;
    const output = new Uint32Array(getOutputLength(length8));
    for(let i = 0; i < length8; i += 8)output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
    return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */ function safeAdd(x, y) {
    const lsw = (x & 0xffff) + (y & 0xffff);
    const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */ function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */ function md5cmn(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
    return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
    return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
exports.default = md5;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"8zJtu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeJs = require("./native.js");
var _nativeJsDefault = parcelHelpers.interopDefault(_nativeJs);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
function v4(options, buf, offset) {
    if ((0, _nativeJsDefault.default).randomUUID && !buf && !options) return (0, _nativeJsDefault.default).randomUUID();
    options = options || {};
    const rnds = options.random || (options.rng || (0, _rngJsDefault.default))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, _stringifyJs.unsafeStringify)(rnds);
}
exports.default = v4;

},{"./native.js":"lYayS","./rng.js":"2psyE","./stringify.js":"5Y9F1","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"lYayS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
exports.default = {
    randomUUID
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"i3cfs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _v35Js = require("./v35.js");
var _v35JsDefault = parcelHelpers.interopDefault(_v35Js);
var _sha1Js = require("./sha1.js");
var _sha1JsDefault = parcelHelpers.interopDefault(_sha1Js);
const v5 = (0, _v35JsDefault.default)("v5", 0x50, (0, _sha1JsDefault.default));
exports.default = v5;

},{"./v35.js":"f7cVj","./sha1.js":"BVVut","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"BVVut":[function(require,module,exports) {
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function f(s, x, y, z) {
    switch(s){
        case 0:
            return x & y ^ ~x & z;
        case 1:
            return x ^ y ^ z;
        case 2:
            return x & y ^ x & z ^ y & z;
        case 3:
            return x ^ y ^ z;
    }
}
function ROTL(x, n) {
    return x << n | x >>> 32 - n;
}
function sha1(bytes) {
    const K = [
        0x5a827999,
        0x6ed9eba1,
        0x8f1bbcdc,
        0xca62c1d6
    ];
    const H = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape
        bytes = [];
        for(let i = 0; i < msg.length; ++i)bytes.push(msg.charCodeAt(i));
    } else if (!Array.isArray(bytes)) // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
    bytes.push(0x80);
    const l = bytes.length / 4 + 2;
    const N = Math.ceil(l / 16);
    const M = new Array(N);
    for(let i = 0; i < N; ++i){
        const arr = new Uint32Array(16);
        for(let j = 0; j < 16; ++j)arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        M[i] = arr;
    }
    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
    for(let i = 0; i < N; ++i){
        const W = new Uint32Array(80);
        for(let t = 0; t < 16; ++t)W[t] = M[i][t];
        for(let t = 16; t < 80; ++t)W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for(let t = 0; t < 80; ++t){
            const s = Math.floor(t / 20);
            const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
            e = d;
            d = c;
            c = ROTL(b, 30) >>> 0;
            b = a;
            a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
    }
    return [
        H[0] >> 24 & 0xff,
        H[0] >> 16 & 0xff,
        H[0] >> 8 & 0xff,
        H[0] & 0xff,
        H[1] >> 24 & 0xff,
        H[1] >> 16 & 0xff,
        H[1] >> 8 & 0xff,
        H[1] & 0xff,
        H[2] >> 24 & 0xff,
        H[2] >> 16 & 0xff,
        H[2] >> 8 & 0xff,
        H[2] & 0xff,
        H[3] >> 24 & 0xff,
        H[3] >> 16 & 0xff,
        H[3] >> 8 & 0xff,
        H[3] & 0xff,
        H[4] >> 24 & 0xff,
        H[4] >> 16 & 0xff,
        H[4] >> 8 & 0xff,
        H[4] & 0xff
    ];
}
exports.default = sha1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"kcLFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = "00000000-0000-0000-0000-000000000000";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"gvRcF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
function version(uuid) {
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError("Invalid UUID");
    return parseInt(uuid.slice(14, 15), 16);
}
exports.default = version;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"kwSdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CordovaIFrameNavigator", ()=>(0, _oidcClient.CordovaIFrameNavigator));
parcelHelpers.export(exports, "CordovaPopupNavigator", ()=>(0, _oidcClient.CordovaPopupNavigator));
parcelHelpers.export(exports, "InMemoryWebStorage", ()=>(0, _oidcClient.InMemoryWebStorage));
parcelHelpers.export(exports, "Log", ()=>(0, _oidcClient.Log));
parcelHelpers.export(exports, "OidcClient", ()=>(0, _oidcClient.OidcClient));
parcelHelpers.export(exports, "SessionMonitor", ()=>(0, _oidcClient.SessionMonitor));
parcelHelpers.export(exports, "User", ()=>(0, _oidcClient.User));
parcelHelpers.export(exports, "UserManager", ()=>(0, _oidcClient.UserManager));
parcelHelpers.export(exports, "Version", ()=>(0, _oidcClient.Version));
parcelHelpers.export(exports, "WebStorageStateStore", ()=>(0, _oidcClient.WebStorageStateStore));
parcelHelpers.export(exports, "clearOidcPersistentStorage", ()=>clearOidcPersistentStorage);
parcelHelpers.export(exports, "getBearerToken", ()=>getBearerToken);
parcelHelpers.export(exports, "getDpopToken", ()=>getDpopToken);
parcelHelpers.export(exports, "refresh", ()=>refresh);
parcelHelpers.export(exports, "registerClient", ()=>registerClient);
parcelHelpers.export(exports, "removeOidcQueryParam", ()=>removeOidcQueryParam);
var _oidcClient = require("@inrupt/oidc-client");
var _solidClientAuthnCore = require("@inrupt/solid-client-authn-core");
var _universalFetch = require("@inrupt/universal-fetch");
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function processErrorResponse(// The type is any here because the object is parsed from a JSON response
// eslint-disable-next-line @typescript-eslint/no-explicit-any
responseBody, options) {
    var _a, _b, _c, _d;
    // The following errors are defined by the spec, and allow providing some context.
    // See https://tools.ietf.org/html/rfc7591#section-3.2.2 for more information
    if (responseBody.error === "invalid_redirect_uri") throw new Error(`Dynamic client registration failed: the provided redirect uri [${(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()}] is invalid - ${(_b = responseBody.error_description) !== null && _b !== void 0 ? _b : ""}`);
    if (responseBody.error === "invalid_client_metadata") throw new Error(`Dynamic client registration failed: the provided client metadata ${JSON.stringify(options)} is invalid - ${(_c = responseBody.error_description) !== null && _c !== void 0 ? _c : ""}`);
    // We currently don't support software statements, so no related error should happen.
    // If an error outside of the spec happens, no additional context can be provided
    throw new Error(`Dynamic client registration failed: ${responseBody.error} - ${(_d = responseBody.error_description) !== null && _d !== void 0 ? _d : ""}`);
}
function validateRegistrationResponse(// The type is any here because the object is parsed from a JSON response
// eslint-disable-next-line @typescript-eslint/no-explicit-any
responseBody, options) {
    if (responseBody.client_id === undefined) throw new Error(`Dynamic client registration failed: no client_id has been found on ${JSON.stringify(responseBody)}`);
    if (options.redirectUrl && (responseBody.redirect_uris === undefined || responseBody.redirect_uris[0] !== options.redirectUrl.toString())) throw new Error(`Dynamic client registration failed: the returned redirect URIs ${JSON.stringify(responseBody.redirect_uris)} don't match the provided ${JSON.stringify([
        options.redirectUrl.toString()
    ])}`);
}
async function registerClient(options, issuerConfig) {
    var _a;
    if (!issuerConfig.registrationEndpoint) throw new Error("Dynamic Registration could not be completed because the issuer has no registration endpoint.");
    if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
    const signingAlg = (0, _solidClientAuthnCore.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, (0, _solidClientAuthnCore.PREFERRED_SIGNING_ALG));
    const config = {
        /* eslint-disable camelcase */ client_name: options.clientName,
        application_type: "web",
        redirect_uris: [
            (_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()
        ],
        subject_type: "public",
        token_endpoint_auth_method: "client_secret_basic",
        id_token_signed_response_alg: signingAlg,
        grant_types: [
            "authorization_code",
            "refresh_token"
        ]
    };
    const headers = {
        "Content-Type": "application/json"
    };
    const registerResponse = await fetch(issuerConfig.registrationEndpoint.toString(), {
        method: "POST",
        headers,
        body: JSON.stringify(config)
    });
    if (registerResponse.ok) {
        const responseBody = await registerResponse.json();
        validateRegistrationResponse(responseBody, options);
        return {
            clientId: responseBody.client_id,
            clientSecret: responseBody.client_secret,
            idTokenSignedResponseAlg: responseBody.id_token_signed_response_alg,
            clientType: "dynamic"
        };
    }
    if (registerResponse.status === 400) processErrorResponse(await registerResponse.json(), options);
    throw new Error(`Dynamic client registration failed: the server returned ${registerResponse.status} ${registerResponse.statusText} - ${await registerResponse.text()}`);
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Identifiers in camelcase are mandated by the OAuth spec.
/* eslint-disable camelcase */ function hasError(value) {
    return value.error !== undefined && typeof value.error === "string";
}
function hasErrorDescription(value) {
    return value.error_description !== undefined && typeof value.error_description === "string";
}
function hasErrorUri(value) {
    return value.error_uri !== undefined && typeof value.error_uri === "string";
}
function hasAccessToken(value) {
    return value.access_token !== undefined && typeof value.access_token === "string";
}
function hasIdToken(value) {
    return value.id_token !== undefined && typeof value.id_token === "string";
}
function hasRefreshToken(value) {
    return value.refresh_token !== undefined && typeof value.refresh_token === "string";
}
function hasTokenType(value) {
    return value.token_type !== undefined && typeof value.token_type === "string";
}
function hasExpiresIn(value) {
    return value.expires_in === undefined || typeof value.expires_in === "number";
}
function validatePreconditions(issuer, data) {
    if (data.grantType && (!issuer.grantTypesSupported || !issuer.grantTypesSupported.includes(data.grantType))) throw new Error(`The issuer [${issuer.issuer}] does not support the [${data.grantType}] grant`);
    if (!issuer.tokenEndpoint) throw new Error(`This issuer [${issuer.issuer}] does not have a token endpoint`);
}
function validateTokenEndpointResponse(tokenResponse, dpop) {
    if (hasError(tokenResponse)) throw new (0, _solidClientAuthnCore.OidcProviderError)(`Token endpoint returned error [${tokenResponse.error}]${hasErrorDescription(tokenResponse) ? `: ${tokenResponse.error_description}` : ""}${hasErrorUri(tokenResponse) ? ` (see ${tokenResponse.error_uri})` : ""}`, tokenResponse.error, hasErrorDescription(tokenResponse) ? tokenResponse.error_description : undefined);
    if (!hasAccessToken(tokenResponse)) throw new (0, _solidClientAuthnCore.InvalidResponseError)([
        "access_token"
    ]);
    if (!hasIdToken(tokenResponse)) throw new (0, _solidClientAuthnCore.InvalidResponseError)([
        "id_token"
    ]);
    if (!hasTokenType(tokenResponse)) throw new (0, _solidClientAuthnCore.InvalidResponseError)([
        "token_type"
    ]);
    if (!hasExpiresIn(tokenResponse)) throw new (0, _solidClientAuthnCore.InvalidResponseError)([
        "expires_in"
    ]);
    // TODO: Due to a bug in both the ESS ID broker AND NSS (what were the odds), a DPoP token is returned
    // with a token_type 'Bearer'. To work around this, this test is currently disabled.
    // https://github.com/solid/oidc-op/issues/26
    // Fixed, but unreleased for the ESS (current version: inrupt-oidc-server-0.5.2)
    // if (dpop && tokenResponse.token_type.toLowerCase() !== "dpop") {
    //   throw new Error(
    //     `Invalid token endpoint response: requested a [DPoP] token, but got a 'token_type' value of [${tokenResponse.token_type}].`
    //   );
    // }
    if (!dpop && tokenResponse.token_type.toLowerCase() !== "bearer") throw new Error(`Invalid token endpoint response: requested a [Bearer] token, but got a 'token_type' value of [${tokenResponse.token_type}].`);
    return tokenResponse;
}
async function getTokens(issuer, client, data, dpop) {
    validatePreconditions(issuer, data);
    const headers = {
        "content-type": "application/x-www-form-urlencoded"
    };
    let dpopKey;
    if (dpop) {
        dpopKey = await (0, _solidClientAuthnCore.generateDpopKeyPair)();
        headers.DPoP = await (0, _solidClientAuthnCore.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey);
    }
    // TODO: Find out where this is specified.
    if (client.clientSecret) headers.Authorization = `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`;
    const requestBody = {
        /* eslint-disable camelcase */ grant_type: data.grantType,
        redirect_uri: data.redirectUrl,
        code: data.code,
        code_verifier: data.codeVerifier,
        client_id: client.clientId
    };
    const tokenRequestInit = {
        method: "POST",
        headers,
        body: new URLSearchParams(requestBody).toString()
    };
    const rawTokenResponse = await (0, _universalFetch.fetch)(issuer.tokenEndpoint, tokenRequestInit);
    const jsonTokenResponse = await rawTokenResponse.json();
    const tokenResponse = validateTokenEndpointResponse(jsonTokenResponse, dpop);
    const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(tokenResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
    return {
        accessToken: tokenResponse.access_token,
        idToken: tokenResponse.id_token,
        refreshToken: hasRefreshToken(tokenResponse) ? tokenResponse.refresh_token : undefined,
        webId,
        dpopKey,
        expiresIn: tokenResponse.expires_in
    };
}
/**
 * This function exchanges an authorization code for a bearer token.
 * Note that it is based on oidc-client-js, and assumes that the same client has
 * been used to issue the initial redirect.
 * @param redirectUrl The URL to which the user has been redirected
 */ async function getBearerToken(redirectUrl) {
    let signinResponse;
    try {
        const client = new (0, _oidcClient.OidcClient)({
            // TODO: We should look at the various interfaces being used for storage,
            //  i.e. between oidc-client-js (WebStorageStoreState), localStorage
            //  (which has an interface Storage), and our own proprietary interface
            //  IStorage - i.e. we should really just be using the browser Web Storage
            //  API, e.g. "stateStore: window.localStorage,".
            // We are instantiating a new instance here, so the only value we need to
            // explicitly provide is the response mode (default otherwise will look
            // for a hash '#' fragment!).
            // eslint-disable-next-line camelcase
            response_mode: "query",
            // The userinfo endpoint on NSS fails, so disable this for now
            // Note that in Solid, information should be retrieved from the
            // profile referenced by the WebId.
            // TODO: Note that this is heavy-handed, and that this userinfo check
            //  verifies that the `sub` claim in the id token you get along with the
            //  access token matches the sub claim associated with the access token at
            //  the userinfo endpoint.
            // That is a useful check, and in the future it should be only disabled
            // against NSS, and not in general.
            // Issue tracker: https://github.com/solid/node-solid-server/issues/1490
            loadUserInfo: false
        });
        signinResponse = await client.processSigninResponse(redirectUrl);
        if (client.settings.metadata === undefined) throw new Error("Cannot retrieve issuer metadata from client information in storage.");
        if (client.settings.metadata.jwks_uri === undefined) throw new Error("Missing some issuer metadata from client information in storage: 'jwks_uri' is undefined");
        if (client.settings.metadata.issuer === undefined) throw new Error("Missing some issuer metadata from client information in storage: 'issuer' is undefined");
        if (client.settings.client_id === undefined) throw new Error("Missing some client information in storage: 'client_id' is undefined");
        const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(signinResponse.id_token, client.settings.metadata.jwks_uri, client.settings.metadata.issuer, client.settings.client_id);
        return {
            accessToken: signinResponse.access_token,
            idToken: signinResponse.id_token,
            webId,
            // Although not a field in the TypeScript response interface, the refresh
            // token (which can optionally come back with the access token (if, as per
            // the OAuth2 spec, we requested one using the scope of 'offline_access')
            // will be included in the signin response object.
            // eslint-disable-next-line camelcase
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            refreshToken: signinResponse.refresh_token
        };
    } catch (err) {
        throw new Error(`Problem handling Auth Code Grant (Flow) redirect - URL [${redirectUrl}]: ${err}`);
    }
}
async function getDpopToken(issuer, client, data) {
    return getTokens(issuer, client, data, true);
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const isValidUrl = (url)=>{
    try {
        // Here, the URL constructor is just called to parse the given string and
        // verify if it is a well-formed IRI.
        // eslint-disable-next-line no-new
        new URL(url);
        return true;
    } catch (_a) {
        return false;
    }
};
// Identifiers in snake_case are mandated by the OAuth spec.
/* eslint-disable camelcase */ async function refresh(refreshToken, issuer, client, dpopKey) {
    if (client.clientId === undefined) throw new Error("No client ID available when trying to refresh the access token.");
    const requestBody = {
        grant_type: "refresh_token",
        refresh_token: refreshToken,
        scope: (0, _solidClientAuthnCore.DEFAULT_SCOPES)
    };
    let dpopHeader = {};
    if (dpopKey !== undefined) dpopHeader = {
        DPoP: await (0, _solidClientAuthnCore.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey)
    };
    let authHeader = {};
    if (client.clientSecret !== undefined) authHeader = {
        // We assume that client_secret_basic is the client authentication method.
        // TODO: Get the authentication method from the IClient configuration object.
        Authorization: `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`
    };
    else if (isValidUrl(client.clientId)) // If the client ID is an URL, and there is no client secret, the client
    // has a Solid-OIDC Client Identifier, and it should be present in the
    // request body.
    requestBody.client_id = client.clientId;
    const rawResponse = await (0, _universalFetch.fetch)(issuer.tokenEndpoint, {
        method: "POST",
        body: new URLSearchParams(requestBody).toString(),
        headers: {
            ...dpopHeader,
            ...authHeader,
            "Content-Type": "application/x-www-form-urlencoded"
        }
    });
    let response;
    try {
        response = await rawResponse.json();
    } catch (e) {
        // The response is left out of the error on purpose not to leak any sensitive information.
        throw new Error(`The token endpoint of issuer ${issuer.issuer} returned a malformed response.`);
    }
    const validatedResponse = validateTokenEndpointResponse(response, dpopKey !== undefined);
    const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(validatedResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
    return {
        accessToken: validatedResponse.access_token,
        idToken: validatedResponse.id_token,
        refreshToken: typeof validatedResponse.refresh_token === "string" ? validatedResponse.refresh_token : undefined,
        webId,
        dpopKey,
        expiresIn: validatedResponse.expires_in
    };
}
//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
/**
 * Removes OIDC-specific query parameters from a given URL (state, code...), and
 * sanitizes the URL (e.g. removes the hash fragment).
 * @param redirectUrl The URL to clean up.
 * @returns A copy of the URL, without OIDC-specific query params.
 */ function removeOidcQueryParam(redirectUrl) {
    const cleanedUrl = new URL(redirectUrl);
    cleanedUrl.searchParams.delete("code");
    cleanedUrl.searchParams.delete("state");
    // As per https://tools.ietf.org/html/rfc6749#section-3.1.2, the redirect URL
    // must not include a hash fragment.
    cleanedUrl.hash = "";
    // Do not normalize the trailing slash, and respect the original redirect URL.
    if (// The trailing slash is present in the original redirect URL
    redirectUrl.includes(`${cleanedUrl.origin}/`)) return cleanedUrl.href;
    // Calling cleanedUrl.href appends a trailing slash to the origin, which may
    // create a redirect URL mismatch if it wasn't originally present.
    return `${cleanedUrl.origin}${cleanedUrl.href.substring(// Adds 1 to the origin length to remove the trailing slash
    cleanedUrl.origin.length + 1)}`;
}
/**
 * Clears any OIDC-related data lingering in the local storage.
 */ async function clearOidcPersistentStorage() {
    const client = new (0, _oidcClient.OidcClient)({
        // TODO: We should look at the various interfaces being used for storage,
        //  i.e. between oidc-client-js (WebStorageStoreState), localStorage
        //  (which has an interface Storage), and our own proprietary interface
        //  IStorage - i.e. we should really just be using the browser Web Storage
        //  API, e.g. "stateStore: window.localStorage,".
        // We are instantiating a new instance here, so the only value we need to
        // explicitly provide is the response mode (default otherwise will look
        // for a hash '#' fragment!).
        // eslint-disable-next-line camelcase
        response_mode: "query"
    });
    await client.clearStaleState(new (0, _oidcClient.WebStorageStateStore)({}));
    const myStorage = window.localStorage;
    const itemsToRemove = [];
    for(let i = 0; i <= myStorage.length; i += 1){
        const key = myStorage.key(i);
        if (key && (key.match(/^oidc\..+$/) || key.match(/^solidClientAuthenticationUser:.+$/))) itemsToRemove.push(key);
    }
    itemsToRemove.forEach((key)=>myStorage.removeItem(key));
}

},{"@inrupt/oidc-client":"hni08","@inrupt/solid-client-authn-core":"9M70v","@inrupt/universal-fetch":"f7fox","@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}],"hni08":[function(require,module,exports) {
!function t(e, r) {
    var n, i;
    module.exports = r();
}(this, function() {
    return function(t) {
        var e = {};
        function r(n) {
            if (e[n]) return e[n].exports;
            var i = e[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return t[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = t, r.c = e, r.d = function(t, e, n) {
            r.o(t, e) || Object.defineProperty(t, e, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(t, "__esModule", {
                value: !0
            });
        }, r.t = function(t, e) {
            if (1 & e && (t = r(t)), 8 & e) return t;
            if (4 & e && "object" == typeof t && t && t.__esModule) return t;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: t
            }), 2 & e && "string" != typeof t) for(var i in t)r.d(n, i, (function(e) {
                return t[e];
            }).bind(null, i));
            return n;
        }, r.n = function(t) {
            var e = t && t.__esModule ? function e() {
                return t.default;
            } : function e() {
                return t;
            };
            return r.d(e, "a", e), e;
        }, r.o = function(t, e) {
            return Object.prototype.hasOwnProperty.call(t, e);
        }, r.p = "", r(r.s = 22);
    }([
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }();
            var i = {
                debug: function t() {},
                info: function t() {},
                warn: function t() {},
                error: function t() {}
            }, o = void 0, s = void 0;
            (e.Log = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.reset = function t() {
                    s = 3, o = i;
                }, t.debug = function t() {
                    if (s >= 4) {
                        for(var e = arguments.length, r = Array(e), n = 0; n < e; n++)r[n] = arguments[n];
                        o.debug.apply(o, Array.from(r));
                    }
                }, t.info = function t() {
                    if (s >= 3) {
                        for(var e = arguments.length, r = Array(e), n = 0; n < e; n++)r[n] = arguments[n];
                        o.info.apply(o, Array.from(r));
                    }
                }, t.warn = function t() {
                    if (s >= 2) {
                        for(var e = arguments.length, r = Array(e), n = 0; n < e; n++)r[n] = arguments[n];
                        o.warn.apply(o, Array.from(r));
                    }
                }, t.error = function t() {
                    if (s >= 1) {
                        for(var e = arguments.length, r = Array(e), n = 0; n < e; n++)r[n] = arguments[n];
                        o.error.apply(o, Array.from(r));
                    }
                }, n(t, null, [
                    {
                        key: "NONE",
                        get: function t() {
                            return 0;
                        }
                    },
                    {
                        key: "ERROR",
                        get: function t() {
                            return 1;
                        }
                    },
                    {
                        key: "WARN",
                        get: function t() {
                            return 2;
                        }
                    },
                    {
                        key: "INFO",
                        get: function t() {
                            return 3;
                        }
                    },
                    {
                        key: "DEBUG",
                        get: function t() {
                            return 4;
                        }
                    },
                    {
                        key: "level",
                        get: function t() {
                            return s;
                        },
                        set: function t(e) {
                            if (!(0 <= e && e <= 4)) throw new Error("Invalid log level");
                            s = e;
                        }
                    },
                    {
                        key: "logger",
                        get: function t() {
                            return o;
                        },
                        set: function t(e) {
                            if (!e.debug && e.info && (e.debug = e.info), !(e.debug && e.info && e.warn && e.error)) throw new Error("Invalid logger");
                            o = e;
                        }
                    }
                ]), t;
            }()).reset();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }();
            var i = {
                setInterval: function(t) {
                    function e(e, r) {
                        return t.apply(this, arguments);
                    }
                    return e.toString = function() {
                        return t.toString();
                    }, e;
                }(function(t, e) {
                    return setInterval(t, e);
                }),
                clearInterval: function(t) {
                    function e(e) {
                        return t.apply(this, arguments);
                    }
                    return e.toString = function() {
                        return t.toString();
                    }, e;
                }(function(t) {
                    return clearInterval(t);
                })
            }, o = !1, s = null;
            e.Global = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t._testing = function t() {
                    o = !0;
                }, t.setXMLHttpRequest = function t(e) {
                    s = e;
                }, n(t, null, [
                    {
                        key: "location",
                        get: function t() {
                            if (!o) return location;
                        }
                    },
                    {
                        key: "localStorage",
                        get: function t() {
                            if (!o && "undefined" != typeof window) return localStorage;
                        }
                    },
                    {
                        key: "sessionStorage",
                        get: function t() {
                            if (!o && "undefined" != typeof window) return sessionStorage;
                        }
                    },
                    {
                        key: "XMLHttpRequest",
                        get: function t() {
                            if (!o && "undefined" != typeof window) return s || XMLHttpRequest;
                        }
                    },
                    {
                        key: "timer",
                        get: function t() {
                            if (!o) return i;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.MetadataService = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(7);
            function s(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            var a = ".well-known/openid-configuration";
            e.MetadataService = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.JsonService;
                    if (s(this, t), !e) throw i.Log.error("MetadataService: No settings passed to MetadataService"), new Error("settings");
                    this._settings = e, this._jsonService = new r([
                        "application/jwk-set+json"
                    ]);
                }
                return t.prototype.resetSigningKeys = function t() {
                    this._settings = this._settings || {}, this._settings.signingKeys = void 0;
                }, t.prototype.getMetadata = function t() {
                    var e = this;
                    return this._settings.metadata ? (i.Log.debug("MetadataService.getMetadata: Returning metadata from settings"), Promise.resolve(this._settings.metadata)) : this.metadataUrl ? (i.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl), this._jsonService.getJson(this.metadataUrl).then(function(t) {
                        i.Log.debug("MetadataService.getMetadata: json received");
                        var r = e._settings.metadataSeed || {};
                        return e._settings.metadata = Object.assign({}, r, t), e._settings.metadata;
                    })) : (i.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings"), Promise.reject(new Error("No authority or metadataUrl configured on settings")));
                }, t.prototype.getIssuer = function t() {
                    return this._getMetadataProperty("issuer");
                }, t.prototype.getAuthorizationEndpoint = function t() {
                    return this._getMetadataProperty("authorization_endpoint");
                }, t.prototype.getUserInfoEndpoint = function t() {
                    return this._getMetadataProperty("userinfo_endpoint");
                }, t.prototype.getTokenEndpoint = function t() {
                    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    return this._getMetadataProperty("token_endpoint", e);
                }, t.prototype.getCheckSessionIframe = function t() {
                    return this._getMetadataProperty("check_session_iframe", !0);
                }, t.prototype.getEndSessionEndpoint = function t() {
                    return this._getMetadataProperty("end_session_endpoint", !0);
                }, t.prototype.getRevocationEndpoint = function t() {
                    return this._getMetadataProperty("revocation_endpoint", !0);
                }, t.prototype.getKeysEndpoint = function t() {
                    return this._getMetadataProperty("jwks_uri", !0);
                }, t.prototype._getMetadataProperty = function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return i.Log.debug("MetadataService.getMetadataProperty for: " + e), this.getMetadata().then(function(t) {
                        if (i.Log.debug("MetadataService.getMetadataProperty: metadata recieved"), void 0 === t[e]) {
                            if (!0 === r) return void i.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + e);
                            throw i.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + e), new Error("Metadata does not contain property " + e);
                        }
                        return t[e];
                    });
                }, t.prototype.getSigningKeys = function t() {
                    var e = this;
                    return this._settings.signingKeys ? (i.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings"), Promise.resolve(this._settings.signingKeys)) : this._getMetadataProperty("jwks_uri").then(function(t) {
                        return i.Log.debug("MetadataService.getSigningKeys: jwks_uri received", t), e._jsonService.getJson(t).then(function(t) {
                            if (i.Log.debug("MetadataService.getSigningKeys: key set received", t), !t.keys) throw i.Log.error("MetadataService.getSigningKeys: Missing keys on keyset"), new Error("Missing keys on keyset");
                            return e._settings.signingKeys = t.keys, e._settings.signingKeys;
                        });
                    });
                }, n(t, [
                    {
                        key: "metadataUrl",
                        get: function t() {
                            return this._metadataUrl || (this._settings.metadataUrl ? this._metadataUrl = this._settings.metadataUrl : (this._metadataUrl = this._settings.authority, this._metadataUrl && this._metadataUrl.indexOf(a) < 0 && ("/" !== this._metadataUrl[this._metadataUrl.length - 1] && (this._metadataUrl += "/"), this._metadataUrl += a))), this._metadataUrl;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.UrlUtility = void 0;
            var n = r(0), i = r(1);
            e.UrlUtility = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.addQueryParam = function t(e, r, n) {
                    return e.indexOf("?") < 0 && (e += "?"), "?" !== e[e.length - 1] && (e += "&"), e += encodeURIComponent(r), e += "=", e += encodeURIComponent(n);
                }, t.parseUrlFragment = function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#", o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.Global;
                    "string" != typeof e && (e = o.location.href);
                    var s = e.lastIndexOf(r);
                    s >= 0 && (e = e.substr(s + 1)), "?" === r && (s = e.indexOf("#")) >= 0 && (e = e.substr(0, s));
                    for(var a, u = {}, c = /([^&=]+)=([^&]*)/g, h = 0; a = c.exec(e);)if (u[decodeURIComponent(a[1])] = decodeURIComponent(a[2].replace(/\+/g, " ")), h++ > 50) return n.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", e), {
                        error: "Response exceeded expected number of parameters"
                    };
                    for(var l in u)return u;
                    return {};
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.JoseUtil = void 0;
            var n = r(26), i = function o(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            }(r(33));
            e.JoseUtil = (0, i.default)({
                jws: n.jws,
                KeyUtil: n.KeyUtil,
                X509: n.X509,
                crypto: n.crypto,
                hextob64u: n.hextob64u,
                b64tohex: n.b64tohex,
                AllowedSigningAlgs: n.AllowedSigningAlgs
            });
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.OidcClientSettings = void 0;
            var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, i = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), o = r(0), s = r(23), a = r(6), u = r(24), c = r(2);
            function h(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            var l = ".well-known/openid-configuration", f = "id_token", g = "openid", d = "client_secret_post";
            e.OidcClientSettings = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.authority, i = e.metadataUrl, o = e.metadata, l = e.signingKeys, p = e.metadataSeed, v = e.client_id, y = e.client_secret, m = e.response_type, _ = void 0 === m ? f : m, S = e.scope, b = void 0 === S ? g : S, w = e.redirect_uri, F = e.post_logout_redirect_uri, E = e.client_authentication, x = void 0 === E ? d : E, A = e.prompt, k = e.display, P = e.max_age, C = e.ui_locales, T = e.acr_values, R = e.resource, I = e.response_mode, D = e.filterProtocolClaims, L = void 0 === D || D, N = e.loadUserInfo, U = void 0 === N || N, B = e.staleStateAge, O = void 0 === B ? 900 : B, j = e.clockSkew, M = void 0 === j ? 300 : j, H = e.clockService, V = void 0 === H ? new s.ClockService : H, K = e.userInfoJwtIssuer, q = void 0 === K ? "OP" : K, J = e.mergeClaims, W = void 0 !== J && J, z = e.stateStore, Y = void 0 === z ? new a.WebStorageStateStore : z, G = e.ResponseValidatorCtor, X = void 0 === G ? u.ResponseValidator : G, $ = e.MetadataServiceCtor, Q = void 0 === $ ? c.MetadataService : $, Z = e.extraQueryParams, tt = void 0 === Z ? {} : Z, et = e.extraTokenParams, rt = void 0 === et ? {} : et;
                    h(this, t), this._authority = r, this._metadataUrl = i, this._metadata = o, this._metadataSeed = p, this._signingKeys = l, this._client_id = v, this._client_secret = y, this._response_type = _, this._scope = b, this._redirect_uri = w, this._post_logout_redirect_uri = F, this._client_authentication = x, this._prompt = A, this._display = k, this._max_age = P, this._ui_locales = C, this._acr_values = T, this._resource = R, this._response_mode = I, this._filterProtocolClaims = !!L, this._loadUserInfo = !!U, this._staleStateAge = O, this._clockSkew = M, this._clockService = V, this._userInfoJwtIssuer = q, this._mergeClaims = !!W, this._stateStore = Y, this._validator = new X(this), this._metadataService = new Q(this), this._extraQueryParams = "object" === (void 0 === tt ? "undefined" : n(tt)) ? tt : {}, this._extraTokenParams = "object" === (void 0 === rt ? "undefined" : n(rt)) ? rt : {};
                }
                return t.prototype.getEpochTime = function t() {
                    return this._clockService.getEpochTime();
                }, i(t, [
                    {
                        key: "client_id",
                        get: function t() {
                            return this._client_id;
                        },
                        set: function t(e) {
                            if (this._client_id) throw o.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned."), new Error("client_id has already been assigned.");
                            this._client_id = e;
                        }
                    },
                    {
                        key: "client_secret",
                        get: function t() {
                            return this._client_secret;
                        }
                    },
                    {
                        key: "response_type",
                        get: function t() {
                            return this._response_type;
                        }
                    },
                    {
                        key: "scope",
                        get: function t() {
                            return this._scope;
                        }
                    },
                    {
                        key: "redirect_uri",
                        get: function t() {
                            return this._redirect_uri;
                        }
                    },
                    {
                        key: "post_logout_redirect_uri",
                        get: function t() {
                            return this._post_logout_redirect_uri;
                        }
                    },
                    {
                        key: "client_authentication",
                        get: function t() {
                            return this._client_authentication;
                        }
                    },
                    {
                        key: "prompt",
                        get: function t() {
                            return this._prompt;
                        }
                    },
                    {
                        key: "display",
                        get: function t() {
                            return this._display;
                        }
                    },
                    {
                        key: "max_age",
                        get: function t() {
                            return this._max_age;
                        }
                    },
                    {
                        key: "ui_locales",
                        get: function t() {
                            return this._ui_locales;
                        }
                    },
                    {
                        key: "acr_values",
                        get: function t() {
                            return this._acr_values;
                        }
                    },
                    {
                        key: "resource",
                        get: function t() {
                            return this._resource;
                        }
                    },
                    {
                        key: "response_mode",
                        get: function t() {
                            return this._response_mode;
                        }
                    },
                    {
                        key: "authority",
                        get: function t() {
                            return this._authority;
                        },
                        set: function t(e) {
                            if (this._authority) throw o.Log.error("OidcClientSettings.set_authority: authority has already been assigned."), new Error("authority has already been assigned.");
                            this._authority = e;
                        }
                    },
                    {
                        key: "metadataUrl",
                        get: function t() {
                            return this._metadataUrl || (this._metadataUrl = this.authority, this._metadataUrl && this._metadataUrl.indexOf(l) < 0 && ("/" !== this._metadataUrl[this._metadataUrl.length - 1] && (this._metadataUrl += "/"), this._metadataUrl += l)), this._metadataUrl;
                        }
                    },
                    {
                        key: "metadata",
                        get: function t() {
                            return this._metadata;
                        },
                        set: function t(e) {
                            this._metadata = e;
                        }
                    },
                    {
                        key: "metadataSeed",
                        get: function t() {
                            return this._metadataSeed;
                        },
                        set: function t(e) {
                            this._metadataSeed = e;
                        }
                    },
                    {
                        key: "signingKeys",
                        get: function t() {
                            return this._signingKeys;
                        },
                        set: function t(e) {
                            this._signingKeys = e;
                        }
                    },
                    {
                        key: "filterProtocolClaims",
                        get: function t() {
                            return this._filterProtocolClaims;
                        }
                    },
                    {
                        key: "loadUserInfo",
                        get: function t() {
                            return this._loadUserInfo;
                        }
                    },
                    {
                        key: "staleStateAge",
                        get: function t() {
                            return this._staleStateAge;
                        }
                    },
                    {
                        key: "clockSkew",
                        get: function t() {
                            return this._clockSkew;
                        }
                    },
                    {
                        key: "userInfoJwtIssuer",
                        get: function t() {
                            return this._userInfoJwtIssuer;
                        }
                    },
                    {
                        key: "mergeClaims",
                        get: function t() {
                            return this._mergeClaims;
                        }
                    },
                    {
                        key: "stateStore",
                        get: function t() {
                            return this._stateStore;
                        }
                    },
                    {
                        key: "validator",
                        get: function t() {
                            return this._validator;
                        }
                    },
                    {
                        key: "metadataService",
                        get: function t() {
                            return this._metadataService;
                        }
                    },
                    {
                        key: "extraQueryParams",
                        get: function t() {
                            return this._extraQueryParams;
                        },
                        set: function t(e) {
                            "object" === (void 0 === e ? "undefined" : n(e)) ? this._extraQueryParams = e : this._extraQueryParams = {};
                        }
                    },
                    {
                        key: "extraTokenParams",
                        get: function t() {
                            return this._extraTokenParams;
                        },
                        set: function t(e) {
                            "object" === (void 0 === e ? "undefined" : n(e)) ? this._extraTokenParams = e : this._extraTokenParams = {};
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.WebStorageStateStore = void 0;
            var n = r(0), i = r(1);
            function o(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.WebStorageStateStore = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.prefix, n = void 0 === r ? "oidc." : r, s = e.store, a = void 0 === s ? i.Global.localStorage : s;
                    o(this, t), this._store = a, this._prefix = n;
                }
                return t.prototype.set = function t(e, r) {
                    return n.Log.debug("WebStorageStateStore.set", e), e = this._prefix + e, this._store.setItem(e, r), Promise.resolve();
                }, t.prototype.get = function t(e) {
                    n.Log.debug("WebStorageStateStore.get", e), e = this._prefix + e;
                    var r = this._store.getItem(e);
                    return Promise.resolve(r);
                }, t.prototype.remove = function t(e) {
                    n.Log.debug("WebStorageStateStore.remove", e), e = this._prefix + e;
                    var r = this._store.getItem(e);
                    return this._store.removeItem(e), Promise.resolve(r);
                }, t.prototype.getAllKeys = function t() {
                    n.Log.debug("WebStorageStateStore.getAllKeys");
                    for(var e = [], r = 0; r < this._store.length; r++){
                        var i = this._store.key(r);
                        0 === i.indexOf(this._prefix) && e.push(i.substr(this._prefix.length));
                    }
                    return Promise.resolve(e);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.JsonService = void 0;
            var n = r(0), i = r(1);
            function o(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.JsonService = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.Global.XMLHttpRequest, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                    o(this, t), e && Array.isArray(e) ? this._contentTypes = e.slice() : this._contentTypes = [], this._contentTypes.push("application/json"), n && this._contentTypes.push("application/jwt"), this._XMLHttpRequest = r, this._jwtHandler = n;
                }
                return t.prototype.getJson = function t(e, r) {
                    var i = this;
                    if (!e) throw n.Log.error("JsonService.getJson: No url passed"), new Error("url");
                    return n.Log.debug("JsonService.getJson, url: ", e), new Promise(function(t, o) {
                        var s = new i._XMLHttpRequest;
                        s.open("GET", e);
                        var a = i._contentTypes, u = i._jwtHandler;
                        s.onload = function() {
                            if (n.Log.debug("JsonService.getJson: HTTP response received, status", s.status), 200 === s.status) {
                                var r = s.getResponseHeader("Content-Type");
                                if (r) {
                                    var i = a.find(function(t) {
                                        if (r.startsWith(t)) return !0;
                                    });
                                    if ("application/jwt" == i) return void u(s).then(t, o);
                                    if (i) try {
                                        return void t(JSON.parse(s.responseText));
                                    } catch (t) {
                                        return n.Log.error("JsonService.getJson: Error parsing JSON response", t.message), void o(t);
                                    }
                                }
                                o(Error("Invalid response Content-Type: " + r + ", from URL: " + e));
                            } else o(Error(s.statusText + " (" + s.status + ")"));
                        }, s.onerror = function() {
                            n.Log.error("JsonService.getJson: network error"), o(Error("Network Error"));
                        }, r && (n.Log.debug("JsonService.getJson: token passed, setting Authorization header"), s.setRequestHeader("Authorization", "Bearer " + r)), s.send();
                    });
                }, t.prototype.postForm = function t(e, r, i) {
                    var o = this;
                    if (!e) throw n.Log.error("JsonService.postForm: No url passed"), new Error("url");
                    return n.Log.debug("JsonService.postForm, url: ", e), new Promise(function(t, s) {
                        var a = new o._XMLHttpRequest;
                        a.open("POST", e);
                        var u = o._contentTypes;
                        a.onload = function() {
                            if (n.Log.debug("JsonService.postForm: HTTP response received, status", a.status), 200 !== a.status) {
                                if (400 === a.status) {
                                    if (i = a.getResponseHeader("Content-Type")) {
                                        if (u.find(function(t) {
                                            if (i.startsWith(t)) return !0;
                                        })) try {
                                            var r = JSON.parse(a.responseText);
                                            if (r && r.error) return n.Log.error("JsonService.postForm: Error from server: ", r.error), void s(new Error(r.error));
                                        } catch (t) {
                                            return n.Log.error("JsonService.postForm: Error parsing JSON response", t.message), void s(t);
                                        }
                                    }
                                }
                                s(Error(a.statusText + " (" + a.status + ")"));
                            } else {
                                var i;
                                if ((i = a.getResponseHeader("Content-Type")) && u.find(function(t) {
                                    if (i.startsWith(t)) return !0;
                                })) try {
                                    return void t(JSON.parse(a.responseText));
                                } catch (t) {
                                    return n.Log.error("JsonService.postForm: Error parsing JSON response", t.message), void s(t);
                                }
                                s(Error("Invalid response Content-Type: " + i + ", from URL: " + e));
                            }
                        }, a.onerror = function() {
                            n.Log.error("JsonService.postForm: network error"), s(Error("Network Error"));
                        };
                        var c = "";
                        for(var h in r){
                            var l = r[h];
                            l && (c.length > 0 && (c += "&"), c += encodeURIComponent(h), c += "=", c += encodeURIComponent(l));
                        }
                        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), void 0 !== i && a.setRequestHeader("Authorization", "Basic " + btoa(i)), a.send(c);
                    });
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SigninRequest = void 0;
            var n = r(0), i = r(3), o = r(13);
            e.SigninRequest = function() {
                function t(e) {
                    var r = e.url, s = e.client_id, a = e.redirect_uri, u = e.response_type, c = e.scope, h = e.authority, l = e.data, f = e.prompt, g = e.display, d = e.max_age, p = e.ui_locales, v = e.id_token_hint, y = e.login_hint, m = e.acr_values, _ = e.resource, S = e.response_mode, b = e.request, w = e.request_uri, F = e.extraQueryParams, E = e.request_type, x = e.client_secret, A = e.extraTokenParams, k = e.skipUserInfo;
                    if (function P(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), !r) throw n.Log.error("SigninRequest.ctor: No url passed"), new Error("url");
                    if (!s) throw n.Log.error("SigninRequest.ctor: No client_id passed"), new Error("client_id");
                    if (!a) throw n.Log.error("SigninRequest.ctor: No redirect_uri passed"), new Error("redirect_uri");
                    if (!u) throw n.Log.error("SigninRequest.ctor: No response_type passed"), new Error("response_type");
                    if (!c) throw n.Log.error("SigninRequest.ctor: No scope passed"), new Error("scope");
                    if (!h) throw n.Log.error("SigninRequest.ctor: No authority passed"), new Error("authority");
                    var C = t.isOidc(u), T = t.isCode(u);
                    S || (S = t.isCode(u) ? "query" : null), this.state = new o.SigninState({
                        nonce: C,
                        data: l,
                        client_id: s,
                        authority: h,
                        redirect_uri: a,
                        code_verifier: T,
                        request_type: E,
                        response_mode: S,
                        client_secret: x,
                        scope: c,
                        extraTokenParams: A,
                        skipUserInfo: k
                    }), r = i.UrlUtility.addQueryParam(r, "client_id", s), r = i.UrlUtility.addQueryParam(r, "redirect_uri", a), r = i.UrlUtility.addQueryParam(r, "response_type", u), r = i.UrlUtility.addQueryParam(r, "scope", c), r = i.UrlUtility.addQueryParam(r, "state", this.state.id), C && (r = i.UrlUtility.addQueryParam(r, "nonce", this.state.nonce)), T && (r = i.UrlUtility.addQueryParam(r, "code_challenge", this.state.code_challenge), r = i.UrlUtility.addQueryParam(r, "code_challenge_method", "S256"));
                    var R = {
                        prompt: f,
                        display: g,
                        max_age: d,
                        ui_locales: p,
                        id_token_hint: v,
                        login_hint: y,
                        acr_values: m,
                        resource: _,
                        request: b,
                        request_uri: w,
                        response_mode: S
                    };
                    for(var I in R)R[I] && (r = i.UrlUtility.addQueryParam(r, I, R[I]));
                    for(var D in F)r = i.UrlUtility.addQueryParam(r, D, F[D]);
                    this.url = r;
                }
                return t.isOidc = function t(e) {
                    return !!e.split(/\s+/g).filter(function(t) {
                        return "id_token" === t;
                    })[0];
                }, t.isOAuth = function t(e) {
                    return !!e.split(/\s+/g).filter(function(t) {
                        return "token" === t;
                    })[0];
                }, t.isCode = function t(e) {
                    return !!e.split(/\s+/g).filter(function(t) {
                        return "code" === t;
                    })[0];
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.State = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = function s(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            }(r(14));
            function a(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.State = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.id, n = e.data, i = e.created, s = e.request_type;
                    a(this, t), this._id = r || (0, o.default)(), this._data = n, this._created = "number" == typeof i && i > 0 ? i : parseInt(Date.now() / 1e3), this._request_type = s;
                }
                return t.prototype.toStorageString = function t() {
                    return i.Log.debug("State.toStorageString"), JSON.stringify({
                        id: this.id,
                        data: this.data,
                        created: this.created,
                        request_type: this.request_type
                    });
                }, t.fromStorageString = function e(r) {
                    return i.Log.debug("State.fromStorageString"), new t(JSON.parse(r));
                }, t.clearStaleState = function e(r, n) {
                    var o = Date.now() / 1e3 - n;
                    return r.getAllKeys().then(function(e) {
                        i.Log.debug("State.clearStaleState: got keys", e);
                        for(var n = [], s = function s(a) {
                            var c = e[a];
                            u = r.get(c).then(function(e) {
                                var n = !1;
                                if (e) try {
                                    var s = t.fromStorageString(e);
                                    i.Log.debug("State.clearStaleState: got item from key: ", c, s.created), s.created <= o && (n = !0);
                                } catch (t) {
                                    i.Log.error("State.clearStaleState: Error parsing state for key", c, t.message), n = !0;
                                }
                                else i.Log.debug("State.clearStaleState: no item in storage for key: ", c), n = !0;
                                if (n) return i.Log.debug("State.clearStaleState: removed item for key: ", c), r.remove(c);
                            }), n.push(u);
                        }, a = 0; a < e.length; a++){
                            var u;
                            s(a);
                        }
                        return i.Log.debug("State.clearStaleState: waiting on promise count:", n.length), Promise.all(n);
                    });
                }, n(t, [
                    {
                        key: "id",
                        get: function t() {
                            return this._id;
                        }
                    },
                    {
                        key: "data",
                        get: function t() {
                            return this._data;
                        }
                    },
                    {
                        key: "created",
                        get: function t() {
                            return this._created;
                        }
                    },
                    {
                        key: "request_type",
                        get: function t() {
                            return this._request_type;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.OidcClient = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(5), s = r(12), a = r(8), u = r(34), c = r(35), h = r(36), l = r(13), f = r(9);
            function g(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.OidcClient = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    g(this, t), e instanceof o.OidcClientSettings ? this._settings = e : this._settings = new o.OidcClientSettings(e);
                }
                return t.prototype.createSigninRequest = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = r.response_type, o = r.scope, s = r.redirect_uri, u = r.data, c = r.state, h = r.prompt, l = r.display, f = r.max_age, g = r.ui_locales, d = r.id_token_hint, p = r.login_hint, v = r.acr_values, y = r.resource, m = r.request, _ = r.request_uri, S = r.response_mode, b = r.extraQueryParams, w = r.extraTokenParams, F = r.request_type, E = r.skipUserInfo, x = arguments[1];
                    i.Log.debug("OidcClient.createSigninRequest");
                    var A = this._settings.client_id;
                    n = n || this._settings.response_type, o = o || this._settings.scope, s = s || this._settings.redirect_uri, h = h || this._settings.prompt, l = l || this._settings.display, f = f || this._settings.max_age, g = g || this._settings.ui_locales, v = v || this._settings.acr_values, y = y || this._settings.resource, S = S || this._settings.response_mode, b = b || this._settings.extraQueryParams, w = w || this._settings.extraTokenParams;
                    var k = this._settings.authority;
                    return a.SigninRequest.isCode(n) && "code" !== n ? Promise.reject(new Error("OpenID Connect hybrid flow is not supported")) : this._metadataService.getAuthorizationEndpoint().then(function(t) {
                        i.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", t);
                        var r = new a.SigninRequest({
                            url: t,
                            client_id: A,
                            redirect_uri: s,
                            response_type: n,
                            scope: o,
                            data: u || c,
                            authority: k,
                            prompt: h,
                            display: l,
                            max_age: f,
                            ui_locales: g,
                            id_token_hint: d,
                            login_hint: p,
                            acr_values: v,
                            resource: y,
                            request: m,
                            request_uri: _,
                            extraQueryParams: b,
                            extraTokenParams: w,
                            request_type: F,
                            response_mode: S,
                            client_secret: e._settings.client_secret,
                            skipUserInfo: E
                        }), P = r.state;
                        return (x = x || e._stateStore).set(P.id, P.toStorageString()).then(function() {
                            return r;
                        });
                    });
                }, t.prototype.readSigninResponseState = function t(e, r) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    i.Log.debug("OidcClient.readSigninResponseState");
                    var o = "query" === this._settings.response_mode || !this._settings.response_mode && a.SigninRequest.isCode(this._settings.response_type), s = o ? "?" : "#", c = new u.SigninResponse(e, s);
                    if (!c.state) return i.Log.error("OidcClient.readSigninResponseState: No state in response"), Promise.reject(new Error("No state in response"));
                    r = r || this._stateStore;
                    var h = n ? r.remove.bind(r) : r.get.bind(r);
                    return h(c.state).then(function(t) {
                        if (!t) throw i.Log.error("OidcClient.readSigninResponseState: No matching state found in storage"), new Error("No matching state found in storage");
                        return {
                            state: l.SigninState.fromStorageString(t),
                            response: c
                        };
                    });
                }, t.prototype.processSigninResponse = function t(e, r) {
                    var n = this;
                    return i.Log.debug("OidcClient.processSigninResponse"), this.readSigninResponseState(e, r, !0).then(function(t) {
                        var e = t.state, r = t.response;
                        return i.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response"), n._validator.validateSigninResponse(e, r);
                    });
                }, t.prototype.createSignoutRequest = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = r.id_token_hint, o = r.data, s = r.state, a = r.post_logout_redirect_uri, u = r.extraQueryParams, h = r.request_type, l = arguments[1];
                    return i.Log.debug("OidcClient.createSignoutRequest"), a = a || this._settings.post_logout_redirect_uri, u = u || this._settings.extraQueryParams, this._metadataService.getEndSessionEndpoint().then(function(t) {
                        if (!t) throw i.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned"), new Error("no end session endpoint");
                        i.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", t);
                        var r = new c.SignoutRequest({
                            url: t,
                            id_token_hint: n,
                            post_logout_redirect_uri: a,
                            data: o || s,
                            extraQueryParams: u,
                            request_type: h
                        }), f = r.state;
                        return f && (i.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist"), (l = l || e._stateStore).set(f.id, f.toStorageString())), r;
                    });
                }, t.prototype.readSignoutResponseState = function t(e, r) {
                    var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    i.Log.debug("OidcClient.readSignoutResponseState");
                    var o = new h.SignoutResponse(e);
                    if (!o.state) return i.Log.debug("OidcClient.readSignoutResponseState: No state in response"), o.error ? (i.Log.warn("OidcClient.readSignoutResponseState: Response was error: ", o.error), Promise.reject(new s.ErrorResponse(o))) : Promise.resolve({
                        state: void 0,
                        response: o
                    });
                    var a = o.state;
                    r = r || this._stateStore;
                    var u = n ? r.remove.bind(r) : r.get.bind(r);
                    return u(a).then(function(t) {
                        if (!t) throw i.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage"), new Error("No matching state found in storage");
                        return {
                            state: f.State.fromStorageString(t),
                            response: o
                        };
                    });
                }, t.prototype.processSignoutResponse = function t(e, r) {
                    var n = this;
                    return i.Log.debug("OidcClient.processSignoutResponse"), this.readSignoutResponseState(e, r, !0).then(function(t) {
                        var e = t.state, r = t.response;
                        return e ? (i.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response"), n._validator.validateSignoutResponse(e, r)) : (i.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response"), r);
                    });
                }, t.prototype.clearStaleState = function t(e) {
                    return i.Log.debug("OidcClient.clearStaleState"), e = e || this._stateStore, f.State.clearStaleState(e, this.settings.staleStateAge);
                }, n(t, [
                    {
                        key: "_stateStore",
                        get: function t() {
                            return this.settings.stateStore;
                        }
                    },
                    {
                        key: "_validator",
                        get: function t() {
                            return this.settings.validator;
                        }
                    },
                    {
                        key: "_metadataService",
                        get: function t() {
                            return this.settings.metadataService;
                        }
                    },
                    {
                        key: "settings",
                        get: function t() {
                            return this._settings;
                        }
                    },
                    {
                        key: "metadataService",
                        get: function t() {
                            return this._metadataService;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.TokenClient = void 0;
            var n = r(7), i = r(2), o = r(0);
            function s(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.TokenClient = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.JsonService, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService;
                    if (s(this, t), !e) throw o.Log.error("TokenClient.ctor: No settings passed"), new Error("settings");
                    this._settings = e, this._jsonService = new r, this._metadataService = new a(this._settings);
                }
                return t.prototype.exchangeCode = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (r = Object.assign({}, r)).grant_type = r.grant_type || "authorization_code", r.client_id = r.client_id || this._settings.client_id, r.client_secret = r.client_secret || this._settings.client_secret, r.redirect_uri = r.redirect_uri || this._settings.redirect_uri;
                    var n = void 0, i = r._client_authentication || this._settings._client_authentication;
                    return delete r._client_authentication, r.code ? r.redirect_uri ? r.code_verifier ? r.client_id ? r.client_secret || "client_secret_basic" != i ? ("client_secret_basic" == i && (n = r.client_id + ":" + r.client_secret, delete r.client_id, delete r.client_secret), this._metadataService.getTokenEndpoint(!1).then(function(t) {
                        return o.Log.debug("TokenClient.exchangeCode: Received token endpoint"), e._jsonService.postForm(t, r, n).then(function(t) {
                            return o.Log.debug("TokenClient.exchangeCode: response received"), t;
                        });
                    })) : (o.Log.error("TokenClient.exchangeCode: No client_secret passed"), Promise.reject(new Error("A client_secret is required"))) : (o.Log.error("TokenClient.exchangeCode: No client_id passed"), Promise.reject(new Error("A client_id is required"))) : (o.Log.error("TokenClient.exchangeCode: No code_verifier passed"), Promise.reject(new Error("A code_verifier is required"))) : (o.Log.error("TokenClient.exchangeCode: No redirect_uri passed"), Promise.reject(new Error("A redirect_uri is required"))) : (o.Log.error("TokenClient.exchangeCode: No code passed"), Promise.reject(new Error("A code is required")));
                }, t.prototype.exchangeRefreshToken = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (r = Object.assign({}, r)).grant_type = r.grant_type || "refresh_token", r.client_id = r.client_id || this._settings.client_id, r.client_secret = r.client_secret || this._settings.client_secret;
                    var n = void 0, i = r._client_authentication || this._settings._client_authentication;
                    return delete r._client_authentication, r.refresh_token ? r.client_id ? ("client_secret_basic" == i && (n = r.client_id + ":" + r.client_secret, delete r.client_id, delete r.client_secret), this._metadataService.getTokenEndpoint(!1).then(function(t) {
                        return o.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint"), e._jsonService.postForm(t, r, n).then(function(t) {
                            return o.Log.debug("TokenClient.exchangeRefreshToken: response received"), t;
                        });
                    })) : (o.Log.error("TokenClient.exchangeRefreshToken: No client_id passed"), Promise.reject(new Error("A client_id is required"))) : (o.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed"), Promise.reject(new Error("A refresh_token is required")));
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.ErrorResponse = void 0;
            var n = r(0);
            function i(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            function o(t, e) {
                if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" != typeof e && "function" != typeof e ? t : e;
            }
            e.ErrorResponse = function(t) {
                function e() {
                    var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, s = r.error, a = r.error_description, u = r.error_uri, c = r.state, h = r.session_state;
                    if (i(this, e), !s) throw n.Log.error("No error passed to ErrorResponse"), new Error("error");
                    var l = o(this, t.call(this, a || s));
                    return l.name = "ErrorResponse", l.error = s, l.error_description = a, l.error_uri = u, l.state = c, l.session_state = h, l;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), e;
            }(Error);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SigninState = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(9), s = r(4), a = function u(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            }(r(14));
            function c(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            function h(t, e) {
                if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" != typeof e && "function" != typeof e ? t : e;
            }
            e.SigninState = function(t) {
                function e() {
                    var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = r.nonce, i = r.authority, o = r.client_id, u = r.redirect_uri, l = r.code_verifier, f = r.response_mode, g = r.client_secret, d = r.scope, p = r.extraTokenParams, v = r.skipUserInfo;
                    c(this, e);
                    var y = h(this, t.call(this, arguments[0]));
                    if (!0 === n ? y._nonce = (0, a.default)() : n && (y._nonce = n), !0 === l ? y._code_verifier = (0, a.default)() + (0, a.default)() + (0, a.default)() : l && (y._code_verifier = l), y.code_verifier) {
                        var m = s.JoseUtil.hashString(y.code_verifier, "SHA256");
                        y._code_challenge = s.JoseUtil.hexToBase64Url(m);
                    }
                    return y._redirect_uri = u, y._authority = i, y._client_id = o, y._response_mode = f, y._client_secret = g, y._scope = d, y._extraTokenParams = p, y._skipUserInfo = v, y;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), e.prototype.toStorageString = function t() {
                    return i.Log.debug("SigninState.toStorageString"), JSON.stringify({
                        id: this.id,
                        data: this.data,
                        created: this.created,
                        request_type: this.request_type,
                        nonce: this.nonce,
                        code_verifier: this.code_verifier,
                        redirect_uri: this.redirect_uri,
                        authority: this.authority,
                        client_id: this.client_id,
                        response_mode: this.response_mode,
                        client_secret: this.client_secret,
                        scope: this.scope,
                        extraTokenParams: this.extraTokenParams,
                        skipUserInfo: this.skipUserInfo
                    });
                }, e.fromStorageString = function t(r) {
                    return i.Log.debug("SigninState.fromStorageString"), new e(JSON.parse(r));
                }, n(e, [
                    {
                        key: "nonce",
                        get: function t() {
                            return this._nonce;
                        }
                    },
                    {
                        key: "authority",
                        get: function t() {
                            return this._authority;
                        }
                    },
                    {
                        key: "client_id",
                        get: function t() {
                            return this._client_id;
                        }
                    },
                    {
                        key: "redirect_uri",
                        get: function t() {
                            return this._redirect_uri;
                        }
                    },
                    {
                        key: "code_verifier",
                        get: function t() {
                            return this._code_verifier;
                        }
                    },
                    {
                        key: "code_challenge",
                        get: function t() {
                            return this._code_challenge;
                        }
                    },
                    {
                        key: "response_mode",
                        get: function t() {
                            return this._response_mode;
                        }
                    },
                    {
                        key: "client_secret",
                        get: function t() {
                            return this._client_secret;
                        }
                    },
                    {
                        key: "scope",
                        get: function t() {
                            return this._scope;
                        }
                    },
                    {
                        key: "extraTokenParams",
                        get: function t() {
                            return this._extraTokenParams;
                        }
                    },
                    {
                        key: "skipUserInfo",
                        get: function t() {
                            return this._skipUserInfo;
                        }
                    }
                ]), e;
            }(o.State);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = function n() {
                return ("undefined" != i && null !== i && void 0 !== i.getRandomValues ? o : s)().replace(/-/g, "");
            };
            var i = "undefined" != typeof window ? window.crypto || window.msCrypto : null;
            function o() {
                return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, function(t) {
                    return (t ^ i.getRandomValues(new Uint8Array(1))[0] & 15 >> t / 4).toString(16);
                });
            }
            function s() {
                return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, function(t) {
                    return (t ^ 16 * Math.random() >> t / 4).toString(16);
                });
            }
            t.exports = e.default;
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.User = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0);
            e.User = function() {
                function t(e) {
                    var r = e.id_token, n = e.session_state, i = e.access_token, o = e.refresh_token, s = e.token_type, a = e.scope, u = e.profile, c = e.expires_at, h = e.state;
                    !function l(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this.id_token = r, this.session_state = n, this.access_token = i, this.refresh_token = o, this.token_type = s, this.scope = a, this.profile = u, this.expires_at = c, this.state = h;
                }
                return t.prototype.toStorageString = function t() {
                    return i.Log.debug("User.toStorageString"), JSON.stringify({
                        id_token: this.id_token,
                        session_state: this.session_state,
                        access_token: this.access_token,
                        refresh_token: this.refresh_token,
                        token_type: this.token_type,
                        scope: this.scope,
                        profile: this.profile,
                        expires_at: this.expires_at
                    });
                }, t.fromStorageString = function e(r) {
                    return i.Log.debug("User.fromStorageString"), new t(JSON.parse(r));
                }, n(t, [
                    {
                        key: "expires_in",
                        get: function t() {
                            if (this.expires_at) {
                                var e = parseInt(Date.now() / 1e3);
                                return this.expires_at - e;
                            }
                        },
                        set: function t(e) {
                            var r = parseInt(e);
                            if ("number" == typeof r && r > 0) {
                                var n = parseInt(Date.now() / 1e3);
                                this.expires_at = n + r;
                            }
                        }
                    },
                    {
                        key: "expired",
                        get: function t() {
                            var e = this.expires_in;
                            if (void 0 !== e) return e <= 0;
                        }
                    },
                    {
                        key: "scopes",
                        get: function t() {
                            return (this.scope || "").split(" ");
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.AccessTokenEvents = void 0;
            var n = r(0), i = r(46);
            function o(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.AccessTokenEvents = function() {
                function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.accessTokenExpiringNotificationTime, n = void 0 === r ? 60 : r, s = e.accessTokenExpiringTimer, a = void 0 === s ? new i.Timer("Access token expiring") : s, u = e.accessTokenExpiredTimer, c = void 0 === u ? new i.Timer("Access token expired") : u;
                    o(this, t), this._accessTokenExpiringNotificationTime = n, this._accessTokenExpiring = a, this._accessTokenExpired = c;
                }
                return t.prototype.load = function t(e) {
                    if (e.access_token && void 0 !== e.expires_in) {
                        var r = e.expires_in;
                        if (n.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", r), r > 0) {
                            var i = r - this._accessTokenExpiringNotificationTime;
                            i <= 0 && (i = 1), n.Log.debug("AccessTokenEvents.load: registering expiring timer in:", i), this._accessTokenExpiring.init(i);
                        } else n.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration."), this._accessTokenExpiring.cancel();
                        var o = r + 1;
                        n.Log.debug("AccessTokenEvents.load: registering expired timer in:", o), this._accessTokenExpired.init(o);
                    } else this._accessTokenExpiring.cancel(), this._accessTokenExpired.cancel();
                }, t.prototype.unload = function t() {
                    n.Log.debug("AccessTokenEvents.unload: canceling existing access token timers"), this._accessTokenExpiring.cancel(), this._accessTokenExpired.cancel();
                }, t.prototype.addAccessTokenExpiring = function t(e) {
                    this._accessTokenExpiring.addHandler(e);
                }, t.prototype.removeAccessTokenExpiring = function t(e) {
                    this._accessTokenExpiring.removeHandler(e);
                }, t.prototype.addAccessTokenExpired = function t(e) {
                    this._accessTokenExpired.addHandler(e);
                }, t.prototype.removeAccessTokenExpired = function t(e) {
                    this._accessTokenExpired.removeHandler(e);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Event = void 0;
            var n = r(0);
            e.Event = function() {
                function t(e) {
                    !function r(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._name = e, this._callbacks = [];
                }
                return t.prototype.addHandler = function t(e) {
                    this._callbacks.push(e);
                }, t.prototype.removeHandler = function t(e) {
                    var r = this._callbacks.findIndex(function(t) {
                        return t === e;
                    });
                    r >= 0 && this._callbacks.splice(r, 1);
                }, t.prototype.raise = function t() {
                    n.Log.debug("Event: Raising event: " + this._name);
                    for(var e = 0; e < this._callbacks.length; e++){
                        var r;
                        (r = this._callbacks)[e].apply(r, arguments);
                    }
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SessionMonitor = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(19), s = r(1);
            function a(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.SessionMonitor = function() {
                function t(e) {
                    var r = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.CheckSessionIFrame, u = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.Global.timer;
                    if (a(this, t), !e) throw i.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor"), new Error("userManager");
                    this._userManager = e, this._CheckSessionIFrameCtor = n, this._timer = u, this._userManager.events.addUserLoaded(this._start.bind(this)), this._userManager.events.addUserUnloaded(this._stop.bind(this)), Promise.resolve(this._userManager.getUser().then(function(t) {
                        t ? r._start(t) : r._settings.monitorAnonymousSession && r._userManager.querySessionStatus().then(function(t) {
                            var e = {
                                session_state: t.session_state
                            };
                            t.sub && t.sid && (e.profile = {
                                sub: t.sub,
                                sid: t.sid
                            }), r._start(e);
                        }).catch(function(t) {
                            i.Log.error("SessionMonitor ctor: error from querySessionStatus:", t.message);
                        });
                    }).catch(function(t) {
                        i.Log.error("SessionMonitor ctor: error from getUser:", t.message);
                    }));
                }
                return t.prototype._start = function t(e) {
                    var r = this, n = e.session_state;
                    n && (e.profile ? (this._sub = e.profile.sub, this._sid = e.profile.sid, i.Log.debug("SessionMonitor._start: session_state:", n, ", sub:", this._sub)) : (this._sub = void 0, this._sid = void 0, i.Log.debug("SessionMonitor._start: session_state:", n, ", anonymous user")), this._checkSessionIFrame ? this._checkSessionIFrame.start(n) : this._metadataService.getCheckSessionIframe().then(function(t) {
                        if (t) {
                            i.Log.debug("SessionMonitor._start: Initializing check session iframe");
                            var e = r._client_id, o = r._checkSessionInterval, s = r._stopCheckSessionOnError;
                            r._checkSessionIFrame = new r._CheckSessionIFrameCtor(r._callback.bind(r), e, t, o, s), r._checkSessionIFrame.load().then(function() {
                                r._checkSessionIFrame.start(n);
                            });
                        } else i.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
                    }).catch(function(t) {
                        i.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", t.message);
                    }));
                }, t.prototype._stop = function t() {
                    var e = this;
                    if (this._sub = void 0, this._sid = void 0, this._checkSessionIFrame && (i.Log.debug("SessionMonitor._stop"), this._checkSessionIFrame.stop()), this._settings.monitorAnonymousSession) var r = this._timer.setInterval(function() {
                        e._timer.clearInterval(r), e._userManager.querySessionStatus().then(function(t) {
                            var r = {
                                session_state: t.session_state
                            };
                            t.sub && t.sid && (r.profile = {
                                sub: t.sub,
                                sid: t.sid
                            }), e._start(r);
                        }).catch(function(t) {
                            i.Log.error("SessionMonitor: error from querySessionStatus:", t.message);
                        });
                    }, 1e3);
                }, t.prototype._callback = function t() {
                    var e = this;
                    this._userManager.querySessionStatus().then(function(t) {
                        var r = !0;
                        t ? t.sub === e._sub ? (r = !1, e._checkSessionIFrame.start(t.session_state), t.sid === e._sid ? i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", t.session_state) : (i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", t.session_state), e._userManager.events._raiseUserSessionChanged())) : i.Log.debug("SessionMonitor._callback: Different subject signed into OP:", t.sub) : i.Log.debug("SessionMonitor._callback: Subject no longer signed into OP"), r && (e._sub ? (i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event"), e._userManager.events._raiseUserSignedOut()) : (i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event"), e._userManager.events._raiseUserSignedIn()));
                    }).catch(function(t) {
                        e._sub && (i.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", t.message), e._userManager.events._raiseUserSignedOut());
                    });
                }, n(t, [
                    {
                        key: "_settings",
                        get: function t() {
                            return this._userManager.settings;
                        }
                    },
                    {
                        key: "_metadataService",
                        get: function t() {
                            return this._userManager.metadataService;
                        }
                    },
                    {
                        key: "_client_id",
                        get: function t() {
                            return this._settings.client_id;
                        }
                    },
                    {
                        key: "_checkSessionInterval",
                        get: function t() {
                            return this._settings.checkSessionInterval;
                        }
                    },
                    {
                        key: "_stopCheckSessionOnError",
                        get: function t() {
                            return this._settings.stopCheckSessionOnError;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.CheckSessionIFrame = void 0;
            var n = r(0);
            function i(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.CheckSessionIFrame = function() {
                function t(e, r, n, o) {
                    var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                    i(this, t), this._callback = e, this._client_id = r, this._url = n, this._interval = o || 2e3, this._stopOnError = s;
                    var a = n.indexOf("/", n.indexOf("//") + 2);
                    this._frame_origin = n.substr(0, a), this._frame = window.document.createElement("iframe"), this._frame.style.visibility = "hidden", this._frame.style.position = "absolute", this._frame.style.display = "none", this._frame.width = 0, this._frame.height = 0, this._frame.src = n;
                }
                return t.prototype.load = function t() {
                    var e = this;
                    return new Promise(function(t) {
                        e._frame.onload = function() {
                            t();
                        }, window.document.body.appendChild(e._frame), e._boundMessageEvent = e._message.bind(e), window.addEventListener("message", e._boundMessageEvent, !1);
                    });
                }, t.prototype._message = function t(e) {
                    e.origin === this._frame_origin && e.source === this._frame.contentWindow && ("error" === e.data ? (n.Log.error("CheckSessionIFrame: error message from check session op iframe"), this._stopOnError && this.stop()) : "changed" === e.data ? (n.Log.debug("CheckSessionIFrame: changed message from check session op iframe"), this.stop(), this._callback()) : n.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe"));
                }, t.prototype.start = function t(e) {
                    var r = this;
                    if (this._session_state !== e) {
                        n.Log.debug("CheckSessionIFrame.start"), this.stop(), this._session_state = e;
                        var i = function t() {
                            r._frame.contentWindow.postMessage(r._client_id + " " + r._session_state, r._frame_origin);
                        };
                        i(), this._timer = window.setInterval(i, this._interval);
                    }
                }, t.prototype.stop = function t() {
                    this._session_state = null, this._timer && (n.Log.debug("CheckSessionIFrame.stop"), window.clearInterval(this._timer), this._timer = null);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.TokenRevocationClient = void 0;
            var n = r(0), i = r(2), o = r(1);
            function s(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            var a = "access_token", u = "refresh_token";
            e.TokenRevocationClient = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.Global.XMLHttpRequest, a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService;
                    if (s(this, t), !e) throw n.Log.error("TokenRevocationClient.ctor: No settings provided"), new Error("No settings provided.");
                    this._settings = e, this._XMLHttpRequestCtor = r, this._metadataService = new a(this._settings);
                }
                return t.prototype.revoke = function t(e, r) {
                    var i = this, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "access_token";
                    if (!e) throw n.Log.error("TokenRevocationClient.revoke: No token provided"), new Error("No token provided.");
                    if (o !== a && o != u) throw n.Log.error("TokenRevocationClient.revoke: Invalid token type"), new Error("Invalid token type.");
                    return this._metadataService.getRevocationEndpoint().then(function(t) {
                        if (t) {
                            n.Log.debug("TokenRevocationClient.revoke: Revoking " + o);
                            var s = i._settings.client_id, a = i._settings.client_secret;
                            return i._revoke(t, s, a, e, o);
                        }
                        if (r) throw n.Log.error("TokenRevocationClient.revoke: Revocation not supported"), new Error("Revocation not supported");
                    });
                }, t.prototype._revoke = function t(e, r, i, o, s) {
                    var a = this;
                    return new Promise(function(t, u) {
                        var c = new a._XMLHttpRequestCtor;
                        c.open("POST", e), c.onload = function() {
                            n.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", c.status), 200 === c.status ? t() : u(Error(c.statusText + " (" + c.status + ")"));
                        }, c.onerror = function() {
                            n.Log.debug("TokenRevocationClient.revoke: Network Error."), u("Network Error");
                        };
                        var h = "client_id=" + encodeURIComponent(r);
                        i && (h += "&client_secret=" + encodeURIComponent(i)), h += "&token_type_hint=" + encodeURIComponent(s), h += "&token=" + encodeURIComponent(o), c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), c.send(h);
                    });
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.CordovaPopupWindow = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0);
            e.CordovaPopupWindow = function() {
                function t(e) {
                    var r = this;
                    !function n(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._promise = new Promise(function(t, e) {
                        r._resolve = t, r._reject = e;
                    }), this.features = e.popupWindowFeatures || "location=no,toolbar=no,zoom=no", this.target = e.popupWindowTarget || "_blank", this.redirect_uri = e.startUrl, i.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
                }
                return t.prototype._isInAppBrowserInstalled = function t(e) {
                    return [
                        "cordova-plugin-inappbrowser",
                        "cordova-plugin-inappbrowser.inappbrowser",
                        "org.apache.cordova.inappbrowser"
                    ].some(function(t) {
                        return e.hasOwnProperty(t);
                    });
                }, t.prototype.navigate = function t(e) {
                    if (e && e.url) {
                        if (!window.cordova) return this._error("cordova is undefined");
                        var r = window.cordova.require("cordova/plugin_list").metadata;
                        if (!1 === this._isInAppBrowserInstalled(r)) return this._error("InAppBrowser plugin not found");
                        this._popup = cordova.InAppBrowser.open(e.url, this.target, this.features), this._popup ? (i.Log.debug("CordovaPopupWindow.navigate: popup successfully created"), this._exitCallbackEvent = this._exitCallback.bind(this), this._loadStartCallbackEvent = this._loadStartCallback.bind(this), this._popup.addEventListener("exit", this._exitCallbackEvent, !1), this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, !1)) : this._error("Error opening popup window");
                    } else this._error("No url provided");
                    return this.promise;
                }, t.prototype._loadStartCallback = function t(e) {
                    0 === e.url.indexOf(this.redirect_uri) && this._success({
                        url: e.url
                    });
                }, t.prototype._exitCallback = function t(e) {
                    this._error(e);
                }, t.prototype._success = function t(e) {
                    this._cleanup(), i.Log.debug("CordovaPopupWindow: Successful response from cordova popup window"), this._resolve(e);
                }, t.prototype._error = function t(e) {
                    this._cleanup(), i.Log.error(e), this._reject(new Error(e));
                }, t.prototype.close = function t() {
                    this._cleanup();
                }, t.prototype._cleanup = function t() {
                    this._popup && (i.Log.debug("CordovaPopupWindow: cleaning up popup"), this._popup.removeEventListener("exit", this._exitCallbackEvent, !1), this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, !1), this._popup.close()), this._popup = null;
                }, n(t, [
                    {
                        key: "promise",
                        get: function t() {
                            return this._promise;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = r(0), i = r(10), o = r(5), s = r(6), a = r(37), u = r(38), c = r(16), h = r(2), l = r(48), f = r(49), g = r(19), d = r(20), p = r(18), v = r(1), y = r(15), m = r(50);
            e.default = {
                Version: m.Version,
                Log: n.Log,
                OidcClient: i.OidcClient,
                OidcClientSettings: o.OidcClientSettings,
                WebStorageStateStore: s.WebStorageStateStore,
                InMemoryWebStorage: a.InMemoryWebStorage,
                UserManager: u.UserManager,
                AccessTokenEvents: c.AccessTokenEvents,
                MetadataService: h.MetadataService,
                CordovaPopupNavigator: l.CordovaPopupNavigator,
                CordovaIFrameNavigator: f.CordovaIFrameNavigator,
                CheckSessionIFrame: g.CheckSessionIFrame,
                TokenRevocationClient: d.TokenRevocationClient,
                SessionMonitor: p.SessionMonitor,
                Global: v.Global,
                User: y.User
            }, t.exports = e.default;
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            e.ClockService = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.getEpochTime = function t() {
                    return Promise.resolve(Date.now() / 1e3 | 0);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.ResponseValidator = void 0;
            var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
            }, i = r(0), o = r(2), s = r(25), a = r(11), u = r(12), c = r(4);
            function h(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            var l = [
                "nonce",
                "at_hash",
                "iat",
                "nbf",
                "exp",
                "aud",
                "iss",
                "c_hash"
            ];
            e.ResponseValidator = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.MetadataService, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.UserInfoService, u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : c.JoseUtil, l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : a.TokenClient;
                    if (h(this, t), !e) throw i.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator"), new Error("settings");
                    this._settings = e, this._metadataService = new r(this._settings), this._userInfoService = new n(this._settings), this._joseUtil = u, this._tokenClient = new l(this._settings);
                }
                return t.prototype.validateSigninResponse = function t(e, r) {
                    var n = this;
                    return i.Log.debug("ResponseValidator.validateSigninResponse"), this._processSigninParams(e, r).then(function(t) {
                        return i.Log.debug("ResponseValidator.validateSigninResponse: state processed"), n._validateTokens(e, t).then(function(t) {
                            return i.Log.debug("ResponseValidator.validateSigninResponse: tokens validated"), n._processClaims(e, t).then(function(t) {
                                return i.Log.debug("ResponseValidator.validateSigninResponse: claims processed"), t;
                            });
                        });
                    });
                }, t.prototype.validateSignoutResponse = function t(e, r) {
                    return e.id !== r.state ? (i.Log.error("ResponseValidator.validateSignoutResponse: State does not match"), Promise.reject(new Error("State does not match"))) : (i.Log.debug("ResponseValidator.validateSignoutResponse: state validated"), r.state = e.data, r.error ? (i.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", r.error), Promise.reject(new u.ErrorResponse(r))) : Promise.resolve(r));
                }, t.prototype._processSigninParams = function t(e, r) {
                    if (e.id !== r.state) return i.Log.error("ResponseValidator._processSigninParams: State does not match"), Promise.reject(new Error("State does not match"));
                    if (!e.client_id) return i.Log.error("ResponseValidator._processSigninParams: No client_id on state"), Promise.reject(new Error("No client_id on state"));
                    if (!e.authority) return i.Log.error("ResponseValidator._processSigninParams: No authority on state"), Promise.reject(new Error("No authority on state"));
                    if (this._settings.authority) {
                        if (this._settings.authority && this._settings.authority !== e.authority) return i.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state"), Promise.reject(new Error("authority mismatch on settings vs. signin state"));
                    } else this._settings.authority = e.authority;
                    if (this._settings.client_id) {
                        if (this._settings.client_id && this._settings.client_id !== e.client_id) return i.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state"), Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
                    } else this._settings.client_id = e.client_id;
                    return i.Log.debug("ResponseValidator._processSigninParams: state validated"), r.state = e.data, r.error ? (i.Log.warn("ResponseValidator._processSigninParams: Response was error", r.error), Promise.reject(new u.ErrorResponse(r))) : e.nonce && !r.id_token ? (i.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response"), Promise.reject(new Error("No id_token in response"))) : !e.nonce && r.id_token ? (i.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response"), Promise.reject(new Error("Unexpected id_token in response"))) : e.code_verifier && !r.code ? (i.Log.error("ResponseValidator._processSigninParams: Expecting code in response"), Promise.reject(new Error("No code in response"))) : !e.code_verifier && r.code ? (i.Log.error("ResponseValidator._processSigninParams: Not expecting code in response"), Promise.reject(new Error("Unexpected code in response"))) : (r.scope || (r.scope = e.scope), Promise.resolve(r));
                }, t.prototype._processClaims = function t(e, r) {
                    var n = this;
                    if (r.isOpenIdConnect) {
                        if (i.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims"), r.profile = this._filterProtocolClaims(r.profile), !0 !== e.skipUserInfo && this._settings.loadUserInfo && r.access_token) return i.Log.debug("ResponseValidator._processClaims: loading user info"), this._userInfoService.getClaims(r.access_token).then(function(t) {
                            return i.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint"), t.sub !== r.profile.sub ? (i.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token"), Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"))) : (r.profile = n._mergeClaims(r.profile, t), i.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", r.profile), r);
                        });
                        i.Log.debug("ResponseValidator._processClaims: not loading user info");
                    } else i.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
                    return Promise.resolve(r);
                }, t.prototype._mergeClaims = function t(e, r) {
                    var i = Object.assign({}, e);
                    for(var o in r){
                        var s = r[o];
                        Array.isArray(s) || (s = [
                            s
                        ]);
                        for(var a = 0; a < s.length; a++){
                            var u = s[a];
                            i[o] ? Array.isArray(i[o]) ? i[o].indexOf(u) < 0 && i[o].push(u) : i[o] !== u && ("object" === (void 0 === u ? "undefined" : n(u)) && this._settings.mergeClaims ? i[o] = this._mergeClaims(i[o], u) : i[o] = [
                                i[o],
                                u
                            ]) : i[o] = u;
                        }
                    }
                    return i;
                }, t.prototype._filterProtocolClaims = function t(e) {
                    i.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", e);
                    var r = Object.assign({}, e);
                    return this._settings._filterProtocolClaims ? (l.forEach(function(t) {
                        delete r[t];
                    }), i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", r)) : i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered"), r;
                }, t.prototype._validateTokens = function t(e, r) {
                    return r.code ? (i.Log.debug("ResponseValidator._validateTokens: Validating code"), this._processCode(e, r)) : r.id_token ? r.access_token ? (i.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token"), this._validateIdTokenAndAccessToken(e, r)) : (i.Log.debug("ResponseValidator._validateTokens: Validating id_token"), this._validateIdToken(e, r)) : (i.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate"), Promise.resolve(r));
                }, t.prototype._processCode = function t(e, r) {
                    var o = this, s = {
                        client_id: e.client_id,
                        client_secret: e.client_secret,
                        code: r.code,
                        redirect_uri: e.redirect_uri,
                        code_verifier: e.code_verifier
                    };
                    return e.extraTokenParams && "object" === n(e.extraTokenParams) && Object.assign(s, e.extraTokenParams), this._tokenClient.exchangeCode(s).then(function(t) {
                        for(var n in t)r[n] = t[n];
                        return r.id_token ? (i.Log.debug("ResponseValidator._processCode: token response successful, processing id_token"), o._validateIdTokenAttributes(e, r)) : (i.Log.debug("ResponseValidator._processCode: token response successful, returning response"), r);
                    });
                }, t.prototype._validateIdTokenAttributes = function t(e, r) {
                    var n = this;
                    return this._metadataService.getIssuer().then(function(t) {
                        var o = e.client_id, s = n._settings.clockSkew;
                        return i.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ", s), n._settings.getEpochTime().then(function(a) {
                            return n._joseUtil.validateJwtAttributes(r.id_token, t, o, s, a).then(function(t) {
                                return e.nonce && e.nonce !== t.nonce ? (i.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token"), Promise.reject(new Error("Invalid nonce in id_token"))) : t.sub ? (r.profile = t, r) : (i.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token"), Promise.reject(new Error("No sub present in id_token")));
                            });
                        });
                    });
                }, t.prototype._validateIdTokenAndAccessToken = function t(e, r) {
                    var n = this;
                    return this._validateIdToken(e, r).then(function(t) {
                        return n._validateAccessToken(t);
                    });
                }, t.prototype._getSigningKeyForJwt = function t(e) {
                    var r = this;
                    return this._metadataService.getSigningKeys().then(function(t) {
                        var n = e.header.kid;
                        if (!t) return i.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata"), Promise.reject(new Error("No signing keys from metadata"));
                        i.Log.debug("ResponseValidator._validateIdToken: Received signing keys");
                        var o = void 0;
                        if (n) o = t.filter(function(t) {
                            return t.kid === n;
                        })[0];
                        else {
                            if ((t = r._filterByAlg(t, e.header.alg)).length > 1) return i.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata"), Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                            o = t[0];
                        }
                        return Promise.resolve(o);
                    });
                }, t.prototype._getSigningKeyForJwtWithSingleRetry = function t(e) {
                    var r = this;
                    return this._getSigningKeyForJwt(e).then(function(t) {
                        return t ? Promise.resolve(t) : (r._metadataService.resetSigningKeys(), r._getSigningKeyForJwt(e));
                    });
                }, t.prototype._validateIdToken = function t(e, r) {
                    var n = this;
                    if (!e.nonce) return i.Log.error("ResponseValidator._validateIdToken: No nonce on state"), Promise.reject(new Error("No nonce on state"));
                    var o = this._joseUtil.parseJwt(r.id_token);
                    return o && o.header && o.payload ? e.nonce !== o.payload.nonce ? (i.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token"), Promise.reject(new Error("Invalid nonce in id_token"))) : this._metadataService.getIssuer().then(function(t) {
                        return i.Log.debug("ResponseValidator._validateIdToken: Received issuer"), n._getSigningKeyForJwtWithSingleRetry(o).then(function(s) {
                            if (!s) return i.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys"), Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                            var a = e.client_id, u = n._settings.clockSkew;
                            return i.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", u), n._joseUtil.validateJwt(r.id_token, s, t, a, u).then(function() {
                                return i.Log.debug("ResponseValidator._validateIdToken: JWT validation successful"), o.payload.sub ? (r.profile = o.payload, r) : (i.Log.error("ResponseValidator._validateIdToken: No sub present in id_token"), Promise.reject(new Error("No sub present in id_token")));
                            });
                        });
                    }) : (i.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", o), Promise.reject(new Error("Failed to parse id_token")));
                }, t.prototype._filterByAlg = function t(e, r) {
                    var n = null;
                    if (r.startsWith("RS")) n = "RSA";
                    else if (r.startsWith("PS")) n = "PS";
                    else {
                        if (!r.startsWith("ES")) return i.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", r), [];
                        n = "EC";
                    }
                    return i.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", n), e = e.filter(function(t) {
                        return t.kty === n;
                    }), i.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", n, e.length), e;
                }, t.prototype._validateAccessToken = function t(e) {
                    if (!e.profile) return i.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token"), Promise.reject(new Error("No profile loaded from id_token"));
                    if (!e.profile.at_hash) return i.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token"), Promise.reject(new Error("No at_hash in id_token"));
                    if (!e.id_token) return i.Log.error("ResponseValidator._validateAccessToken: No id_token"), Promise.reject(new Error("No id_token"));
                    var r = this._joseUtil.parseJwt(e.id_token);
                    if (!r || !r.header) return i.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", r), Promise.reject(new Error("Failed to parse id_token"));
                    var n = r.header.alg;
                    if (!n || 5 !== n.length) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n), Promise.reject(new Error("Unsupported alg: " + n));
                    var o = n.substr(2, 3);
                    if (!o) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n, o), Promise.reject(new Error("Unsupported alg: " + n));
                    if (256 !== (o = parseInt(o)) && 384 !== o && 512 !== o) return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", n, o), Promise.reject(new Error("Unsupported alg: " + n));
                    var s = "sha" + o, a = this._joseUtil.hashString(e.access_token, s);
                    if (!a) return i.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", s), Promise.reject(new Error("Failed to validate at_hash"));
                    var u = a.substr(0, a.length / 2), c = this._joseUtil.hexToBase64Url(u);
                    return c !== e.profile.at_hash ? (i.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", c, e.profile.at_hash), Promise.reject(new Error("Failed to validate at_hash"))) : (i.Log.debug("ResponseValidator._validateAccessToken: success"), Promise.resolve(e));
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.UserInfoService = void 0;
            var n = r(7), i = r(2), o = r(0), s = r(4);
            function a(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.UserInfoService = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.JsonService, u = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.MetadataService, c = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : s.JoseUtil;
                    if (a(this, t), !e) throw o.Log.error("UserInfoService.ctor: No settings passed"), new Error("settings");
                    this._settings = e, this._jsonService = new r(void 0, void 0, this._getClaimsFromJwt.bind(this)), this._metadataService = new u(this._settings), this._joseUtil = c;
                }
                return t.prototype.getClaims = function t(e) {
                    var r = this;
                    return e ? this._metadataService.getUserInfoEndpoint().then(function(t) {
                        return o.Log.debug("UserInfoService.getClaims: received userinfo url", t), r._jsonService.getJson(t, e).then(function(t) {
                            return o.Log.debug("UserInfoService.getClaims: claims received", t), t;
                        });
                    }) : (o.Log.error("UserInfoService.getClaims: No token passed"), Promise.reject(new Error("A token is required")));
                }, t.prototype._getClaimsFromJwt = function t(e) {
                    var r = this;
                    try {
                        var n = this._joseUtil.parseJwt(e.responseText);
                        if (!n || !n.header || !n.payload) return o.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT", n), Promise.reject(new Error("Failed to parse id_token"));
                        var i = n.header.kid, s = void 0;
                        switch(this._settings.userInfoJwtIssuer){
                            case "OP":
                                s = this._metadataService.getIssuer();
                                break;
                            case "ANY":
                                s = Promise.resolve(n.payload.iss);
                                break;
                            default:
                                s = Promise.resolve(this._settings.userInfoJwtIssuer);
                        }
                        return s.then(function(t) {
                            return o.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:" + t), r._metadataService.getSigningKeys().then(function(s) {
                                if (!s) return o.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata"), Promise.reject(new Error("No signing keys from metadata"));
                                o.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");
                                var a = void 0;
                                if (i) a = s.filter(function(t) {
                                    return t.kid === i;
                                })[0];
                                else {
                                    if ((s = r._filterByAlg(s, n.header.alg)).length > 1) return o.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata"), Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                                    a = s[0];
                                }
                                if (!a) return o.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys"), Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                                var u = r._settings.client_id, c = r._settings.clockSkew;
                                return o.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ", c), r._joseUtil.validateJwt(e.responseText, a, t, u, c, void 0, !0).then(function() {
                                    return o.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful"), n.payload;
                                });
                            });
                        });
                    } catch (t) {
                        return o.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response", t.message), void reject(t);
                    }
                }, t.prototype._filterByAlg = function t(e, r) {
                    var n = null;
                    if (r.startsWith("RS")) n = "RSA";
                    else if (r.startsWith("PS")) n = "PS";
                    else {
                        if (!r.startsWith("ES")) return o.Log.debug("UserInfoService._filterByAlg: alg not supported: ", r), [];
                        n = "EC";
                    }
                    return o.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ", n), e = e.filter(function(t) {
                        return t.kty === n;
                    }), o.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ", n, e.length), e;
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.AllowedSigningAlgs = e.b64tohex = e.hextob64u = e.crypto = e.X509 = e.KeyUtil = e.jws = void 0;
            var n = r(27);
            e.jws = n.jws, e.KeyUtil = n.KEYUTIL, e.X509 = n.X509, e.crypto = n.crypto, e.hextob64u = n.hextob64u, e.b64tohex = n.b64tohex, e.AllowedSigningAlgs = [
                "RS256",
                "RS384",
                "RS512",
                "PS256",
                "PS384",
                "PS512",
                "ES256",
                "ES384",
                "ES512"
            ];
        },
        function(t, e, r) {
            "use strict";
            (function(t) {
                Object.defineProperty(e, "__esModule", {
                    value: !0
                });
                var r, n, i, o, s, a, u, c, h, l, f, g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t;
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                }, d = {
                    userAgent: !1
                }, p = {}, v = v || (r = Math, i = (n = {}).lib = {}, o = i.Base = function() {
                    function t() {}
                    return {
                        extend: function e(r) {
                            t.prototype = this;
                            var n = new t;
                            return r && n.mixIn(r), n.hasOwnProperty("init") || (n.init = function() {
                                n.$super.init.apply(this, arguments);
                            }), n.init.prototype = n, n.$super = this, n;
                        },
                        create: function t() {
                            var e = this.extend();
                            return e.init.apply(e, arguments), e;
                        },
                        init: function t() {},
                        mixIn: function t(e) {
                            for(var r in e)e.hasOwnProperty(r) && (this[r] = e[r]);
                            e.hasOwnProperty("toString") && (this.toString = e.toString);
                        },
                        clone: function t() {
                            return this.init.prototype.extend(this);
                        }
                    };
                }(), s = i.WordArray = o.extend({
                    init: function t(e, r) {
                        e = this.words = e || [], this.sigBytes = null != r ? r : 4 * e.length;
                    },
                    toString: function t(e) {
                        return (e || u).stringify(this);
                    },
                    concat: function t(e) {
                        var r = this.words, n = e.words, i = this.sigBytes, o = e.sigBytes;
                        if (this.clamp(), i % 4) for(var s = 0; s < o; s++){
                            var a = n[s >>> 2] >>> 24 - s % 4 * 8 & 255;
                            r[i + s >>> 2] |= a << 24 - (i + s) % 4 * 8;
                        }
                        else for(s = 0; s < o; s += 4)r[i + s >>> 2] = n[s >>> 2];
                        return this.sigBytes += o, this;
                    },
                    clamp: function t() {
                        var e = this.words, n = this.sigBytes;
                        e[n >>> 2] &= 4294967295 << 32 - n % 4 * 8, e.length = r.ceil(n / 4);
                    },
                    clone: function t() {
                        var e = o.clone.call(this);
                        return e.words = this.words.slice(0), e;
                    },
                    random: function t(e) {
                        for(var n = [], i = 0; i < e; i += 4)n.push(4294967296 * r.random() | 0);
                        return new s.init(n, e);
                    }
                }), a = n.enc = {}, u = a.Hex = {
                    stringify: function t(e) {
                        for(var r = e.words, n = e.sigBytes, i = [], o = 0; o < n; o++){
                            var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;
                            i.push((s >>> 4).toString(16)), i.push((15 & s).toString(16));
                        }
                        return i.join("");
                    },
                    parse: function t(e) {
                        for(var r = e.length, n = [], i = 0; i < r; i += 2)n[i >>> 3] |= parseInt(e.substr(i, 2), 16) << 24 - i % 8 * 4;
                        return new s.init(n, r / 2);
                    }
                }, c = a.Latin1 = {
                    stringify: function t(e) {
                        for(var r = e.words, n = e.sigBytes, i = [], o = 0; o < n; o++){
                            var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;
                            i.push(String.fromCharCode(s));
                        }
                        return i.join("");
                    },
                    parse: function t(e) {
                        for(var r = e.length, n = [], i = 0; i < r; i++)n[i >>> 2] |= (255 & e.charCodeAt(i)) << 24 - i % 4 * 8;
                        return new s.init(n, r);
                    }
                }, h = a.Utf8 = {
                    stringify: function t(e) {
                        try {
                            return decodeURIComponent(escape(c.stringify(e)));
                        } catch (t) {
                            throw new Error("Malformed UTF-8 data");
                        }
                    },
                    parse: function t(e) {
                        return c.parse(unescape(encodeURIComponent(e)));
                    }
                }, l = i.BufferedBlockAlgorithm = o.extend({
                    reset: function t() {
                        this._data = new s.init, this._nDataBytes = 0;
                    },
                    _append: function t(e) {
                        "string" == typeof e && (e = h.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes;
                    },
                    _process: function t(e) {
                        var n = this._data, i = n.words, o = n.sigBytes, a = this.blockSize, u = o / (4 * a), c = (u = e ? r.ceil(u) : r.max((0 | u) - this._minBufferSize, 0)) * a, h = r.min(4 * c, o);
                        if (c) {
                            for(var l = 0; l < c; l += a)this._doProcessBlock(i, l);
                            var f = i.splice(0, c);
                            n.sigBytes -= h;
                        }
                        return new s.init(f, h);
                    },
                    clone: function t() {
                        var e = o.clone.call(this);
                        return e._data = this._data.clone(), e;
                    },
                    _minBufferSize: 0
                }), i.Hasher = l.extend({
                    cfg: o.extend(),
                    init: function t(e) {
                        this.cfg = this.cfg.extend(e), this.reset();
                    },
                    reset: function t() {
                        l.reset.call(this), this._doReset();
                    },
                    update: function t(e) {
                        return this._append(e), this._process(), this;
                    },
                    finalize: function t(e) {
                        return e && this._append(e), this._doFinalize();
                    },
                    blockSize: 16,
                    _createHelper: function t(e) {
                        return function(t, r) {
                            return new e.init(r).finalize(t);
                        };
                    },
                    _createHmacHelper: function t(e) {
                        return function(t, r) {
                            return new f.HMAC.init(e, r).finalize(t);
                        };
                    }
                }), f = n.algo = {}, n);
                !function(t) {
                    var e, r = (e = v).lib, n = r.Base, i = r.WordArray;
                    (e = e.x64 = {}).Word = n.extend({
                        init: function t(e, r) {
                            this.high = e, this.low = r;
                        }
                    }), e.WordArray = n.extend({
                        init: function t(e, r) {
                            e = this.words = e || [], this.sigBytes = null != r ? r : 8 * e.length;
                        },
                        toX32: function t() {
                            for(var e = this.words, r = e.length, n = [], o = 0; o < r; o++){
                                var s = e[o];
                                n.push(s.high), n.push(s.low);
                            }
                            return i.create(n, this.sigBytes);
                        },
                        clone: function t() {
                            for(var e = n.clone.call(this), r = e.words = this.words.slice(0), i = r.length, o = 0; o < i; o++)r[o] = r[o].clone();
                            return e;
                        }
                    });
                }(), function() {
                    var t = v, e = t.lib.WordArray;
                    t.enc.Base64 = {
                        stringify: function t(e) {
                            var r = e.words, n = e.sigBytes, i = this._map;
                            e.clamp(), e = [];
                            for(var o = 0; o < n; o += 3)for(var s = (r[o >>> 2] >>> 24 - o % 4 * 8 & 255) << 16 | (r[o + 1 >>> 2] >>> 24 - (o + 1) % 4 * 8 & 255) << 8 | r[o + 2 >>> 2] >>> 24 - (o + 2) % 4 * 8 & 255, a = 0; 4 > a && o + .75 * a < n; a++)e.push(i.charAt(s >>> 6 * (3 - a) & 63));
                            if (r = i.charAt(64)) for(; e.length % 4;)e.push(r);
                            return e.join("");
                        },
                        parse: function t(r) {
                            var n = r.length, i = this._map;
                            (o = i.charAt(64)) && -1 != (o = r.indexOf(o)) && (n = o);
                            for(var o = [], s = 0, a = 0; a < n; a++)if (a % 4) {
                                var u = i.indexOf(r.charAt(a - 1)) << a % 4 * 2, c = i.indexOf(r.charAt(a)) >>> 6 - a % 4 * 2;
                                o[s >>> 2] |= (u | c) << 24 - s % 4 * 8, s++;
                            }
                            return e.create(o, s);
                        },
                        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
                    };
                }(), function(t) {
                    for(var e = v, r = (i = e.lib).WordArray, n = i.Hasher, i = e.algo, o = [], s = [], a = function t(e) {
                        return 4294967296 * (e - (0 | e)) | 0;
                    }, u = 2, c = 0; 64 > c;){
                        var h;
                        t: {
                            h = u;
                            for(var l = t.sqrt(h), f = 2; f <= l; f++)if (!(h % f)) {
                                h = !1;
                                break t;
                            }
                            h = !0;
                        }
                        h && (8 > c && (o[c] = a(t.pow(u, .5))), s[c] = a(t.pow(u, 1 / 3)), c++), u++;
                    }
                    var g = [];
                    i = i.SHA256 = n.extend({
                        _doReset: function t() {
                            this._hash = new r.init(o.slice(0));
                        },
                        _doProcessBlock: function t(e, r) {
                            for(var n = this._hash.words, i = n[0], o = n[1], a = n[2], u = n[3], c = n[4], h = n[5], l = n[6], f = n[7], d = 0; 64 > d; d++){
                                if (16 > d) g[d] = 0 | e[r + d];
                                else {
                                    var p = g[d - 15], v = g[d - 2];
                                    g[d] = ((p << 25 | p >>> 7) ^ (p << 14 | p >>> 18) ^ p >>> 3) + g[d - 7] + ((v << 15 | v >>> 17) ^ (v << 13 | v >>> 19) ^ v >>> 10) + g[d - 16];
                                }
                                p = f + ((c << 26 | c >>> 6) ^ (c << 21 | c >>> 11) ^ (c << 7 | c >>> 25)) + (c & h ^ ~c & l) + s[d] + g[d], v = ((i << 30 | i >>> 2) ^ (i << 19 | i >>> 13) ^ (i << 10 | i >>> 22)) + (i & o ^ i & a ^ o & a), f = l, l = h, h = c, c = u + p | 0, u = a, a = o, o = i, i = p + v | 0;
                            }
                            n[0] = n[0] + i | 0, n[1] = n[1] + o | 0, n[2] = n[2] + a | 0, n[3] = n[3] + u | 0, n[4] = n[4] + c | 0, n[5] = n[5] + h | 0, n[6] = n[6] + l | 0, n[7] = n[7] + f | 0;
                        },
                        _doFinalize: function e() {
                            var r = this._data, n = r.words, i = 8 * this._nDataBytes, o = 8 * r.sigBytes;
                            return n[o >>> 5] |= 128 << 24 - o % 32, n[14 + (o + 64 >>> 9 << 4)] = t.floor(i / 4294967296), n[15 + (o + 64 >>> 9 << 4)] = i, r.sigBytes = 4 * n.length, this._process(), this._hash;
                        },
                        clone: function t() {
                            var e = n.clone.call(this);
                            return e._hash = this._hash.clone(), e;
                        }
                    });
                    e.SHA256 = n._createHelper(i), e.HmacSHA256 = n._createHmacHelper(i);
                }(Math), function() {
                    function t() {
                        return n.create.apply(n, arguments);
                    }
                    for(var e = v, r = e.lib.Hasher, n = (o = e.x64).Word, i = o.WordArray, o = e.algo, s = [
                        t(1116352408, 3609767458),
                        t(1899447441, 602891725),
                        t(3049323471, 3964484399),
                        t(3921009573, 2173295548),
                        t(961987163, 4081628472),
                        t(1508970993, 3053834265),
                        t(2453635748, 2937671579),
                        t(2870763221, 3664609560),
                        t(3624381080, 2734883394),
                        t(310598401, 1164996542),
                        t(607225278, 1323610764),
                        t(1426881987, 3590304994),
                        t(1925078388, 4068182383),
                        t(2162078206, 991336113),
                        t(2614888103, 633803317),
                        t(3248222580, 3479774868),
                        t(3835390401, 2666613458),
                        t(4022224774, 944711139),
                        t(264347078, 2341262773),
                        t(604807628, 2007800933),
                        t(770255983, 1495990901),
                        t(1249150122, 1856431235),
                        t(1555081692, 3175218132),
                        t(1996064986, 2198950837),
                        t(2554220882, 3999719339),
                        t(2821834349, 766784016),
                        t(2952996808, 2566594879),
                        t(3210313671, 3203337956),
                        t(3336571891, 1034457026),
                        t(3584528711, 2466948901),
                        t(113926993, 3758326383),
                        t(338241895, 168717936),
                        t(666307205, 1188179964),
                        t(773529912, 1546045734),
                        t(1294757372, 1522805485),
                        t(1396182291, 2643833823),
                        t(1695183700, 2343527390),
                        t(1986661051, 1014477480),
                        t(2177026350, 1206759142),
                        t(2456956037, 344077627),
                        t(2730485921, 1290863460),
                        t(2820302411, 3158454273),
                        t(3259730800, 3505952657),
                        t(3345764771, 106217008),
                        t(3516065817, 3606008344),
                        t(3600352804, 1432725776),
                        t(4094571909, 1467031594),
                        t(275423344, 851169720),
                        t(430227734, 3100823752),
                        t(506948616, 1363258195),
                        t(659060556, 3750685593),
                        t(883997877, 3785050280),
                        t(958139571, 3318307427),
                        t(1322822218, 3812723403),
                        t(1537002063, 2003034995),
                        t(1747873779, 3602036899),
                        t(1955562222, 1575990012),
                        t(2024104815, 1125592928),
                        t(2227730452, 2716904306),
                        t(2361852424, 442776044),
                        t(2428436474, 593698344),
                        t(2756734187, 3733110249),
                        t(3204031479, 2999351573),
                        t(3329325298, 3815920427),
                        t(3391569614, 3928383900),
                        t(3515267271, 566280711),
                        t(3940187606, 3454069534),
                        t(4118630271, 4000239992),
                        t(116418474, 1914138554),
                        t(174292421, 2731055270),
                        t(289380356, 3203993006),
                        t(460393269, 320620315),
                        t(685471733, 587496836),
                        t(852142971, 1086792851),
                        t(1017036298, 365543100),
                        t(1126000580, 2618297676),
                        t(1288033470, 3409855158),
                        t(1501505948, 4234509866),
                        t(1607167915, 987167468),
                        t(1816402316, 1246189591)
                    ], a = [], u = 0; 80 > u; u++)a[u] = t();
                    o = o.SHA512 = r.extend({
                        _doReset: function t() {
                            this._hash = new i.init([
                                new n.init(1779033703, 4089235720),
                                new n.init(3144134277, 2227873595),
                                new n.init(1013904242, 4271175723),
                                new n.init(2773480762, 1595750129),
                                new n.init(1359893119, 2917565137),
                                new n.init(2600822924, 725511199),
                                new n.init(528734635, 4215389547),
                                new n.init(1541459225, 327033209)
                            ]);
                        },
                        _doProcessBlock: function t(e, r) {
                            for(var n = (f = this._hash.words)[0], i = f[1], o = f[2], u = f[3], c = f[4], h = f[5], l = f[6], f = f[7], g = n.high, d = n.low, p = i.high, v = i.low, y = o.high, m = o.low, _ = u.high, S = u.low, b = c.high, w = c.low, F = h.high, E = h.low, x = l.high, A = l.low, k = f.high, P = f.low, C = g, T = d, R = p, I = v, D = y, L = m, N = _, U = S, B = b, O = w, j = F, M = E, H = x, V = A, K = k, q = P, J = 0; 80 > J; J++){
                                var W = a[J];
                                if (16 > J) var z = W.high = 0 | e[r + 2 * J], Y = W.low = 0 | e[r + 2 * J + 1];
                                else {
                                    z = ((Y = (z = a[J - 15]).high) >>> 1 | (G = z.low) << 31) ^ (Y >>> 8 | G << 24) ^ Y >>> 7;
                                    var G = (G >>> 1 | Y << 31) ^ (G >>> 8 | Y << 24) ^ (G >>> 7 | Y << 25), X = ((Y = (X = a[J - 2]).high) >>> 19 | ($ = X.low) << 13) ^ (Y << 3 | $ >>> 29) ^ Y >>> 6, $ = ($ >>> 19 | Y << 13) ^ ($ << 3 | Y >>> 29) ^ ($ >>> 6 | Y << 26), Q = (Y = a[J - 7]).high, Z = (tt = a[J - 16]).high, tt = tt.low;
                                    z = (z = (z = z + Q + ((Y = G + Y.low) >>> 0 < G >>> 0 ? 1 : 0)) + X + ((Y = Y + $) >>> 0 < $ >>> 0 ? 1 : 0)) + Z + ((Y = Y + tt) >>> 0 < tt >>> 0 ? 1 : 0);
                                    W.high = z, W.low = Y;
                                }
                                Q = B & j ^ ~B & H, tt = O & M ^ ~O & V, W = C & R ^ C & D ^ R & D;
                                var et = T & I ^ T & L ^ I & L, rt = (G = (C >>> 28 | T << 4) ^ (C << 30 | T >>> 2) ^ (C << 25 | T >>> 7), X = (T >>> 28 | C << 4) ^ (T << 30 | C >>> 2) ^ (T << 25 | C >>> 7), ($ = s[J]).high), nt = $.low;
                                Z = K + ((B >>> 14 | O << 18) ^ (B >>> 18 | O << 14) ^ (B << 23 | O >>> 9)) + (($ = q + ((O >>> 14 | B << 18) ^ (O >>> 18 | B << 14) ^ (O << 23 | B >>> 9))) >>> 0 < q >>> 0 ? 1 : 0), K = H, q = V, H = j, V = M, j = B, M = O, B = N + (Z = (Z = (Z = Z + Q + (($ = $ + tt) >>> 0 < tt >>> 0 ? 1 : 0)) + rt + (($ = $ + nt) >>> 0 < nt >>> 0 ? 1 : 0)) + z + (($ = $ + Y) >>> 0 < Y >>> 0 ? 1 : 0)) + ((O = U + $ | 0) >>> 0 < U >>> 0 ? 1 : 0) | 0, N = D, U = L, D = R, L = I, R = C, I = T, C = Z + (W = G + W + ((Y = X + et) >>> 0 < X >>> 0 ? 1 : 0)) + ((T = $ + Y | 0) >>> 0 < $ >>> 0 ? 1 : 0) | 0;
                            }
                            d = n.low = d + T, n.high = g + C + (d >>> 0 < T >>> 0 ? 1 : 0), v = i.low = v + I, i.high = p + R + (v >>> 0 < I >>> 0 ? 1 : 0), m = o.low = m + L, o.high = y + D + (m >>> 0 < L >>> 0 ? 1 : 0), S = u.low = S + U, u.high = _ + N + (S >>> 0 < U >>> 0 ? 1 : 0), w = c.low = w + O, c.high = b + B + (w >>> 0 < O >>> 0 ? 1 : 0), E = h.low = E + M, h.high = F + j + (E >>> 0 < M >>> 0 ? 1 : 0), A = l.low = A + V, l.high = x + H + (A >>> 0 < V >>> 0 ? 1 : 0), P = f.low = P + q, f.high = k + K + (P >>> 0 < q >>> 0 ? 1 : 0);
                        },
                        _doFinalize: function t() {
                            var e = this._data, r = e.words, n = 8 * this._nDataBytes, i = 8 * e.sigBytes;
                            return r[i >>> 5] |= 128 << 24 - i % 32, r[30 + (i + 128 >>> 10 << 5)] = Math.floor(n / 4294967296), r[31 + (i + 128 >>> 10 << 5)] = n, e.sigBytes = 4 * r.length, this._process(), this._hash.toX32();
                        },
                        clone: function t() {
                            var e = r.clone.call(this);
                            return e._hash = this._hash.clone(), e;
                        },
                        blockSize: 32
                    }), e.SHA512 = r._createHelper(o), e.HmacSHA512 = r._createHmacHelper(o);
                }(), function() {
                    var t = v, e = (i = t.x64).Word, r = i.WordArray, n = (i = t.algo).SHA512, i = i.SHA384 = n.extend({
                        _doReset: function t() {
                            this._hash = new r.init([
                                new e.init(3418070365, 3238371032),
                                new e.init(1654270250, 914150663),
                                new e.init(2438529370, 812702999),
                                new e.init(355462360, 4144912697),
                                new e.init(1731405415, 4290775857),
                                new e.init(2394180231, 1750603025),
                                new e.init(3675008525, 1694076839),
                                new e.init(1203062813, 3204075428)
                            ]);
                        },
                        _doFinalize: function t() {
                            var e = n._doFinalize.call(this);
                            return e.sigBytes -= 16, e;
                        }
                    });
                    t.SHA384 = n._createHelper(i), t.HmacSHA384 = n._createHmacHelper(i);
                }();
                /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ var y, m = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                function _(t) {
                    var e, r, n = "";
                    for(e = 0; e + 3 <= t.length; e += 3)r = parseInt(t.substring(e, e + 3), 16), n += m.charAt(r >> 6) + m.charAt(63 & r);
                    for(e + 1 == t.length ? (r = parseInt(t.substring(e, e + 1), 16), n += m.charAt(r << 2)) : e + 2 == t.length && (r = parseInt(t.substring(e, e + 2), 16), n += m.charAt(r >> 2) + m.charAt((3 & r) << 4)); (3 & n.length) > 0;)n += "=";
                    return n;
                }
                function S(t) {
                    var e, r, n, i = "", o = 0;
                    for(e = 0; e < t.length && "=" != t.charAt(e); ++e)(n = m.indexOf(t.charAt(e))) < 0 || (0 == o ? (i += T(n >> 2), r = 3 & n, o = 1) : 1 == o ? (i += T(r << 2 | n >> 4), r = 15 & n, o = 2) : 2 == o ? (i += T(r), i += T(n >> 2), r = 3 & n, o = 3) : (i += T(r << 2 | n >> 4), i += T(15 & n), o = 0));
                    return 1 == o && (i += T(r << 2)), i;
                }
                function b(t) {
                    var e, r = S(t), n = new Array;
                    for(e = 0; 2 * e < r.length; ++e)n[e] = parseInt(r.substring(2 * e, 2 * e + 2), 16);
                    return n;
                }
                function w(t, e, r) {
                    null != t && ("number" == typeof t ? this.fromNumber(t, e, r) : null == e && "string" != typeof t ? this.fromString(t, 256) : this.fromString(t, e));
                }
                function F() {
                    return new w(null);
                }
                "Microsoft Internet Explorer" == d.appName ? (w.prototype.am = function E(t, e, r, n, i, o) {
                    for(var s = 32767 & e, a = e >> 15; --o >= 0;){
                        var u = 32767 & this[t], c = this[t++] >> 15, h = a * u + c * s;
                        i = ((u = s * u + ((32767 & h) << 15) + r[n] + (1073741823 & i)) >>> 30) + (h >>> 15) + a * c + (i >>> 30), r[n++] = 1073741823 & u;
                    }
                    return i;
                }, y = 30) : "Netscape" != d.appName ? (w.prototype.am = function x(t, e, r, n, i, o) {
                    for(; --o >= 0;){
                        var s = e * this[t++] + r[n] + i;
                        i = Math.floor(s / 67108864), r[n++] = 67108863 & s;
                    }
                    return i;
                }, y = 26) : (w.prototype.am = function A(t, e, r, n, i, o) {
                    for(var s = 16383 & e, a = e >> 14; --o >= 0;){
                        var u = 16383 & this[t], c = this[t++] >> 14, h = a * u + c * s;
                        i = ((u = s * u + ((16383 & h) << 14) + r[n] + i) >> 28) + (h >> 14) + a * c, r[n++] = 268435455 & u;
                    }
                    return i;
                }, y = 28), w.prototype.DB = y, w.prototype.DM = (1 << y) - 1, w.prototype.DV = 1 << y;
                w.prototype.FV = Math.pow(2, 52), w.prototype.F1 = 52 - y, w.prototype.F2 = 2 * y - 52;
                var k, P, C = new Array;
                for(k = "0".charCodeAt(0), P = 0; P <= 9; ++P)C[k++] = P;
                for(k = "a".charCodeAt(0), P = 10; P < 36; ++P)C[k++] = P;
                for(k = "A".charCodeAt(0), P = 10; P < 36; ++P)C[k++] = P;
                function T(t) {
                    return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t);
                }
                function R(t, e) {
                    var r = C[t.charCodeAt(e)];
                    return null == r ? -1 : r;
                }
                function I(t) {
                    var e = F();
                    return e.fromInt(t), e;
                }
                function D(t) {
                    var e, r = 1;
                    return 0 != (e = t >>> 16) && (t = e, r += 16), 0 != (e = t >> 8) && (t = e, r += 8), 0 != (e = t >> 4) && (t = e, r += 4), 0 != (e = t >> 2) && (t = e, r += 2), 0 != (e = t >> 1) && (t = e, r += 1), r;
                }
                function L(t) {
                    this.m = t;
                }
                function N(t) {
                    this.m = t, this.mp = t.invDigit(), this.mpl = 32767 & this.mp, this.mph = this.mp >> 15, this.um = (1 << t.DB - 15) - 1, this.mt2 = 2 * t.t;
                }
                function U(t, e) {
                    return t & e;
                }
                function B(t, e) {
                    return t | e;
                }
                function O(t, e) {
                    return t ^ e;
                }
                function j(t, e) {
                    return t & ~e;
                }
                function M(t) {
                    if (0 == t) return -1;
                    var e = 0;
                    return 0 == (65535 & t) && (t >>= 16, e += 16), 0 == (255 & t) && (t >>= 8, e += 8), 0 == (15 & t) && (t >>= 4, e += 4), 0 == (3 & t) && (t >>= 2, e += 2), 0 == (1 & t) && ++e, e;
                }
                function H(t) {
                    for(var e = 0; 0 != t;)t &= t - 1, ++e;
                    return e;
                }
                function V() {}
                function K(t) {
                    return t;
                }
                function q(t) {
                    this.r2 = F(), this.q3 = F(), w.ONE.dlShiftTo(2 * t.t, this.r2), this.mu = this.r2.divide(t), this.m = t;
                }
                L.prototype.convert = function J(t) {
                    return t.s < 0 || t.compareTo(this.m) >= 0 ? t.mod(this.m) : t;
                }, L.prototype.revert = function W(t) {
                    return t;
                }, L.prototype.reduce = function z(t) {
                    t.divRemTo(this.m, null, t);
                }, L.prototype.mulTo = function Y(t, e, r) {
                    t.multiplyTo(e, r), this.reduce(r);
                }, L.prototype.sqrTo = function G(t, e) {
                    t.squareTo(e), this.reduce(e);
                }, N.prototype.convert = function X(t) {
                    var e = F();
                    return t.abs().dlShiftTo(this.m.t, e), e.divRemTo(this.m, null, e), t.s < 0 && e.compareTo(w.ZERO) > 0 && this.m.subTo(e, e), e;
                }, N.prototype.revert = function $(t) {
                    var e = F();
                    return t.copyTo(e), this.reduce(e), e;
                }, N.prototype.reduce = function Q(t) {
                    for(; t.t <= this.mt2;)t[t.t++] = 0;
                    for(var e = 0; e < this.m.t; ++e){
                        var r = 32767 & t[e], n = r * this.mpl + ((r * this.mph + (t[e] >> 15) * this.mpl & this.um) << 15) & t.DM;
                        for(t[r = e + this.m.t] += this.m.am(0, n, t, e, 0, this.m.t); t[r] >= t.DV;)t[r] -= t.DV, t[++r]++;
                    }
                    t.clamp(), t.drShiftTo(this.m.t, t), t.compareTo(this.m) >= 0 && t.subTo(this.m, t);
                }, N.prototype.mulTo = function Z(t, e, r) {
                    t.multiplyTo(e, r), this.reduce(r);
                }, N.prototype.sqrTo = function tt(t, e) {
                    t.squareTo(e), this.reduce(e);
                }, w.prototype.copyTo = function et(t) {
                    for(var e = this.t - 1; e >= 0; --e)t[e] = this[e];
                    t.t = this.t, t.s = this.s;
                }, w.prototype.fromInt = function rt(t) {
                    this.t = 1, this.s = t < 0 ? -1 : 0, t > 0 ? this[0] = t : t < -1 ? this[0] = t + this.DV : this.t = 0;
                }, w.prototype.fromString = function nt(t, e) {
                    var r;
                    if (16 == e) r = 4;
                    else if (8 == e) r = 3;
                    else if (256 == e) r = 8;
                    else if (2 == e) r = 1;
                    else if (32 == e) r = 5;
                    else {
                        if (4 != e) return void this.fromRadix(t, e);
                        r = 2;
                    }
                    this.t = 0, this.s = 0;
                    for(var n = t.length, i = !1, o = 0; --n >= 0;){
                        var s = 8 == r ? 255 & t[n] : R(t, n);
                        s < 0 ? "-" == t.charAt(n) && (i = !0) : (i = !1, 0 == o ? this[this.t++] = s : o + r > this.DB ? (this[this.t - 1] |= (s & (1 << this.DB - o) - 1) << o, this[this.t++] = s >> this.DB - o) : this[this.t - 1] |= s << o, (o += r) >= this.DB && (o -= this.DB));
                    }
                    8 == r && 0 != (128 & t[0]) && (this.s = -1, o > 0 && (this[this.t - 1] |= (1 << this.DB - o) - 1 << o)), this.clamp(), i && w.ZERO.subTo(this, this);
                }, w.prototype.clamp = function it() {
                    for(var t = this.s & this.DM; this.t > 0 && this[this.t - 1] == t;)--this.t;
                }, w.prototype.dlShiftTo = function ot(t, e) {
                    var r;
                    for(r = this.t - 1; r >= 0; --r)e[r + t] = this[r];
                    for(r = t - 1; r >= 0; --r)e[r] = 0;
                    e.t = this.t + t, e.s = this.s;
                }, w.prototype.drShiftTo = function st(t, e) {
                    for(var r = t; r < this.t; ++r)e[r - t] = this[r];
                    e.t = Math.max(this.t - t, 0), e.s = this.s;
                }, w.prototype.lShiftTo = function at(t, e) {
                    var r, n = t % this.DB, i = this.DB - n, o = (1 << i) - 1, s = Math.floor(t / this.DB), a = this.s << n & this.DM;
                    for(r = this.t - 1; r >= 0; --r)e[r + s + 1] = this[r] >> i | a, a = (this[r] & o) << n;
                    for(r = s - 1; r >= 0; --r)e[r] = 0;
                    e[s] = a, e.t = this.t + s + 1, e.s = this.s, e.clamp();
                }, w.prototype.rShiftTo = function ut(t, e) {
                    e.s = this.s;
                    var r = Math.floor(t / this.DB);
                    if (r >= this.t) e.t = 0;
                    else {
                        var n = t % this.DB, i = this.DB - n, o = (1 << n) - 1;
                        e[0] = this[r] >> n;
                        for(var s = r + 1; s < this.t; ++s)e[s - r - 1] |= (this[s] & o) << i, e[s - r] = this[s] >> n;
                        n > 0 && (e[this.t - r - 1] |= (this.s & o) << i), e.t = this.t - r, e.clamp();
                    }
                }, w.prototype.subTo = function ct(t, e) {
                    for(var r = 0, n = 0, i = Math.min(t.t, this.t); r < i;)n += this[r] - t[r], e[r++] = n & this.DM, n >>= this.DB;
                    if (t.t < this.t) {
                        for(n -= t.s; r < this.t;)n += this[r], e[r++] = n & this.DM, n >>= this.DB;
                        n += this.s;
                    } else {
                        for(n += this.s; r < t.t;)n -= t[r], e[r++] = n & this.DM, n >>= this.DB;
                        n -= t.s;
                    }
                    e.s = n < 0 ? -1 : 0, n < -1 ? e[r++] = this.DV + n : n > 0 && (e[r++] = n), e.t = r, e.clamp();
                }, w.prototype.multiplyTo = function ht(t, e) {
                    var r = this.abs(), n = t.abs(), i = r.t;
                    for(e.t = i + n.t; --i >= 0;)e[i] = 0;
                    for(i = 0; i < n.t; ++i)e[i + r.t] = r.am(0, n[i], e, i, 0, r.t);
                    e.s = 0, e.clamp(), this.s != t.s && w.ZERO.subTo(e, e);
                }, w.prototype.squareTo = function lt(t) {
                    for(var e = this.abs(), r = t.t = 2 * e.t; --r >= 0;)t[r] = 0;
                    for(r = 0; r < e.t - 1; ++r){
                        var n = e.am(r, e[r], t, 2 * r, 0, 1);
                        (t[r + e.t] += e.am(r + 1, 2 * e[r], t, 2 * r + 1, n, e.t - r - 1)) >= e.DV && (t[r + e.t] -= e.DV, t[r + e.t + 1] = 1);
                    }
                    t.t > 0 && (t[t.t - 1] += e.am(r, e[r], t, 2 * r, 0, 1)), t.s = 0, t.clamp();
                }, w.prototype.divRemTo = function ft(t, e, r) {
                    var n = t.abs();
                    if (!(n.t <= 0)) {
                        var i = this.abs();
                        if (i.t < n.t) return null != e && e.fromInt(0), void (null != r && this.copyTo(r));
                        null == r && (r = F());
                        var o = F(), s = this.s, a = t.s, u = this.DB - D(n[n.t - 1]);
                        u > 0 ? (n.lShiftTo(u, o), i.lShiftTo(u, r)) : (n.copyTo(o), i.copyTo(r));
                        var c = o.t, h = o[c - 1];
                        if (0 != h) {
                            var l = h * (1 << this.F1) + (c > 1 ? o[c - 2] >> this.F2 : 0), f = this.FV / l, g = (1 << this.F1) / l, d = 1 << this.F2, p = r.t, v = p - c, y = null == e ? F() : e;
                            for(o.dlShiftTo(v, y), r.compareTo(y) >= 0 && (r[r.t++] = 1, r.subTo(y, r)), w.ONE.dlShiftTo(c, y), y.subTo(o, o); o.t < c;)o[o.t++] = 0;
                            for(; --v >= 0;){
                                var m = r[--p] == h ? this.DM : Math.floor(r[p] * f + (r[p - 1] + d) * g);
                                if ((r[p] += o.am(0, m, r, v, 0, c)) < m) for(o.dlShiftTo(v, y), r.subTo(y, r); r[p] < --m;)r.subTo(y, r);
                            }
                            null != e && (r.drShiftTo(c, e), s != a && w.ZERO.subTo(e, e)), r.t = c, r.clamp(), u > 0 && r.rShiftTo(u, r), s < 0 && w.ZERO.subTo(r, r);
                        }
                    }
                }, w.prototype.invDigit = function gt() {
                    if (this.t < 1) return 0;
                    var t = this[0];
                    if (0 == (1 & t)) return 0;
                    var e = 3 & t;
                    return (e = (e = (e = (e = e * (2 - (15 & t) * e) & 15) * (2 - (255 & t) * e) & 255) * (2 - ((65535 & t) * e & 65535)) & 65535) * (2 - t * e % this.DV) % this.DV) > 0 ? this.DV - e : -e;
                }, w.prototype.isEven = function dt() {
                    return 0 == (this.t > 0 ? 1 & this[0] : this.s);
                }, w.prototype.exp = function pt(t, e) {
                    if (t > 4294967295 || t < 1) return w.ONE;
                    var r = F(), n = F(), i = e.convert(this), o = D(t) - 1;
                    for(i.copyTo(r); --o >= 0;)if (e.sqrTo(r, n), (t & 1 << o) > 0) e.mulTo(n, i, r);
                    else {
                        var s = r;
                        r = n, n = s;
                    }
                    return e.revert(r);
                }, w.prototype.toString = function vt(t) {
                    if (this.s < 0) return "-" + this.negate().toString(t);
                    var e;
                    if (16 == t) e = 4;
                    else if (8 == t) e = 3;
                    else if (2 == t) e = 1;
                    else if (32 == t) e = 5;
                    else {
                        if (4 != t) return this.toRadix(t);
                        e = 2;
                    }
                    var r, n = (1 << e) - 1, i = !1, o = "", s = this.t, a = this.DB - s * this.DB % e;
                    if (s-- > 0) for(a < this.DB && (r = this[s] >> a) > 0 && (i = !0, o = T(r)); s >= 0;)a < e ? (r = (this[s] & (1 << a) - 1) << e - a, r |= this[--s] >> (a += this.DB - e)) : (r = this[s] >> (a -= e) & n, a <= 0 && (a += this.DB, --s)), r > 0 && (i = !0), i && (o += T(r));
                    return i ? o : "0";
                }, w.prototype.negate = function yt() {
                    var t = F();
                    return w.ZERO.subTo(this, t), t;
                }, w.prototype.abs = function mt() {
                    return this.s < 0 ? this.negate() : this;
                }, w.prototype.compareTo = function _t(t) {
                    var e = this.s - t.s;
                    if (0 != e) return e;
                    var r = this.t;
                    if (0 != (e = r - t.t)) return this.s < 0 ? -e : e;
                    for(; --r >= 0;)if (0 != (e = this[r] - t[r])) return e;
                    return 0;
                }, w.prototype.bitLength = function St() {
                    return this.t <= 0 ? 0 : this.DB * (this.t - 1) + D(this[this.t - 1] ^ this.s & this.DM);
                }, w.prototype.mod = function bt(t) {
                    var e = F();
                    return this.abs().divRemTo(t, null, e), this.s < 0 && e.compareTo(w.ZERO) > 0 && t.subTo(e, e), e;
                }, w.prototype.modPowInt = function wt(t, e) {
                    var r;
                    return r = t < 256 || e.isEven() ? new L(e) : new N(e), this.exp(t, r);
                }, w.ZERO = I(0), w.ONE = I(1), V.prototype.convert = K, V.prototype.revert = K, V.prototype.mulTo = function Ft(t, e, r) {
                    t.multiplyTo(e, r);
                }, V.prototype.sqrTo = function Et(t, e) {
                    t.squareTo(e);
                }, q.prototype.convert = function xt(t) {
                    if (t.s < 0 || t.t > 2 * this.m.t) return t.mod(this.m);
                    if (t.compareTo(this.m) < 0) return t;
                    var e = F();
                    return t.copyTo(e), this.reduce(e), e;
                }, q.prototype.revert = function At(t) {
                    return t;
                }, q.prototype.reduce = function kt(t) {
                    for(t.drShiftTo(this.m.t - 1, this.r2), t.t > this.m.t + 1 && (t.t = this.m.t + 1, t.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); t.compareTo(this.r2) < 0;)t.dAddOffset(1, this.m.t + 1);
                    for(t.subTo(this.r2, t); t.compareTo(this.m) >= 0;)t.subTo(this.m, t);
                }, q.prototype.mulTo = function Pt(t, e, r) {
                    t.multiplyTo(e, r), this.reduce(r);
                }, q.prototype.sqrTo = function Ct(t, e) {
                    t.squareTo(e), this.reduce(e);
                };
                var Tt = [
                    2,
                    3,
                    5,
                    7,
                    11,
                    13,
                    17,
                    19,
                    23,
                    29,
                    31,
                    37,
                    41,
                    43,
                    47,
                    53,
                    59,
                    61,
                    67,
                    71,
                    73,
                    79,
                    83,
                    89,
                    97,
                    101,
                    103,
                    107,
                    109,
                    113,
                    127,
                    131,
                    137,
                    139,
                    149,
                    151,
                    157,
                    163,
                    167,
                    173,
                    179,
                    181,
                    191,
                    193,
                    197,
                    199,
                    211,
                    223,
                    227,
                    229,
                    233,
                    239,
                    241,
                    251,
                    257,
                    263,
                    269,
                    271,
                    277,
                    281,
                    283,
                    293,
                    307,
                    311,
                    313,
                    317,
                    331,
                    337,
                    347,
                    349,
                    353,
                    359,
                    367,
                    373,
                    379,
                    383,
                    389,
                    397,
                    401,
                    409,
                    419,
                    421,
                    431,
                    433,
                    439,
                    443,
                    449,
                    457,
                    461,
                    463,
                    467,
                    479,
                    487,
                    491,
                    499,
                    503,
                    509,
                    521,
                    523,
                    541,
                    547,
                    557,
                    563,
                    569,
                    571,
                    577,
                    587,
                    593,
                    599,
                    601,
                    607,
                    613,
                    617,
                    619,
                    631,
                    641,
                    643,
                    647,
                    653,
                    659,
                    661,
                    673,
                    677,
                    683,
                    691,
                    701,
                    709,
                    719,
                    727,
                    733,
                    739,
                    743,
                    751,
                    757,
                    761,
                    769,
                    773,
                    787,
                    797,
                    809,
                    811,
                    821,
                    823,
                    827,
                    829,
                    839,
                    853,
                    857,
                    859,
                    863,
                    877,
                    881,
                    883,
                    887,
                    907,
                    911,
                    919,
                    929,
                    937,
                    941,
                    947,
                    953,
                    967,
                    971,
                    977,
                    983,
                    991,
                    997
                ], Rt = 67108864 / Tt[Tt.length - 1];
                /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ function It() {
                    this.i = 0, this.j = 0, this.S = new Array;
                }
                w.prototype.chunkSize = function Dt(t) {
                    return Math.floor(Math.LN2 * this.DB / Math.log(t));
                }, w.prototype.toRadix = function Lt(t) {
                    if (null == t && (t = 10), 0 == this.signum() || t < 2 || t > 36) return "0";
                    var e = this.chunkSize(t), r = Math.pow(t, e), n = I(r), i = F(), o = F(), s = "";
                    for(this.divRemTo(n, i, o); i.signum() > 0;)s = (r + o.intValue()).toString(t).substr(1) + s, i.divRemTo(n, i, o);
                    return o.intValue().toString(t) + s;
                }, w.prototype.fromRadix = function Nt(t, e) {
                    this.fromInt(0), null == e && (e = 10);
                    for(var r = this.chunkSize(e), n = Math.pow(e, r), i = !1, o = 0, s = 0, a = 0; a < t.length; ++a){
                        var u = R(t, a);
                        u < 0 ? "-" == t.charAt(a) && 0 == this.signum() && (i = !0) : (s = e * s + u, ++o >= r && (this.dMultiply(n), this.dAddOffset(s, 0), o = 0, s = 0));
                    }
                    o > 0 && (this.dMultiply(Math.pow(e, o)), this.dAddOffset(s, 0)), i && w.ZERO.subTo(this, this);
                }, w.prototype.fromNumber = function Ut(t, e, r) {
                    if ("number" == typeof e) {
                        if (t < 2) this.fromInt(1);
                        else for(this.fromNumber(t, r), this.testBit(t - 1) || this.bitwiseTo(w.ONE.shiftLeft(t - 1), B, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(e);)this.dAddOffset(2, 0), this.bitLength() > t && this.subTo(w.ONE.shiftLeft(t - 1), this);
                    } else {
                        var n = new Array, i = 7 & t;
                        n.length = 1 + (t >> 3), e.nextBytes(n), i > 0 ? n[0] &= (1 << i) - 1 : n[0] = 0, this.fromString(n, 256);
                    }
                }, w.prototype.bitwiseTo = function Bt(t, e, r) {
                    var n, i, o = Math.min(t.t, this.t);
                    for(n = 0; n < o; ++n)r[n] = e(this[n], t[n]);
                    if (t.t < this.t) {
                        for(i = t.s & this.DM, n = o; n < this.t; ++n)r[n] = e(this[n], i);
                        r.t = this.t;
                    } else {
                        for(i = this.s & this.DM, n = o; n < t.t; ++n)r[n] = e(i, t[n]);
                        r.t = t.t;
                    }
                    r.s = e(this.s, t.s), r.clamp();
                }, w.prototype.changeBit = function Ot(t, e) {
                    var r = w.ONE.shiftLeft(t);
                    return this.bitwiseTo(r, e, r), r;
                }, w.prototype.addTo = function jt(t, e) {
                    for(var r = 0, n = 0, i = Math.min(t.t, this.t); r < i;)n += this[r] + t[r], e[r++] = n & this.DM, n >>= this.DB;
                    if (t.t < this.t) {
                        for(n += t.s; r < this.t;)n += this[r], e[r++] = n & this.DM, n >>= this.DB;
                        n += this.s;
                    } else {
                        for(n += this.s; r < t.t;)n += t[r], e[r++] = n & this.DM, n >>= this.DB;
                        n += t.s;
                    }
                    e.s = n < 0 ? -1 : 0, n > 0 ? e[r++] = n : n < -1 && (e[r++] = this.DV + n), e.t = r, e.clamp();
                }, w.prototype.dMultiply = function Mt(t) {
                    this[this.t] = this.am(0, t - 1, this, 0, 0, this.t), ++this.t, this.clamp();
                }, w.prototype.dAddOffset = function Ht(t, e) {
                    if (0 != t) {
                        for(; this.t <= e;)this[this.t++] = 0;
                        for(this[e] += t; this[e] >= this.DV;)this[e] -= this.DV, ++e >= this.t && (this[this.t++] = 0), ++this[e];
                    }
                }, w.prototype.multiplyLowerTo = function Vt(t, e, r) {
                    var n, i = Math.min(this.t + t.t, e);
                    for(r.s = 0, r.t = i; i > 0;)r[--i] = 0;
                    for(n = r.t - this.t; i < n; ++i)r[i + this.t] = this.am(0, t[i], r, i, 0, this.t);
                    for(n = Math.min(t.t, e); i < n; ++i)this.am(0, t[i], r, i, 0, e - i);
                    r.clamp();
                }, w.prototype.multiplyUpperTo = function Kt(t, e, r) {
                    --e;
                    var n = r.t = this.t + t.t - e;
                    for(r.s = 0; --n >= 0;)r[n] = 0;
                    for(n = Math.max(e - this.t, 0); n < t.t; ++n)r[this.t + n - e] = this.am(e - n, t[n], r, 0, 0, this.t + n - e);
                    r.clamp(), r.drShiftTo(1, r);
                }, w.prototype.modInt = function qt(t) {
                    if (t <= 0) return 0;
                    var e = this.DV % t, r = this.s < 0 ? t - 1 : 0;
                    if (this.t > 0) {
                        if (0 == e) r = this[0] % t;
                        else for(var n = this.t - 1; n >= 0; --n)r = (e * r + this[n]) % t;
                    }
                    return r;
                }, w.prototype.millerRabin = function Jt(t) {
                    var e = this.subtract(w.ONE), r = e.getLowestSetBit();
                    if (r <= 0) return !1;
                    var n = e.shiftRight(r);
                    (t = t + 1 >> 1) > Tt.length && (t = Tt.length);
                    for(var i = F(), o = 0; o < t; ++o){
                        i.fromInt(Tt[Math.floor(Math.random() * Tt.length)]);
                        var s = i.modPow(n, this);
                        if (0 != s.compareTo(w.ONE) && 0 != s.compareTo(e)) {
                            for(var a = 1; a++ < r && 0 != s.compareTo(e);)if (0 == (s = s.modPowInt(2, this)).compareTo(w.ONE)) return !1;
                            if (0 != s.compareTo(e)) return !1;
                        }
                    }
                    return !0;
                }, w.prototype.clone = /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ function Wt() {
                    var t = F();
                    return this.copyTo(t), t;
                }, w.prototype.intValue = function zt() {
                    if (this.s < 0) {
                        if (1 == this.t) return this[0] - this.DV;
                        if (0 == this.t) return -1;
                    } else {
                        if (1 == this.t) return this[0];
                        if (0 == this.t) return 0;
                    }
                    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
                }, w.prototype.byteValue = function Yt() {
                    return 0 == this.t ? this.s : this[0] << 24 >> 24;
                }, w.prototype.shortValue = function Gt() {
                    return 0 == this.t ? this.s : this[0] << 16 >> 16;
                }, w.prototype.signum = function Xt() {
                    return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;
                }, w.prototype.toByteArray = function $t() {
                    var t = this.t, e = new Array;
                    e[0] = this.s;
                    var r, n = this.DB - t * this.DB % 8, i = 0;
                    if (t-- > 0) for(n < this.DB && (r = this[t] >> n) != (this.s & this.DM) >> n && (e[i++] = r | this.s << this.DB - n); t >= 0;)n < 8 ? (r = (this[t] & (1 << n) - 1) << 8 - n, r |= this[--t] >> (n += this.DB - 8)) : (r = this[t] >> (n -= 8) & 255, n <= 0 && (n += this.DB, --t)), 0 != (128 & r) && (r |= -256), 0 == i && (128 & this.s) != (128 & r) && ++i, (i > 0 || r != this.s) && (e[i++] = r);
                    return e;
                }, w.prototype.equals = function Qt(t) {
                    return 0 == this.compareTo(t);
                }, w.prototype.min = function Zt(t) {
                    return this.compareTo(t) < 0 ? this : t;
                }, w.prototype.max = function te(t) {
                    return this.compareTo(t) > 0 ? this : t;
                }, w.prototype.and = function ee(t) {
                    var e = F();
                    return this.bitwiseTo(t, U, e), e;
                }, w.prototype.or = function re(t) {
                    var e = F();
                    return this.bitwiseTo(t, B, e), e;
                }, w.prototype.xor = function ne(t) {
                    var e = F();
                    return this.bitwiseTo(t, O, e), e;
                }, w.prototype.andNot = function ie(t) {
                    var e = F();
                    return this.bitwiseTo(t, j, e), e;
                }, w.prototype.not = function oe() {
                    for(var t = F(), e = 0; e < this.t; ++e)t[e] = this.DM & ~this[e];
                    return t.t = this.t, t.s = ~this.s, t;
                }, w.prototype.shiftLeft = function se(t) {
                    var e = F();
                    return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;
                }, w.prototype.shiftRight = function ae(t) {
                    var e = F();
                    return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;
                }, w.prototype.getLowestSetBit = function ue() {
                    for(var t = 0; t < this.t; ++t)if (0 != this[t]) return t * this.DB + M(this[t]);
                    return this.s < 0 ? this.t * this.DB : -1;
                }, w.prototype.bitCount = function ce() {
                    for(var t = 0, e = this.s & this.DM, r = 0; r < this.t; ++r)t += H(this[r] ^ e);
                    return t;
                }, w.prototype.testBit = function he(t) {
                    var e = Math.floor(t / this.DB);
                    return e >= this.t ? 0 != this.s : 0 != (this[e] & 1 << t % this.DB);
                }, w.prototype.setBit = function le(t) {
                    return this.changeBit(t, B);
                }, w.prototype.clearBit = function fe(t) {
                    return this.changeBit(t, j);
                }, w.prototype.flipBit = function ge(t) {
                    return this.changeBit(t, O);
                }, w.prototype.add = function de(t) {
                    var e = F();
                    return this.addTo(t, e), e;
                }, w.prototype.subtract = function pe(t) {
                    var e = F();
                    return this.subTo(t, e), e;
                }, w.prototype.multiply = function ve(t) {
                    var e = F();
                    return this.multiplyTo(t, e), e;
                }, w.prototype.divide = function ye(t) {
                    var e = F();
                    return this.divRemTo(t, e, null), e;
                }, w.prototype.remainder = function me(t) {
                    var e = F();
                    return this.divRemTo(t, null, e), e;
                }, w.prototype.divideAndRemainder = function _e(t) {
                    var e = F(), r = F();
                    return this.divRemTo(t, e, r), new Array(e, r);
                }, w.prototype.modPow = function Se(t, e) {
                    var r, n, i = t.bitLength(), o = I(1);
                    if (i <= 0) return o;
                    r = i < 18 ? 1 : i < 48 ? 3 : i < 144 ? 4 : i < 768 ? 5 : 6, n = i < 8 ? new L(e) : e.isEven() ? new q(e) : new N(e);
                    var s = new Array, a = 3, u = r - 1, c = (1 << r) - 1;
                    if (s[1] = n.convert(this), r > 1) {
                        var h = F();
                        for(n.sqrTo(s[1], h); a <= c;)s[a] = F(), n.mulTo(h, s[a - 2], s[a]), a += 2;
                    }
                    var l, f, g = t.t - 1, d = !0, p = F();
                    for(i = D(t[g]) - 1; g >= 0;){
                        for(i >= u ? l = t[g] >> i - u & c : (l = (t[g] & (1 << i + 1) - 1) << u - i, g > 0 && (l |= t[g - 1] >> this.DB + i - u)), a = r; 0 == (1 & l);)l >>= 1, --a;
                        if ((i -= a) < 0 && (i += this.DB, --g), d) s[l].copyTo(o), d = !1;
                        else {
                            for(; a > 1;)n.sqrTo(o, p), n.sqrTo(p, o), a -= 2;
                            a > 0 ? n.sqrTo(o, p) : (f = o, o = p, p = f), n.mulTo(p, s[l], o);
                        }
                        for(; g >= 0 && 0 == (t[g] & 1 << i);)n.sqrTo(o, p), f = o, o = p, p = f, --i < 0 && (i = this.DB - 1, --g);
                    }
                    return n.revert(o);
                }, w.prototype.modInverse = function be(t) {
                    var e = t.isEven();
                    if (this.isEven() && e || 0 == t.signum()) return w.ZERO;
                    for(var r = t.clone(), n = this.clone(), i = I(1), o = I(0), s = I(0), a = I(1); 0 != r.signum();){
                        for(; r.isEven();)r.rShiftTo(1, r), e ? (i.isEven() && o.isEven() || (i.addTo(this, i), o.subTo(t, o)), i.rShiftTo(1, i)) : o.isEven() || o.subTo(t, o), o.rShiftTo(1, o);
                        for(; n.isEven();)n.rShiftTo(1, n), e ? (s.isEven() && a.isEven() || (s.addTo(this, s), a.subTo(t, a)), s.rShiftTo(1, s)) : a.isEven() || a.subTo(t, a), a.rShiftTo(1, a);
                        r.compareTo(n) >= 0 ? (r.subTo(n, r), e && i.subTo(s, i), o.subTo(a, o)) : (n.subTo(r, n), e && s.subTo(i, s), a.subTo(o, a));
                    }
                    return 0 != n.compareTo(w.ONE) ? w.ZERO : a.compareTo(t) >= 0 ? a.subtract(t) : a.signum() < 0 ? (a.addTo(t, a), a.signum() < 0 ? a.add(t) : a) : a;
                }, w.prototype.pow = function we(t) {
                    return this.exp(t, new V);
                }, w.prototype.gcd = function Fe(t) {
                    var e = this.s < 0 ? this.negate() : this.clone(), r = t.s < 0 ? t.negate() : t.clone();
                    if (e.compareTo(r) < 0) {
                        var n = e;
                        e = r, r = n;
                    }
                    var i = e.getLowestSetBit(), o = r.getLowestSetBit();
                    if (o < 0) return e;
                    for(i < o && (o = i), o > 0 && (e.rShiftTo(o, e), r.rShiftTo(o, r)); e.signum() > 0;)(i = e.getLowestSetBit()) > 0 && e.rShiftTo(i, e), (i = r.getLowestSetBit()) > 0 && r.rShiftTo(i, r), e.compareTo(r) >= 0 ? (e.subTo(r, e), e.rShiftTo(1, e)) : (r.subTo(e, r), r.rShiftTo(1, r));
                    return o > 0 && r.lShiftTo(o, r), r;
                }, w.prototype.isProbablePrime = function Ee(t) {
                    var e, r = this.abs();
                    if (1 == r.t && r[0] <= Tt[Tt.length - 1]) {
                        for(e = 0; e < Tt.length; ++e)if (r[0] == Tt[e]) return !0;
                        return !1;
                    }
                    if (r.isEven()) return !1;
                    for(e = 1; e < Tt.length;){
                        for(var n = Tt[e], i = e + 1; i < Tt.length && n < Rt;)n *= Tt[i++];
                        for(n = r.modInt(n); e < i;)if (n % Tt[e++] == 0) return !1;
                    }
                    return r.millerRabin(t);
                }, w.prototype.square = function xe() {
                    var t = F();
                    return this.squareTo(t), t;
                }, It.prototype.init = function Ae(t) {
                    var e, r, n;
                    for(e = 0; e < 256; ++e)this.S[e] = e;
                    for(r = 0, e = 0; e < 256; ++e)r = r + this.S[e] + t[e % t.length] & 255, n = this.S[e], this.S[e] = this.S[r], this.S[r] = n;
                    this.i = 0, this.j = 0;
                }, It.prototype.next = function ke() {
                    var t;
                    return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, t = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = t, this.S[t + this.S[this.i] & 255];
                };
                var Pe, Ce, Te;
                /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ function Re() {
                    !function t(e) {
                        Ce[Te++] ^= 255 & e, Ce[Te++] ^= e >> 8 & 255, Ce[Te++] ^= e >> 16 & 255, Ce[Te++] ^= e >> 24 & 255, Te >= 256 && (Te -= 256);
                    }((new Date).getTime());
                }
                if (null == Ce) {
                    var Ie;
                    if (Ce = new Array, Te = 0, void 0 !== p && (void 0 !== p.crypto || void 0 !== p.msCrypto)) {
                        var De = p.crypto || p.msCrypto;
                        if (De.getRandomValues) {
                            var Le = new Uint8Array(32);
                            for(De.getRandomValues(Le), Ie = 0; Ie < 32; ++Ie)Ce[Te++] = Le[Ie];
                        } else if ("Netscape" == d.appName && d.appVersion < "5") {
                            var Ne = p.crypto.random(32);
                            for(Ie = 0; Ie < Ne.length; ++Ie)Ce[Te++] = 255 & Ne.charCodeAt(Ie);
                        }
                    }
                    for(; Te < 256;)Ie = Math.floor(65536 * Math.random()), Ce[Te++] = Ie >>> 8, Ce[Te++] = 255 & Ie;
                    Te = 0, Re();
                }
                function Ue() {
                    if (null == Pe) {
                        for(Re(), (Pe = function t() {
                            return new It;
                        }()).init(Ce), Te = 0; Te < Ce.length; ++Te)Ce[Te] = 0;
                        Te = 0;
                    }
                    return Pe.next();
                }
                function Be() {}
                /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ function Oe(t, e) {
                    return new w(t, e);
                }
                function je(t, e, r) {
                    for(var n = "", i = 0; n.length < e;)n += r(String.fromCharCode.apply(String, t.concat([
                        (4278190080 & i) >> 24,
                        (16711680 & i) >> 16,
                        (65280 & i) >> 8,
                        255 & i
                    ]))), i += 1;
                    return n;
                }
                function Me() {
                    this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff = null;
                }
                /*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */ function He(t, e) {
                    this.x = e, this.q = t;
                }
                function Ve(t, e, r, n) {
                    this.curve = t, this.x = e, this.y = r, this.z = null == n ? w.ONE : n, this.zinv = null;
                }
                function Ke(t, e, r) {
                    this.q = t, this.a = this.fromBigInteger(e), this.b = this.fromBigInteger(r), this.infinity = new Ve(this, null, null);
                }
                Be.prototype.nextBytes = function qe(t) {
                    var e;
                    for(e = 0; e < t.length; ++e)t[e] = Ue();
                }, Me.prototype.doPublic = function Je(t) {
                    return t.modPowInt(this.e, this.n);
                }, Me.prototype.setPublic = function We(t, e) {
                    if (this.isPublic = !0, this.isPrivate = !1, "string" != typeof t) this.n = t, this.e = e;
                    else {
                        if (!(null != t && null != e && t.length > 0 && e.length > 0)) throw "Invalid RSA public key";
                        this.n = Oe(t, 16), this.e = parseInt(e, 16);
                    }
                }, Me.prototype.encrypt = function ze(t) {
                    var e = function r(t, e) {
                        if (e < t.length + 11) throw "Message too long for RSA";
                        for(var r = new Array, n = t.length - 1; n >= 0 && e > 0;){
                            var i = t.charCodeAt(n--);
                            i < 128 ? r[--e] = i : i > 127 && i < 2048 ? (r[--e] = 63 & i | 128, r[--e] = i >> 6 | 192) : (r[--e] = 63 & i | 128, r[--e] = i >> 6 & 63 | 128, r[--e] = i >> 12 | 224);
                        }
                        r[--e] = 0;
                        for(var o = new Be, s = new Array; e > 2;){
                            for(s[0] = 0; 0 == s[0];)o.nextBytes(s);
                            r[--e] = s[0];
                        }
                        return r[--e] = 2, r[--e] = 0, new w(r);
                    }(t, this.n.bitLength() + 7 >> 3);
                    if (null == e) return null;
                    var n = this.doPublic(e);
                    if (null == n) return null;
                    var i = n.toString(16);
                    return 0 == (1 & i.length) ? i : "0" + i;
                }, Me.prototype.encryptOAEP = function Ye(t, e, r) {
                    var n = function i(t, e, r, n) {
                        var i = Sr.crypto.MessageDigest, o = Sr.crypto.Util, s = null;
                        if (r || (r = "sha1"), "string" == typeof r && (s = i.getCanonicalAlgName(r), n = i.getHashLength(s), r = function t(e) {
                            return Lr(o.hashHex(Nr(e), s));
                        }), t.length + 2 * n + 2 > e) throw "Message too long for RSA";
                        var a, u = "";
                        for(a = 0; a < e - t.length - 2 * n - 2; a += 1)u += "\x00";
                        var c = r("") + u + "\x01" + t, h = new Array(n);
                        (new Be).nextBytes(h);
                        var l = je(h, c.length, r), f = [];
                        for(a = 0; a < c.length; a += 1)f[a] = c.charCodeAt(a) ^ l.charCodeAt(a);
                        var g = je(f, h.length, r), d = [
                            0
                        ];
                        for(a = 0; a < h.length; a += 1)d[a + 1] = h[a] ^ g.charCodeAt(a);
                        return new w(d.concat(f));
                    }(t, this.n.bitLength() + 7 >> 3, e, r);
                    if (null == n) return null;
                    var o = this.doPublic(n);
                    if (null == o) return null;
                    var s = o.toString(16);
                    return 0 == (1 & s.length) ? s : "0" + s;
                }, Me.prototype.type = "RSA", He.prototype.equals = function Ge(t) {
                    return t == this || this.q.equals(t.q) && this.x.equals(t.x);
                }, He.prototype.toBigInteger = function Xe() {
                    return this.x;
                }, He.prototype.negate = function $e() {
                    return new He(this.q, this.x.negate().mod(this.q));
                }, He.prototype.add = function Qe(t) {
                    return new He(this.q, this.x.add(t.toBigInteger()).mod(this.q));
                }, He.prototype.subtract = function Ze(t) {
                    return new He(this.q, this.x.subtract(t.toBigInteger()).mod(this.q));
                }, He.prototype.multiply = function tr(t) {
                    return new He(this.q, this.x.multiply(t.toBigInteger()).mod(this.q));
                }, He.prototype.square = function er() {
                    return new He(this.q, this.x.square().mod(this.q));
                }, He.prototype.divide = function rr(t) {
                    return new He(this.q, this.x.multiply(t.toBigInteger().modInverse(this.q)).mod(this.q));
                }, Ve.prototype.getX = function nr() {
                    return null == this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
                }, Ve.prototype.getY = function ir() {
                    return null == this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
                }, Ve.prototype.equals = function or(t) {
                    return t == this || (this.isInfinity() ? t.isInfinity() : t.isInfinity() ? this.isInfinity() : !!t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO) && t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(w.ZERO));
                }, Ve.prototype.isInfinity = function sr() {
                    return null == this.x && null == this.y || this.z.equals(w.ZERO) && !this.y.toBigInteger().equals(w.ZERO);
                }, Ve.prototype.negate = function ar() {
                    return new Ve(this.curve, this.x, this.y.negate(), this.z);
                }, Ve.prototype.add = function ur(t) {
                    if (this.isInfinity()) return t;
                    if (t.isInfinity()) return this;
                    var e = t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q), r = t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);
                    if (w.ZERO.equals(r)) return w.ZERO.equals(e) ? this.twice() : this.curve.getInfinity();
                    var n = new w("3"), i = this.x.toBigInteger(), o = this.y.toBigInteger(), s = (t.x.toBigInteger(), t.y.toBigInteger(), r.square()), a = s.multiply(r), u = i.multiply(s), c = e.square().multiply(this.z), h = c.subtract(u.shiftLeft(1)).multiply(t.z).subtract(a).multiply(r).mod(this.curve.q), l = u.multiply(n).multiply(e).subtract(o.multiply(a)).subtract(c.multiply(e)).multiply(t.z).add(e.multiply(a)).mod(this.curve.q), f = a.multiply(this.z).multiply(t.z).mod(this.curve.q);
                    return new Ve(this.curve, this.curve.fromBigInteger(h), this.curve.fromBigInteger(l), f);
                }, Ve.prototype.twice = function cr() {
                    if (this.isInfinity()) return this;
                    if (0 == this.y.toBigInteger().signum()) return this.curve.getInfinity();
                    var t = new w("3"), e = this.x.toBigInteger(), r = this.y.toBigInteger(), n = r.multiply(this.z), i = n.multiply(r).mod(this.curve.q), o = this.curve.a.toBigInteger(), s = e.square().multiply(t);
                    w.ZERO.equals(o) || (s = s.add(this.z.square().multiply(o)));
                    var a = (s = s.mod(this.curve.q)).square().subtract(e.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(n).mod(this.curve.q), u = s.multiply(t).multiply(e).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(s.square().multiply(s)).mod(this.curve.q), c = n.square().multiply(n).shiftLeft(3).mod(this.curve.q);
                    return new Ve(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(u), c);
                }, Ve.prototype.multiply = function hr(t) {
                    if (this.isInfinity()) return this;
                    if (0 == t.signum()) return this.curve.getInfinity();
                    var e, r = t, n = r.multiply(new w("3")), i = this.negate(), o = this, s = this.curve.q.subtract(t), a = s.multiply(new w("3")), u = new Ve(this.curve, this.x, this.y), c = u.negate();
                    for(e = n.bitLength() - 2; e > 0; --e){
                        o = o.twice();
                        var h = n.testBit(e);
                        h != r.testBit(e) && (o = o.add(h ? this : i));
                    }
                    for(e = a.bitLength() - 2; e > 0; --e){
                        u = u.twice();
                        var l = a.testBit(e);
                        l != s.testBit(e) && (u = u.add(l ? u : c));
                    }
                    return o;
                }, Ve.prototype.multiplyTwo = function lr(t, e, r) {
                    var n;
                    n = t.bitLength() > r.bitLength() ? t.bitLength() - 1 : r.bitLength() - 1;
                    for(var i = this.curve.getInfinity(), o = this.add(e); n >= 0;)i = i.twice(), t.testBit(n) ? i = r.testBit(n) ? i.add(o) : i.add(this) : r.testBit(n) && (i = i.add(e)), --n;
                    return i;
                }, Ke.prototype.getQ = function fr() {
                    return this.q;
                }, Ke.prototype.getA = function gr() {
                    return this.a;
                }, Ke.prototype.getB = function dr() {
                    return this.b;
                }, Ke.prototype.equals = function pr(t) {
                    return t == this || this.q.equals(t.q) && this.a.equals(t.a) && this.b.equals(t.b);
                }, Ke.prototype.getInfinity = function vr() {
                    return this.infinity;
                }, Ke.prototype.fromBigInteger = function yr(t) {
                    return new He(this.q, t);
                }, Ke.prototype.decodePointHex = function mr(t) {
                    switch(parseInt(t.substr(0, 2), 16)){
                        case 0:
                            return this.infinity;
                        case 2:
                        case 3:
                            return null;
                        case 4:
                        case 6:
                        case 7:
                            var e = (t.length - 2) / 2, r = t.substr(2, e), n = t.substr(e + 2, e);
                            return new Ve(this, this.fromBigInteger(new w(r, 16)), this.fromBigInteger(new w(n, 16)));
                        default:
                            return null;
                    }
                }, /*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */ He.prototype.getByteLength = function() {
                    return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
                }, Ve.prototype.getEncoded = function(t) {
                    var e = function t(e, r) {
                        var n = e.toByteArrayUnsigned();
                        if (r < n.length) n = n.slice(n.length - r);
                        else for(; r > n.length;)n.unshift(0);
                        return n;
                    }, r = this.getX().toBigInteger(), n = this.getY().toBigInteger(), i = e(r, 32);
                    return t ? n.isEven() ? i.unshift(2) : i.unshift(3) : (i.unshift(4), i = i.concat(e(n, 32))), i;
                }, Ve.decodeFrom = function(t, e) {
                    e[0];
                    var r = e.length - 1, n = e.slice(1, 1 + r / 2), i = e.slice(1 + r / 2, 1 + r);
                    n.unshift(0), i.unshift(0);
                    var o = new w(n), s = new w(i);
                    return new Ve(t, t.fromBigInteger(o), t.fromBigInteger(s));
                }, Ve.decodeFromHex = function(t, e) {
                    e.substr(0, 2);
                    var r = e.length - 2, n = e.substr(2, r / 2), i = e.substr(2 + r / 2, r / 2), o = new w(n, 16), s = new w(i, 16);
                    return new Ve(t, t.fromBigInteger(o), t.fromBigInteger(s));
                }, Ve.prototype.add2D = function(t) {
                    if (this.isInfinity()) return t;
                    if (t.isInfinity()) return this;
                    if (this.x.equals(t.x)) return this.y.equals(t.y) ? this.twice() : this.curve.getInfinity();
                    var e = t.x.subtract(this.x), r = t.y.subtract(this.y).divide(e), n = r.square().subtract(this.x).subtract(t.x), i = r.multiply(this.x.subtract(n)).subtract(this.y);
                    return new Ve(this.curve, n, i);
                }, Ve.prototype.twice2D = function() {
                    if (this.isInfinity()) return this;
                    if (0 == this.y.toBigInteger().signum()) return this.curve.getInfinity();
                    var t = this.curve.fromBigInteger(w.valueOf(2)), e = this.curve.fromBigInteger(w.valueOf(3)), r = this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(t)), n = r.square().subtract(this.x.multiply(t)), i = r.multiply(this.x.subtract(n)).subtract(this.y);
                    return new Ve(this.curve, n, i);
                }, Ve.prototype.multiply2D = function(t) {
                    if (this.isInfinity()) return this;
                    if (0 == t.signum()) return this.curve.getInfinity();
                    var e, r = t, n = r.multiply(new w("3")), i = this.negate(), o = this;
                    for(e = n.bitLength() - 2; e > 0; --e){
                        o = o.twice();
                        var s = n.testBit(e);
                        s != r.testBit(e) && (o = o.add2D(s ? this : i));
                    }
                    return o;
                }, Ve.prototype.isOnCurve = function() {
                    var t = this.getX().toBigInteger(), e = this.getY().toBigInteger(), r = this.curve.getA().toBigInteger(), n = this.curve.getB().toBigInteger(), i = this.curve.getQ(), o = e.multiply(e).mod(i), s = t.multiply(t).multiply(t).add(r.multiply(t)).add(n).mod(i);
                    return o.equals(s);
                }, Ve.prototype.toString = function() {
                    return "(" + this.getX().toBigInteger().toString() + "," + this.getY().toBigInteger().toString() + ")";
                }, Ve.prototype.validate = function() {
                    var t = this.curve.getQ();
                    if (this.isInfinity()) throw new Error("Point is at infinity.");
                    var e = this.getX().toBigInteger(), r = this.getY().toBigInteger();
                    if (e.compareTo(w.ONE) < 0 || e.compareTo(t.subtract(w.ONE)) > 0) throw new Error("x coordinate out of bounds");
                    if (r.compareTo(w.ONE) < 0 || r.compareTo(t.subtract(w.ONE)) > 0) throw new Error("y coordinate out of bounds");
                    if (!this.isOnCurve()) throw new Error("Point is not on the curve.");
                    if (this.multiply(t).isInfinity()) throw new Error("Point is not a scalar multiple of G.");
                    return !0;
                };
                /*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */ var _r = function() {
                    var t = new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))', "g"), e = new RegExp("\\\\(?:([^u])|u(.{4}))", "g"), r = {
                        '"': '"',
                        "/": "/",
                        "\\": "\\",
                        b: "\b",
                        f: "\f",
                        n: "\n",
                        r: "\r",
                        t: "	"
                    };
                    function n(t, e, n) {
                        return e ? r[e] : String.fromCharCode(parseInt(n, 16));
                    }
                    var i = new String(""), o = Object.hasOwnProperty;
                    return function(r, s) {
                        var a, u, c = r.match(t), h = c[0], l = !1;
                        "{" === h ? a = {} : "[" === h ? a = [] : (a = [], l = !0);
                        for(var f = [
                            a
                        ], d = 1 - l, p = c.length; d < p; ++d){
                            var v;
                            switch((h = c[d]).charCodeAt(0)){
                                default:
                                    (v = f[0])[u || v.length] = +h, u = void 0;
                                    break;
                                case 34:
                                    if (-1 !== (h = h.substring(1, h.length - 1)).indexOf("\\") && (h = h.replace(e, n)), v = f[0], !u) {
                                        if (!(v instanceof Array)) {
                                            u = h || i;
                                            break;
                                        }
                                        u = v.length;
                                    }
                                    v[u] = h, u = void 0;
                                    break;
                                case 91:
                                    v = f[0], f.unshift(v[u || v.length] = []), u = void 0;
                                    break;
                                case 93:
                                    f.shift();
                                    break;
                                case 102:
                                    (v = f[0])[u || v.length] = !1, u = void 0;
                                    break;
                                case 110:
                                    (v = f[0])[u || v.length] = null, u = void 0;
                                    break;
                                case 116:
                                    (v = f[0])[u || v.length] = !0, u = void 0;
                                    break;
                                case 123:
                                    v = f[0], f.unshift(v[u || v.length] = {}), u = void 0;
                                    break;
                                case 125:
                                    f.shift();
                            }
                        }
                        if (l) {
                            if (1 !== f.length) throw new Error;
                            a = a[0];
                        } else if (f.length) throw new Error;
                        if (s) a = function t(e, r) {
                            var n = e[r];
                            if (n && "object" === (void 0 === n ? "undefined" : g(n))) {
                                var i = null;
                                for(var a in n)if (o.call(n, a) && n !== e) {
                                    var u = t(n, a);
                                    void 0 !== u ? n[a] = u : (i || (i = []), i.push(a));
                                }
                                if (i) for(var c = i.length; --c >= 0;)delete n[i[c]];
                            }
                            return s.call(e, r, n);
                        }({
                            "": a
                        }, "");
                        return a;
                    };
                }();
                void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.asn1 && Sr.asn1 || (Sr.asn1 = {}), Sr.asn1.ASN1Util = new function() {
                    this.integerToByteHex = function(t) {
                        var e = t.toString(16);
                        return e.length % 2 == 1 && (e = "0" + e), e;
                    }, this.bigIntToMinTwosComplementsHex = function(t) {
                        var e = t.toString(16);
                        if ("-" != e.substr(0, 1)) e.length % 2 == 1 ? e = "0" + e : e.match(/^[0-7]/) || (e = "00" + e);
                        else {
                            var r = e.substr(1).length;
                            r % 2 == 1 ? r += 1 : e.match(/^[0-7]/) || (r += 2);
                            for(var n = "", i = 0; i < r; i++)n += "f";
                            e = new w(n, 16).xor(t).add(w.ONE).toString(16).replace(/^-/, "");
                        }
                        return e;
                    }, this.getPEMStringFromHex = function(t, e) {
                        return jr(t, e);
                    }, this.newObject = function(t) {
                        var e = Sr.asn1, r = e.ASN1Object, n = e.DERBoolean, i = e.DERInteger, o = e.DERBitString, s = e.DEROctetString, a = e.DERNull, u = e.DERObjectIdentifier, c = e.DEREnumerated, h = e.DERUTF8String, l = e.DERNumericString, f = e.DERPrintableString, g = e.DERTeletexString, d = e.DERIA5String, p = e.DERUTCTime, v = e.DERGeneralizedTime, y = e.DERVisibleString, m = e.DERBMPString, _ = e.DERSequence, S = e.DERSet, b = e.DERTaggedObject, w = e.ASN1Util.newObject;
                        if (t instanceof e.ASN1Object) return t;
                        var F = Object.keys(t);
                        if (1 != F.length) throw new Error("key of param shall be only one.");
                        var E = F[0];
                        if (-1 == ":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":" + E + ":")) throw new Error("undefined key: " + E);
                        if ("bool" == E) return new n(t[E]);
                        if ("int" == E) return new i(t[E]);
                        if ("bitstr" == E) return new o(t[E]);
                        if ("octstr" == E) return new s(t[E]);
                        if ("null" == E) return new a(t[E]);
                        if ("oid" == E) return new u(t[E]);
                        if ("enum" == E) return new c(t[E]);
                        if ("utf8str" == E) return new h(t[E]);
                        if ("numstr" == E) return new l(t[E]);
                        if ("prnstr" == E) return new f(t[E]);
                        if ("telstr" == E) return new g(t[E]);
                        if ("ia5str" == E) return new d(t[E]);
                        if ("utctime" == E) return new p(t[E]);
                        if ("gentime" == E) return new v(t[E]);
                        if ("visstr" == E) return new y(t[E]);
                        if ("bmpstr" == E) return new m(t[E]);
                        if ("asn1" == E) return new r(t[E]);
                        if ("seq" == E) {
                            for(var x = t[E], A = [], k = 0; k < x.length; k++){
                                var P = w(x[k]);
                                A.push(P);
                            }
                            return new _({
                                array: A
                            });
                        }
                        if ("set" == E) {
                            for(x = t[E], A = [], k = 0; k < x.length; k++){
                                P = w(x[k]);
                                A.push(P);
                            }
                            return new S({
                                array: A
                            });
                        }
                        if ("tag" == E) {
                            var C = t[E];
                            if ("[object Array]" === Object.prototype.toString.call(C) && 3 == C.length) {
                                var T = w(C[2]);
                                return new b({
                                    tag: C[0],
                                    explicit: C[1],
                                    obj: T
                                });
                            }
                            return new b(C);
                        }
                    }, this.jsonToASN1HEX = function(t) {
                        return this.newObject(t).getEncodedHex();
                    };
                }, Sr.asn1.ASN1Util.oidHexToInt = function(t) {
                    for(var e = "", r = parseInt(t.substr(0, 2), 16), n = (e = Math.floor(r / 40) + "." + r % 40, ""), i = 2; i < t.length; i += 2){
                        var o = ("00000000" + parseInt(t.substr(i, 2), 16).toString(2)).slice(-8);
                        if (n += o.substr(1, 7), "0" == o.substr(0, 1)) e = e + "." + new w(n, 2).toString(10), n = "";
                    }
                    return e;
                }, Sr.asn1.ASN1Util.oidIntToHex = function(t) {
                    var e = function t(e) {
                        var r = e.toString(16);
                        return 1 == r.length && (r = "0" + r), r;
                    }, r = function t(r) {
                        var n = "", i = new w(r, 10).toString(2), o = 7 - i.length % 7;
                        7 == o && (o = 0);
                        for(var s = "", a = 0; a < o; a++)s += "0";
                        i = s + i;
                        for(a = 0; a < i.length - 1; a += 7){
                            var u = i.substr(a, 7);
                            a != i.length - 7 && (u = "1" + u), n += e(parseInt(u, 2));
                        }
                        return n;
                    };
                    if (!t.match(/^[0-9.]+$/)) throw "malformed oid string: " + t;
                    var n = "", i = t.split("."), o = 40 * parseInt(i[0]) + parseInt(i[1]);
                    n += e(o), i.splice(0, 2);
                    for(var s = 0; s < i.length; s++)n += r(i[s]);
                    return n;
                }, Sr.asn1.ASN1Object = function(t) {
                    this.params = null, this.getLengthHexFromValue = function() {
                        if (void 0 === this.hV || null == this.hV) throw new Error("this.hV is null or undefined");
                        if (this.hV.length % 2 == 1) throw new Error("value hex must be even length: n=0,v=" + this.hV);
                        var t = this.hV.length / 2, e = t.toString(16);
                        if (e.length % 2 == 1 && (e = "0" + e), t < 128) return e;
                        var r = e.length / 2;
                        if (r > 15) throw "ASN.1 length too long to represent by 8x: n = " + t.toString(16);
                        return (128 + r).toString(16) + e;
                    }, this.getEncodedHex = function() {
                        return (null == this.hTLV || this.isModified) && (this.hV = this.getFreshValueHex(), this.hL = this.getLengthHexFromValue(), this.hTLV = this.hT + this.hL + this.hV, this.isModified = !1), this.hTLV;
                    }, this.getValueHex = function() {
                        return this.getEncodedHex(), this.hV;
                    }, this.getFreshValueHex = function() {
                        return "";
                    }, this.setByParam = function(t) {
                        this.params = t;
                    }, null != t && null != t.tlv && (this.hTLV = t.tlv, this.isModified = !1);
                }, Sr.asn1.DERAbstractString = function(t) {
                    Sr.asn1.DERAbstractString.superclass.constructor.call(this);
                    this.getString = function() {
                        return this.s;
                    }, this.setString = function(t) {
                        this.hTLV = null, this.isModified = !0, this.s = t, this.hV = Ir(this.s).toLowerCase();
                    }, this.setStringHex = function(t) {
                        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, void 0 !== t && ("string" == typeof t ? this.setString(t) : void 0 !== t.str ? this.setString(t.str) : void 0 !== t.hex && this.setStringHex(t.hex));
                }, Zr(Sr.asn1.DERAbstractString, Sr.asn1.ASN1Object), Sr.asn1.DERAbstractTime = function(t) {
                    Sr.asn1.DERAbstractTime.superclass.constructor.call(this);
                    this.localDateToUTC = function(t) {
                        var e = t.getTime() + 6e4 * t.getTimezoneOffset();
                        return new Date(e);
                    }, this.formatDate = function(t, e, r) {
                        var n = this.zeroPadding, i = this.localDateToUTC(t), o = String(i.getFullYear());
                        "utc" == e && (o = o.substr(2, 2));
                        var s = o + n(String(i.getMonth() + 1), 2) + n(String(i.getDate()), 2) + n(String(i.getHours()), 2) + n(String(i.getMinutes()), 2) + n(String(i.getSeconds()), 2);
                        if (!0 === r) {
                            var a = i.getMilliseconds();
                            if (0 != a) {
                                var u = n(String(a), 3);
                                s = s + "." + (u = u.replace(/[0]+$/, ""));
                            }
                        }
                        return s + "Z";
                    }, this.zeroPadding = function(t, e) {
                        return t.length >= e ? t : new Array(e - t.length + 1).join("0") + t;
                    }, this.getString = function() {
                        return this.s;
                    }, this.setString = function(t) {
                        this.hTLV = null, this.isModified = !0, this.s = t, this.hV = kr(t);
                    }, this.setByDateValue = function(t, e, r, n, i, o) {
                        var s = new Date(Date.UTC(t, e - 1, r, n, i, o, 0));
                        this.setByDate(s);
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    };
                }, Zr(Sr.asn1.DERAbstractTime, Sr.asn1.ASN1Object), Sr.asn1.DERAbstractStructured = function(t) {
                    Sr.asn1.DERAbstractString.superclass.constructor.call(this);
                    this.setByASN1ObjectArray = function(t) {
                        this.hTLV = null, this.isModified = !0, this.asn1Array = t;
                    }, this.appendASN1Object = function(t) {
                        this.hTLV = null, this.isModified = !0, this.asn1Array.push(t);
                    }, this.asn1Array = new Array, void 0 !== t && void 0 !== t.array && (this.asn1Array = t.array);
                }, Zr(Sr.asn1.DERAbstractStructured, Sr.asn1.ASN1Object), Sr.asn1.DERBoolean = function(t) {
                    Sr.asn1.DERBoolean.superclass.constructor.call(this), this.hT = "01", this.hTLV = 0 == t ? "010100" : "0101ff";
                }, Zr(Sr.asn1.DERBoolean, Sr.asn1.ASN1Object), Sr.asn1.DERInteger = function(t) {
                    Sr.asn1.DERInteger.superclass.constructor.call(this), this.hT = "02", this.setByBigInteger = function(t) {
                        this.hTLV = null, this.isModified = !0, this.hV = Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);
                    }, this.setByInteger = function(t) {
                        var e = new w(String(t), 10);
                        this.setByBigInteger(e);
                    }, this.setValueHex = function(t) {
                        this.hV = t;
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, void 0 !== t && (void 0 !== t.bigint ? this.setByBigInteger(t.bigint) : void 0 !== t.int ? this.setByInteger(t.int) : "number" == typeof t ? this.setByInteger(t) : void 0 !== t.hex && this.setValueHex(t.hex));
                }, Zr(Sr.asn1.DERInteger, Sr.asn1.ASN1Object), Sr.asn1.DERBitString = function(t) {
                    if (void 0 !== t && void 0 !== t.obj) {
                        var e = Sr.asn1.ASN1Util.newObject(t.obj);
                        t.hex = "00" + e.getEncodedHex();
                    }
                    Sr.asn1.DERBitString.superclass.constructor.call(this), this.hT = "03", this.setHexValueIncludingUnusedBits = function(t) {
                        this.hTLV = null, this.isModified = !0, this.hV = t;
                    }, this.setUnusedBitsAndHexValue = function(t, e) {
                        if (t < 0 || 7 < t) throw "unused bits shall be from 0 to 7: u = " + t;
                        var r = "0" + t;
                        this.hTLV = null, this.isModified = !0, this.hV = r + e;
                    }, this.setByBinaryString = function(t) {
                        var e = 8 - (t = t.replace(/0+$/, "")).length % 8;
                        8 == e && (e = 0);
                        for(var r = 0; r <= e; r++)t += "0";
                        var n = "";
                        for(r = 0; r < t.length - 1; r += 8){
                            var i = t.substr(r, 8), o = parseInt(i, 2).toString(16);
                            1 == o.length && (o = "0" + o), n += o;
                        }
                        this.hTLV = null, this.isModified = !0, this.hV = "0" + e + n;
                    }, this.setByBooleanArray = function(t) {
                        for(var e = "", r = 0; r < t.length; r++)1 == t[r] ? e += "1" : e += "0";
                        this.setByBinaryString(e);
                    }, this.newFalseArray = function(t) {
                        for(var e = new Array(t), r = 0; r < t; r++)e[r] = !1;
                        return e;
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, void 0 !== t && ("string" == typeof t && t.toLowerCase().match(/^[0-9a-f]+$/) ? this.setHexValueIncludingUnusedBits(t) : void 0 !== t.hex ? this.setHexValueIncludingUnusedBits(t.hex) : void 0 !== t.bin ? this.setByBinaryString(t.bin) : void 0 !== t.array && this.setByBooleanArray(t.array));
                }, Zr(Sr.asn1.DERBitString, Sr.asn1.ASN1Object), Sr.asn1.DEROctetString = function(t) {
                    if (void 0 !== t && void 0 !== t.obj) {
                        var e = Sr.asn1.ASN1Util.newObject(t.obj);
                        t.hex = e.getEncodedHex();
                    }
                    Sr.asn1.DEROctetString.superclass.constructor.call(this, t), this.hT = "04";
                }, Zr(Sr.asn1.DEROctetString, Sr.asn1.DERAbstractString), Sr.asn1.DERNull = function() {
                    Sr.asn1.DERNull.superclass.constructor.call(this), this.hT = "05", this.hTLV = "0500";
                }, Zr(Sr.asn1.DERNull, Sr.asn1.ASN1Object), Sr.asn1.DERObjectIdentifier = function(t) {
                    Sr.asn1.DERObjectIdentifier.superclass.constructor.call(this), this.hT = "06", this.setValueHex = function(t) {
                        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;
                    }, this.setValueOidString = function(t) {
                        var e = function r(t) {
                            var e = function t(e) {
                                var r = e.toString(16);
                                return 1 == r.length && (r = "0" + r), r;
                            }, r = function t(r) {
                                var n = "", i = parseInt(r, 10).toString(2), o = 7 - i.length % 7;
                                7 == o && (o = 0);
                                for(var s = "", a = 0; a < o; a++)s += "0";
                                i = s + i;
                                for(a = 0; a < i.length - 1; a += 7){
                                    var u = i.substr(a, 7);
                                    a != i.length - 7 && (u = "1" + u), n += e(parseInt(u, 2));
                                }
                                return n;
                            };
                            try {
                                if (!t.match(/^[0-9.]+$/)) return null;
                                var n = "", i = t.split("."), o = 40 * parseInt(i[0], 10) + parseInt(i[1], 10);
                                n += e(o), i.splice(0, 2);
                                for(var s = 0; s < i.length; s++)n += r(i[s]);
                                return n;
                            } catch (t) {
                                return null;
                            }
                        }(t);
                        if (null == e) throw new Error("malformed oid string: " + t);
                        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = e;
                    }, this.setValueName = function(t) {
                        var e = Sr.asn1.x509.OID.name2oid(t);
                        if ("" === e) throw new Error("DERObjectIdentifier oidName undefined: " + t);
                        this.setValueOidString(e);
                    }, this.setValueNameOrOid = function(t) {
                        t.match(/^[0-2].[0-9.]+$/) ? this.setValueOidString(t) : this.setValueName(t);
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, this.setByParam = function(t) {
                        "string" == typeof t ? this.setValueNameOrOid(t) : void 0 !== t.oid ? this.setValueNameOrOid(t.oid) : void 0 !== t.name ? this.setValueNameOrOid(t.name) : void 0 !== t.hex && this.setValueHex(t.hex);
                    }, void 0 !== t && this.setByParam(t);
                }, Zr(Sr.asn1.DERObjectIdentifier, Sr.asn1.ASN1Object), Sr.asn1.DEREnumerated = function(t) {
                    Sr.asn1.DEREnumerated.superclass.constructor.call(this), this.hT = "0a", this.setByBigInteger = function(t) {
                        this.hTLV = null, this.isModified = !0, this.hV = Sr.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t);
                    }, this.setByInteger = function(t) {
                        var e = new w(String(t), 10);
                        this.setByBigInteger(e);
                    }, this.setValueHex = function(t) {
                        this.hV = t;
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, void 0 !== t && (void 0 !== t.int ? this.setByInteger(t.int) : "number" == typeof t ? this.setByInteger(t) : void 0 !== t.hex && this.setValueHex(t.hex));
                }, Zr(Sr.asn1.DEREnumerated, Sr.asn1.ASN1Object), Sr.asn1.DERUTF8String = function(t) {
                    Sr.asn1.DERUTF8String.superclass.constructor.call(this, t), this.hT = "0c";
                }, Zr(Sr.asn1.DERUTF8String, Sr.asn1.DERAbstractString), Sr.asn1.DERNumericString = function(t) {
                    Sr.asn1.DERNumericString.superclass.constructor.call(this, t), this.hT = "12";
                }, Zr(Sr.asn1.DERNumericString, Sr.asn1.DERAbstractString), Sr.asn1.DERPrintableString = function(t) {
                    Sr.asn1.DERPrintableString.superclass.constructor.call(this, t), this.hT = "13";
                }, Zr(Sr.asn1.DERPrintableString, Sr.asn1.DERAbstractString), Sr.asn1.DERTeletexString = function(t) {
                    Sr.asn1.DERTeletexString.superclass.constructor.call(this, t), this.hT = "14";
                }, Zr(Sr.asn1.DERTeletexString, Sr.asn1.DERAbstractString), Sr.asn1.DERIA5String = function(t) {
                    Sr.asn1.DERIA5String.superclass.constructor.call(this, t), this.hT = "16";
                }, Zr(Sr.asn1.DERIA5String, Sr.asn1.DERAbstractString), Sr.asn1.DERVisibleString = function(t) {
                    Sr.asn1.DERIA5String.superclass.constructor.call(this, t), this.hT = "1a";
                }, Zr(Sr.asn1.DERVisibleString, Sr.asn1.DERAbstractString), Sr.asn1.DERBMPString = function(t) {
                    Sr.asn1.DERBMPString.superclass.constructor.call(this, t), this.hT = "1e";
                }, Zr(Sr.asn1.DERBMPString, Sr.asn1.DERAbstractString), Sr.asn1.DERUTCTime = function(t) {
                    Sr.asn1.DERUTCTime.superclass.constructor.call(this, t), this.hT = "17", this.setByDate = function(t) {
                        this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, "utc"), this.hV = kr(this.s);
                    }, this.getFreshValueHex = function() {
                        return void 0 === this.date && void 0 === this.s && (this.date = new Date, this.s = this.formatDate(this.date, "utc"), this.hV = kr(this.s)), this.hV;
                    }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : "string" == typeof t && t.match(/^[0-9]{12}Z$/) ? this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date));
                }, Zr(Sr.asn1.DERUTCTime, Sr.asn1.DERAbstractTime), Sr.asn1.DERGeneralizedTime = function(t) {
                    Sr.asn1.DERGeneralizedTime.superclass.constructor.call(this, t), this.hT = "18", this.withMillis = !1, this.setByDate = function(t) {
                        this.hTLV = null, this.isModified = !0, this.date = t, this.s = this.formatDate(this.date, "gen", this.withMillis), this.hV = kr(this.s);
                    }, this.getFreshValueHex = function() {
                        return void 0 === this.date && void 0 === this.s && (this.date = new Date, this.s = this.formatDate(this.date, "gen", this.withMillis), this.hV = kr(this.s)), this.hV;
                    }, void 0 !== t && (void 0 !== t.str ? this.setString(t.str) : "string" == typeof t && t.match(/^[0-9]{14}Z$/) ? this.setString(t) : void 0 !== t.hex ? this.setStringHex(t.hex) : void 0 !== t.date && this.setByDate(t.date), !0 === t.millis && (this.withMillis = !0));
                }, Zr(Sr.asn1.DERGeneralizedTime, Sr.asn1.DERAbstractTime), Sr.asn1.DERSequence = function(t) {
                    Sr.asn1.DERSequence.superclass.constructor.call(this, t), this.hT = "30", this.getFreshValueHex = function() {
                        for(var t = "", e = 0; e < this.asn1Array.length; e++)t += this.asn1Array[e].getEncodedHex();
                        return this.hV = t, this.hV;
                    };
                }, Zr(Sr.asn1.DERSequence, Sr.asn1.DERAbstractStructured), Sr.asn1.DERSet = function(t) {
                    Sr.asn1.DERSet.superclass.constructor.call(this, t), this.hT = "31", this.sortFlag = !0, this.getFreshValueHex = function() {
                        for(var t = new Array, e = 0; e < this.asn1Array.length; e++){
                            var r = this.asn1Array[e];
                            t.push(r.getEncodedHex());
                        }
                        return 1 == this.sortFlag && t.sort(), this.hV = t.join(""), this.hV;
                    }, void 0 !== t && void 0 !== t.sortflag && 0 == t.sortflag && (this.sortFlag = !1);
                }, Zr(Sr.asn1.DERSet, Sr.asn1.DERAbstractStructured), Sr.asn1.DERTaggedObject = function(t) {
                    Sr.asn1.DERTaggedObject.superclass.constructor.call(this);
                    var e = Sr.asn1;
                    this.hT = "a0", this.hV = "", this.isExplicit = !0, this.asn1Object = null, this.setASN1Object = function(t, e, r) {
                        this.hT = e, this.isExplicit = t, this.asn1Object = r, this.isExplicit ? (this.hV = this.asn1Object.getEncodedHex(), this.hTLV = null, this.isModified = !0) : (this.hV = null, this.hTLV = r.getEncodedHex(), this.hTLV = this.hTLV.replace(/^../, e), this.isModified = !1);
                    }, this.getFreshValueHex = function() {
                        return this.hV;
                    }, this.setByParam = function(t) {
                        null != t.tag && (this.hT = t.tag), null != t.explicit && (this.isExplicit = t.explicit), null != t.tage && (this.hT = t.tage, this.isExplicit = !0), null != t.tagi && (this.hT = t.tagi, this.isExplicit = !1), null != t.obj && (t.obj instanceof e.ASN1Object ? (this.asn1Object = t.obj, this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)) : "object" == g(t.obj) && (this.asn1Object = e.ASN1Util.newObject(t.obj), this.setASN1Object(this.isExplicit, this.hT, this.asn1Object)));
                    }, null != t && this.setByParam(t);
                }, Zr(Sr.asn1.DERTaggedObject, Sr.asn1.ASN1Object);
                var Sr, br, wr, Fr = new function() {};
                function Er(t) {
                    for(var e = new Array, r = 0; r < t.length; r++)e[r] = t.charCodeAt(r);
                    return e;
                }
                function xr(t) {
                    for(var e = "", r = 0; r < t.length; r++)e += String.fromCharCode(t[r]);
                    return e;
                }
                function Ar(t) {
                    for(var e = "", r = 0; r < t.length; r++){
                        var n = t[r].toString(16);
                        1 == n.length && (n = "0" + n), e += n;
                    }
                    return e;
                }
                function kr(t) {
                    return Ar(Er(t));
                }
                function Pr(t) {
                    return t = (t = (t = t.replace(/\=/g, "")).replace(/\+/g, "-")).replace(/\//g, "_");
                }
                function Cr(t) {
                    return t.length % 4 == 2 ? t += "==" : t.length % 4 == 3 && (t += "="), t = (t = t.replace(/-/g, "+")).replace(/_/g, "/");
                }
                function Tr(t) {
                    return t.length % 2 == 1 && (t = "0" + t), Pr(_(t));
                }
                function Rr(t) {
                    return S(Cr(t));
                }
                function Ir(t) {
                    return Kr(Gr(t));
                }
                function Dr(t) {
                    return decodeURIComponent(qr(t));
                }
                function Lr(t) {
                    for(var e = "", r = 0; r < t.length - 1; r += 2)e += String.fromCharCode(parseInt(t.substr(r, 2), 16));
                    return e;
                }
                function Nr(t) {
                    for(var e = "", r = 0; r < t.length; r++)e += ("0" + t.charCodeAt(r).toString(16)).slice(-2);
                    return e;
                }
                function Ur(t) {
                    return _(t);
                }
                function Br(t) {
                    var e = Ur(t).replace(/(.{64})/g, "$1\r\n");
                    return e = e.replace(/\r\n$/, "");
                }
                function Or(t) {
                    return S(t.replace(/[^0-9A-Za-z\/+=]*/g, ""));
                }
                function jr(t, e) {
                    return "-----BEGIN " + e + "-----\r\n" + Br(t) + "\r\n-----END " + e + "-----\r\n";
                }
                function Mr(t, e) {
                    if (-1 == t.indexOf("-----BEGIN ")) throw "can't find PEM header: " + e;
                    return Or(t = void 0 !== e ? (t = t.replace(new RegExp("^[^]*-----BEGIN " + e + "-----"), "")).replace(new RegExp("-----END " + e + "-----[^]*$"), "") : (t = t.replace(/^[^]*-----BEGIN [^-]+-----/, "")).replace(/-----END [^-]+-----[^]*$/, ""));
                }
                function Hr(t) {
                    var e, r, n, i, o, s, a, u, c, h, l;
                    if (l = t.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/)) return u = l[1], e = parseInt(u), 2 === u.length && (50 <= e && e < 100 ? e = 1900 + e : 0 <= e && e < 50 && (e = 2e3 + e)), r = parseInt(l[2]) - 1, n = parseInt(l[3]), i = parseInt(l[4]), o = parseInt(l[5]), s = parseInt(l[6]), a = 0, "" !== (c = l[7]) && (h = (c.substr(1) + "00").substr(0, 3), a = parseInt(h)), Date.UTC(e, r, n, i, o, s, a);
                    throw "unsupported zulu format: " + t;
                }
                function Vr(t) {
                    return ~~(Hr(t) / 1e3);
                }
                function Kr(t) {
                    return t.replace(/%/g, "");
                }
                function qr(t) {
                    return t.replace(/(..)/g, "%$1");
                }
                function Jr(t) {
                    var e = "malformed IPv6 address";
                    if (!t.match(/^[0-9A-Fa-f:]+$/)) throw e;
                    var r = (t = t.toLowerCase()).split(":").length - 1;
                    if (r < 2) throw e;
                    var n = ":".repeat(7 - r + 2), i = (t = t.replace("::", n)).split(":");
                    if (8 != i.length) throw e;
                    for(var o = 0; o < 8; o++)i[o] = ("0000" + i[o]).slice(-4);
                    return i.join("");
                }
                function Wr(t) {
                    if (!t.match(/^[0-9A-Fa-f]{32}$/)) throw "malformed IPv6 address octet";
                    for(var e = (t = t.toLowerCase()).match(/.{1,4}/g), r = 0; r < 8; r++)e[r] = e[r].replace(/^0+/, ""), "" == e[r] && (e[r] = "0");
                    var n = (t = ":" + e.join(":") + ":").match(/:(0:){2,}/g);
                    if (null === n) return t.slice(1, -1);
                    var i = "";
                    for(r = 0; r < n.length; r++)n[r].length > i.length && (i = n[r]);
                    return (t = t.replace(i, "::")).slice(1, -1);
                }
                function zr(t) {
                    var e = "malformed hex value";
                    if (!t.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) throw e;
                    if (8 != t.length) return 32 == t.length ? Wr(t) : t;
                    try {
                        return parseInt(t.substr(0, 2), 16) + "." + parseInt(t.substr(2, 2), 16) + "." + parseInt(t.substr(4, 2), 16) + "." + parseInt(t.substr(6, 2), 16);
                    } catch (t) {
                        throw e;
                    }
                }
                function Yr(t) {
                    return t.match(/.{4}/g).map(function e(t) {
                        var e = parseInt(t.substr(0, 2), 16), r = parseInt(t.substr(2), 16);
                        if (0 == e & r < 128) return String.fromCharCode(r);
                        if (e < 8) {
                            var n = 128 | 63 & r;
                            return Dr((192 | (7 & e) << 3 | (192 & r) >> 6).toString(16) + n.toString(16));
                        }
                        n = 128 | (15 & e) << 2 | (192 & r) >> 6;
                        var i = 128 | 63 & r;
                        return Dr((224 | (240 & e) >> 4).toString(16) + n.toString(16) + i.toString(16));
                    }).join("");
                }
                function Gr(t) {
                    for(var e = encodeURIComponent(t), r = "", n = 0; n < e.length; n++)"%" == e[n] ? (r += e.substr(n, 3), n += 2) : r = r + "%" + kr(e[n]);
                    return r;
                }
                function Xr(t) {
                    return !(t.length % 2 != 0 || !t.match(/^[0-9a-f]+$/) && !t.match(/^[0-9A-F]+$/));
                }
                function $r(t) {
                    return t.length % 2 == 1 ? "0" + t : t.substr(0, 1) > "7" ? "00" + t : t;
                }
                Fr.getLblen = function(t, e) {
                    if ("8" != t.substr(e + 2, 1)) return 1;
                    var r = parseInt(t.substr(e + 3, 1));
                    return 0 == r ? -1 : 0 < r && r < 10 ? r + 1 : -2;
                }, Fr.getL = function(t, e) {
                    var r = Fr.getLblen(t, e);
                    return r < 1 ? "" : t.substr(e + 2, 2 * r);
                }, Fr.getVblen = function(t, e) {
                    var r;
                    return "" == (r = Fr.getL(t, e)) ? -1 : ("8" === r.substr(0, 1) ? new w(r.substr(2), 16) : new w(r, 16)).intValue();
                }, Fr.getVidx = function(t, e) {
                    var r = Fr.getLblen(t, e);
                    return r < 0 ? r : e + 2 * (r + 1);
                }, Fr.getV = function(t, e) {
                    var r = Fr.getVidx(t, e), n = Fr.getVblen(t, e);
                    return t.substr(r, 2 * n);
                }, Fr.getTLV = function(t, e) {
                    return t.substr(e, 2) + Fr.getL(t, e) + Fr.getV(t, e);
                }, Fr.getTLVblen = function(t, e) {
                    return 2 + 2 * Fr.getLblen(t, e) + 2 * Fr.getVblen(t, e);
                }, Fr.getNextSiblingIdx = function(t, e) {
                    return Fr.getVidx(t, e) + 2 * Fr.getVblen(t, e);
                }, Fr.getChildIdx = function(t, e) {
                    var r, n, i, o = Fr, s = [];
                    r = o.getVidx(t, e), n = 2 * o.getVblen(t, e), "03" == t.substr(e, 2) && (r += 2, n -= 2), i = 0;
                    for(var a = r; i <= n;){
                        var u = o.getTLVblen(t, a);
                        if ((i += u) <= n && s.push(a), a += u, i >= n) break;
                    }
                    return s;
                }, Fr.getNthChildIdx = function(t, e, r) {
                    return Fr.getChildIdx(t, e)[r];
                }, Fr.getIdxbyList = function(t, e, r, n) {
                    var i, o, s = Fr;
                    return 0 == r.length ? void 0 !== n && t.substr(e, 2) !== n ? -1 : e : (i = r.shift()) >= (o = s.getChildIdx(t, e)).length ? -1 : s.getIdxbyList(t, o[i], r, n);
                }, Fr.getIdxbyListEx = function(t, e, r, n) {
                    var i, o, s = Fr;
                    if (0 == r.length) return void 0 !== n && t.substr(e, 2) !== n ? -1 : e;
                    i = r.shift(), o = s.getChildIdx(t, e);
                    for(var a = 0, u = 0; u < o.length; u++){
                        var c = t.substr(o[u], 2);
                        if ("number" == typeof i && !s.isContextTag(c) && a == i || "string" == typeof i && s.isContextTag(c, i)) return s.getIdxbyListEx(t, o[u], r, n);
                        s.isContextTag(c) || a++;
                    }
                    return -1;
                }, Fr.getTLVbyList = function(t, e, r, n) {
                    var i = Fr, o = i.getIdxbyList(t, e, r, n);
                    return -1 == o || o >= t.length ? null : i.getTLV(t, o);
                }, Fr.getTLVbyListEx = function(t, e, r, n) {
                    var i = Fr, o = i.getIdxbyListEx(t, e, r, n);
                    return -1 == o ? null : i.getTLV(t, o);
                }, Fr.getVbyList = function(t, e, r, n, i) {
                    var o, s, a = Fr;
                    return -1 == (o = a.getIdxbyList(t, e, r, n)) || o >= t.length ? null : (s = a.getV(t, o), !0 === i && (s = s.substr(2)), s);
                }, Fr.getVbyListEx = function(t, e, r, n, i) {
                    var o, s, a = Fr;
                    return -1 == (o = a.getIdxbyListEx(t, e, r, n)) ? null : (s = a.getV(t, o), "03" == t.substr(o, 2) && !1 !== i && (s = s.substr(2)), s);
                }, Fr.getInt = function(t, e, r) {
                    null == r && (r = -1);
                    try {
                        var n = t.substr(e, 2);
                        if ("02" != n && "03" != n) return r;
                        var i = Fr.getV(t, e);
                        return "02" == n ? parseInt(i, 16) : function o(t) {
                            try {
                                var e = t.substr(0, 2);
                                if ("00" == e) return parseInt(t.substr(2), 16);
                                var r = parseInt(e, 16), n = t.substr(2), i = parseInt(n, 16).toString(2);
                                return "0" == i && (i = "00000000"), i = i.slice(0, 0 - r), parseInt(i, 2);
                            } catch (t) {
                                return -1;
                            }
                        }(i);
                    } catch (t) {
                        return r;
                    }
                }, Fr.getOID = function(t, e, r) {
                    null == r && (r = null);
                    try {
                        return "06" != t.substr(e, 2) ? r : function n(t) {
                            if (!Xr(t)) return null;
                            try {
                                var e = [], r = t.substr(0, 2), n = parseInt(r, 16);
                                e[0] = new String(Math.floor(n / 40)), e[1] = new String(n % 40);
                                for(var i = t.substr(2), o = [], s = 0; s < i.length / 2; s++)o.push(parseInt(i.substr(2 * s, 2), 16));
                                var a = [], u = "";
                                for(s = 0; s < o.length; s++)128 & o[s] ? u += Qr((127 & o[s]).toString(2), 7) : (u += Qr((127 & o[s]).toString(2), 7), a.push(new String(parseInt(u, 2))), u = "");
                                var c = e.join(".");
                                return a.length > 0 && (c = c + "." + a.join(".")), c;
                            } catch (t) {
                                return null;
                            }
                        }(Fr.getV(t, e));
                    } catch (t) {
                        return r;
                    }
                }, Fr.getOIDName = function(t, e, r) {
                    null == r && (r = null);
                    try {
                        var n = Fr.getOID(t, e, r);
                        if (n == r) return r;
                        var i = Sr.asn1.x509.OID.oid2name(n);
                        return "" == i ? n : i;
                    } catch (t) {
                        return r;
                    }
                }, Fr.getString = function(t, e, r) {
                    null == r && (r = null);
                    try {
                        return Lr(Fr.getV(t, e));
                    } catch (t) {
                        return r;
                    }
                }, Fr.hextooidstr = function(t) {
                    var e = function t(e, r) {
                        return e.length >= r ? e : new Array(r - e.length + 1).join("0") + e;
                    }, r = [], n = t.substr(0, 2), i = parseInt(n, 16);
                    r[0] = new String(Math.floor(i / 40)), r[1] = new String(i % 40);
                    for(var o = t.substr(2), s = [], a = 0; a < o.length / 2; a++)s.push(parseInt(o.substr(2 * a, 2), 16));
                    var u = [], c = "";
                    for(a = 0; a < s.length; a++)128 & s[a] ? c += e((127 & s[a]).toString(2), 7) : (c += e((127 & s[a]).toString(2), 7), u.push(new String(parseInt(c, 2))), c = "");
                    var h = r.join(".");
                    return u.length > 0 && (h = h + "." + u.join(".")), h;
                }, Fr.dump = function(t, e, r, n) {
                    var i = Fr, o = i.getV, s = i.dump, a = i.getChildIdx, u = t;
                    t instanceof Sr.asn1.ASN1Object && (u = t.getEncodedHex());
                    var c = function t(e, r) {
                        return e.length <= 2 * r ? e : e.substr(0, r) + "..(total " + e.length / 2 + "bytes).." + e.substr(e.length - r, r);
                    };
                    void 0 === e && (e = {
                        ommit_long_octet: 32
                    }), void 0 === r && (r = 0), void 0 === n && (n = "");
                    var h, l = e.ommit_long_octet;
                    if ("01" == (h = u.substr(r, 2))) return "00" == (f = o(u, r)) ? n + "BOOLEAN FALSE\n" : n + "BOOLEAN TRUE\n";
                    if ("02" == h) return n + "INTEGER " + c(f = o(u, r), l) + "\n";
                    if ("03" == h) {
                        var f = o(u, r);
                        if (i.isASN1HEX(f.substr(2))) {
                            var g = n + "BITSTRING, encapsulates\n";
                            return g += s(f.substr(2), e, 0, n + "  ");
                        }
                        return n + "BITSTRING " + c(f, l) + "\n";
                    }
                    if ("04" == h) {
                        f = o(u, r);
                        if (i.isASN1HEX(f)) {
                            g = n + "OCTETSTRING, encapsulates\n";
                            return g += s(f, e, 0, n + "  ");
                        }
                        return n + "OCTETSTRING " + c(f, l) + "\n";
                    }
                    if ("05" == h) return n + "NULL\n";
                    if ("06" == h) {
                        var d = o(u, r), p = Sr.asn1.ASN1Util.oidHexToInt(d), v = Sr.asn1.x509.OID.oid2name(p), y = p.replace(/\./g, " ");
                        return "" != v ? n + "ObjectIdentifier " + v + " (" + y + ")\n" : n + "ObjectIdentifier (" + y + ")\n";
                    }
                    if ("0a" == h) return n + "ENUMERATED " + parseInt(o(u, r)) + "\n";
                    if ("0c" == h) return n + "UTF8String '" + Dr(o(u, r)) + "'\n";
                    if ("13" == h) return n + "PrintableString '" + Dr(o(u, r)) + "'\n";
                    if ("14" == h) return n + "TeletexString '" + Dr(o(u, r)) + "'\n";
                    if ("16" == h) return n + "IA5String '" + Dr(o(u, r)) + "'\n";
                    if ("17" == h) return n + "UTCTime " + Dr(o(u, r)) + "\n";
                    if ("18" == h) return n + "GeneralizedTime " + Dr(o(u, r)) + "\n";
                    if ("1a" == h) return n + "VisualString '" + Dr(o(u, r)) + "'\n";
                    if ("1e" == h) return n + "BMPString '" + Yr(o(u, r)) + "'\n";
                    if ("30" == h) {
                        if ("3000" == u.substr(r, 4)) return n + "SEQUENCE {}\n";
                        g = n + "SEQUENCE\n";
                        var m = e;
                        if ((2 == (b = a(u, r)).length || 3 == b.length) && "06" == u.substr(b[0], 2) && "04" == u.substr(b[b.length - 1], 2)) {
                            v = i.oidname(o(u, b[0]));
                            var _ = JSON.parse(JSON.stringify(e));
                            _.x509ExtName = v, m = _;
                        }
                        for(var S = 0; S < b.length; S++)g += s(u, m, b[S], n + "  ");
                        return g;
                    }
                    if ("31" == h) {
                        g = n + "SET\n";
                        var b = a(u, r);
                        for(S = 0; S < b.length; S++)g += s(u, e, b[S], n + "  ");
                        return g;
                    }
                    if (0 != (128 & (h = parseInt(h, 16)))) {
                        var w = 31 & h;
                        if (0 != (32 & h)) {
                            for(g = n + "[" + w + "]\n", b = a(u, r), S = 0; S < b.length; S++)g += s(u, e, b[S], n + "  ");
                            return g;
                        }
                        f = o(u, r);
                        if (Fr.isASN1HEX(f)) {
                            var g = n + "[" + w + "]\n";
                            return g += s(f, e, 0, n + "  ");
                        }
                        return ("68747470" == f.substr(0, 8) || "subjectAltName" === e.x509ExtName && 2 == w) && (f = Dr(f)), g = n + "[" + w + "] " + f + "\n";
                    }
                    return n + "UNKNOWN(" + h + ") " + o(u, r) + "\n";
                }, Fr.isContextTag = function(t, e) {
                    var r, n;
                    t = t.toLowerCase();
                    try {
                        r = parseInt(t, 16);
                    } catch (t) {
                        return -1;
                    }
                    if (void 0 === e) return 128 == (192 & r);
                    try {
                        return null != e.match(/^\[[0-9]+\]$/) && !((n = parseInt(e.substr(1, e.length - 1), 10)) > 31) && 128 == (192 & r) && (31 & r) == n;
                    } catch (t) {
                        return !1;
                    }
                }, Fr.isASN1HEX = function(t) {
                    var e = Fr;
                    if (t.length % 2 == 1) return !1;
                    var r = e.getVblen(t, 0), n = t.substr(0, 2), i = e.getL(t, 0);
                    return t.length - n.length - i.length == 2 * r;
                }, Fr.checkStrictDER = function(t, e, r, n, i) {
                    var o = Fr;
                    if (void 0 === r) {
                        if ("string" != typeof t) throw new Error("not hex string");
                        if (t = t.toLowerCase(), !Sr.lang.String.isHex(t)) throw new Error("not hex string");
                        r = t.length, i = (n = t.length / 2) < 128 ? 1 : Math.ceil(n.toString(16)) + 1;
                    }
                    if (o.getL(t, e).length > 2 * i) throw new Error("L of TLV too long: idx=" + e);
                    var s = o.getVblen(t, e);
                    if (s > n) throw new Error("value of L too long than hex: idx=" + e);
                    var a = o.getTLV(t, e), u = a.length - 2 - o.getL(t, e).length;
                    if (u !== 2 * s) throw new Error("V string length and L's value not the same:" + u + "/" + 2 * s);
                    if (0 === e && t.length != a.length) throw new Error("total length and TLV length unmatch:" + t.length + "!=" + a.length);
                    var c = t.substr(e, 2);
                    if ("02" === c) {
                        var h = o.getVidx(t, e);
                        if ("00" == t.substr(h, 2) && t.charCodeAt(h + 2) < 56) throw new Error("not least zeros for DER INTEGER");
                    }
                    if (32 & parseInt(c, 16)) {
                        for(var l = o.getVblen(t, e), f = 0, g = o.getChildIdx(t, e), d = 0; d < g.length; d++)f += o.getTLV(t, g[d]).length, o.checkStrictDER(t, g[d], r, n, i);
                        if (2 * l != f) throw new Error("sum of children's TLV length and L unmatch: " + 2 * l + "!=" + f);
                    }
                }, Fr.oidname = function(t) {
                    var e = Sr.asn1;
                    Sr.lang.String.isHex(t) && (t = e.ASN1Util.oidHexToInt(t));
                    var r = e.x509.OID.oid2name(t);
                    return "" === r && (r = t), r;
                }, void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.lang && Sr.lang || (Sr.lang = {}), Sr.lang.String = function() {}, "function" == typeof t ? (e.utf8tob64u = br = function e(r) {
                    return Pr(t.from(r, "utf8").toString("base64"));
                }, e.b64utoutf8 = wr = function e(r) {
                    return t.from(Cr(r), "base64").toString("utf8");
                }) : (e.utf8tob64u = br = function t(e) {
                    return Tr(Kr(Gr(e)));
                }, e.b64utoutf8 = wr = function t(e) {
                    return decodeURIComponent(qr(Rr(e)));
                }), Sr.lang.String.isInteger = function(t) {
                    return !!t.match(/^[0-9]+$/) || !!t.match(/^-[0-9]+$/);
                }, Sr.lang.String.isHex = function(t) {
                    return Xr(t);
                }, Sr.lang.String.isBase64 = function(t) {
                    return !(!(t = t.replace(/\s+/g, "")).match(/^[0-9A-Za-z+\/]+={0,3}$/) || t.length % 4 != 0);
                }, Sr.lang.String.isBase64URL = function(t) {
                    return !t.match(/[+/=]/) && (t = Cr(t), Sr.lang.String.isBase64(t));
                }, Sr.lang.String.isIntegerArray = function(t) {
                    return !!(t = t.replace(/\s+/g, "")).match(/^\[[0-9,]+\]$/);
                }, Sr.lang.String.isPrintable = function(t) {
                    return null !== t.match(/^[0-9A-Za-z '()+,-./:=?]*$/);
                }, Sr.lang.String.isIA5 = function(t) {
                    return null !== t.match(/^[\x20-\x21\x23-\x7f]*$/);
                }, Sr.lang.String.isMail = function(t) {
                    return null !== t.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/);
                };
                var Qr = function t(e, r, n) {
                    return null == n && (n = "0"), e.length >= r ? e : new Array(r - e.length + 1).join(n) + e;
                };
                function Zr(t, e) {
                    var r = function t() {};
                    r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t, t.superclass = e.prototype, e.prototype.constructor == Object.prototype.constructor && (e.prototype.constructor = e);
                }
                void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.crypto && Sr.crypto || (Sr.crypto = {}), Sr.crypto.Util = new function() {
                    this.DIGESTINFOHEAD = {
                        sha1: "3021300906052b0e03021a05000414",
                        sha224: "302d300d06096086480165030402040500041c",
                        sha256: "3031300d060960864801650304020105000420",
                        sha384: "3041300d060960864801650304020205000430",
                        sha512: "3051300d060960864801650304020305000440",
                        md2: "3020300c06082a864886f70d020205000410",
                        md5: "3020300c06082a864886f70d020505000410",
                        ripemd160: "3021300906052b2403020105000414"
                    }, this.DEFAULTPROVIDER = {
                        md5: "cryptojs",
                        sha1: "cryptojs",
                        sha224: "cryptojs",
                        sha256: "cryptojs",
                        sha384: "cryptojs",
                        sha512: "cryptojs",
                        ripemd160: "cryptojs",
                        hmacmd5: "cryptojs",
                        hmacsha1: "cryptojs",
                        hmacsha224: "cryptojs",
                        hmacsha256: "cryptojs",
                        hmacsha384: "cryptojs",
                        hmacsha512: "cryptojs",
                        hmacripemd160: "cryptojs",
                        MD5withRSA: "cryptojs/jsrsa",
                        SHA1withRSA: "cryptojs/jsrsa",
                        SHA224withRSA: "cryptojs/jsrsa",
                        SHA256withRSA: "cryptojs/jsrsa",
                        SHA384withRSA: "cryptojs/jsrsa",
                        SHA512withRSA: "cryptojs/jsrsa",
                        RIPEMD160withRSA: "cryptojs/jsrsa",
                        MD5withECDSA: "cryptojs/jsrsa",
                        SHA1withECDSA: "cryptojs/jsrsa",
                        SHA224withECDSA: "cryptojs/jsrsa",
                        SHA256withECDSA: "cryptojs/jsrsa",
                        SHA384withECDSA: "cryptojs/jsrsa",
                        SHA512withECDSA: "cryptojs/jsrsa",
                        RIPEMD160withECDSA: "cryptojs/jsrsa",
                        SHA1withDSA: "cryptojs/jsrsa",
                        SHA224withDSA: "cryptojs/jsrsa",
                        SHA256withDSA: "cryptojs/jsrsa",
                        MD5withRSAandMGF1: "cryptojs/jsrsa",
                        SHAwithRSAandMGF1: "cryptojs/jsrsa",
                        SHA1withRSAandMGF1: "cryptojs/jsrsa",
                        SHA224withRSAandMGF1: "cryptojs/jsrsa",
                        SHA256withRSAandMGF1: "cryptojs/jsrsa",
                        SHA384withRSAandMGF1: "cryptojs/jsrsa",
                        SHA512withRSAandMGF1: "cryptojs/jsrsa",
                        RIPEMD160withRSAandMGF1: "cryptojs/jsrsa"
                    }, this.CRYPTOJSMESSAGEDIGESTNAME = {
                        md5: v.algo.MD5,
                        sha1: v.algo.SHA1,
                        sha224: v.algo.SHA224,
                        sha256: v.algo.SHA256,
                        sha384: v.algo.SHA384,
                        sha512: v.algo.SHA512,
                        ripemd160: v.algo.RIPEMD160
                    }, this.getDigestInfoHex = function(t, e) {
                        if (void 0 === this.DIGESTINFOHEAD[e]) throw "alg not supported in Util.DIGESTINFOHEAD: " + e;
                        return this.DIGESTINFOHEAD[e] + t;
                    }, this.getPaddedDigestInfoHex = function(t, e, r) {
                        var n = this.getDigestInfoHex(t, e), i = r / 4;
                        if (n.length + 22 > i) throw "key is too short for SigAlg: keylen=" + r + "," + e;
                        for(var o = "0001", s = "00" + n, a = "", u = i - o.length - s.length, c = 0; c < u; c += 2)a += "ff";
                        return o + a + s;
                    }, this.hashString = function(t, e) {
                        return new Sr.crypto.MessageDigest({
                            alg: e
                        }).digestString(t);
                    }, this.hashHex = function(t, e) {
                        return new Sr.crypto.MessageDigest({
                            alg: e
                        }).digestHex(t);
                    }, this.sha1 = function(t) {
                        return this.hashString(t, "sha1");
                    }, this.sha256 = function(t) {
                        return this.hashString(t, "sha256");
                    }, this.sha256Hex = function(t) {
                        return this.hashHex(t, "sha256");
                    }, this.sha512 = function(t) {
                        return this.hashString(t, "sha512");
                    }, this.sha512Hex = function(t) {
                        return this.hashHex(t, "sha512");
                    }, this.isKey = function(t) {
                        return t instanceof Me || t instanceof Sr.crypto.DSA || t instanceof Sr.crypto.ECDSA;
                    };
                }, Sr.crypto.Util.md5 = function(t) {
                    return new Sr.crypto.MessageDigest({
                        alg: "md5",
                        prov: "cryptojs"
                    }).digestString(t);
                }, Sr.crypto.Util.ripemd160 = function(t) {
                    return new Sr.crypto.MessageDigest({
                        alg: "ripemd160",
                        prov: "cryptojs"
                    }).digestString(t);
                }, Sr.crypto.Util.SECURERANDOMGEN = new Be, Sr.crypto.Util.getRandomHexOfNbytes = function(t) {
                    var e = new Array(t);
                    return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(e), Ar(e);
                }, Sr.crypto.Util.getRandomBigIntegerOfNbytes = function(t) {
                    return new w(Sr.crypto.Util.getRandomHexOfNbytes(t), 16);
                }, Sr.crypto.Util.getRandomHexOfNbits = function(t) {
                    var e = t % 8, r = new Array((t - e) / 8 + 1);
                    return Sr.crypto.Util.SECURERANDOMGEN.nextBytes(r), r[0] = (255 << e & 255 ^ 255) & r[0], Ar(r);
                }, Sr.crypto.Util.getRandomBigIntegerOfNbits = function(t) {
                    return new w(Sr.crypto.Util.getRandomHexOfNbits(t), 16);
                }, Sr.crypto.Util.getRandomBigIntegerZeroToMax = function(t) {
                    for(var e = t.bitLength();;){
                        var r = Sr.crypto.Util.getRandomBigIntegerOfNbits(e);
                        if (-1 != t.compareTo(r)) return r;
                    }
                }, Sr.crypto.Util.getRandomBigIntegerMinToMax = function(t, e) {
                    var r = t.compareTo(e);
                    if (1 == r) throw "biMin is greater than biMax";
                    if (0 == r) return t;
                    var n = e.subtract(t);
                    return Sr.crypto.Util.getRandomBigIntegerZeroToMax(n).add(t);
                }, Sr.crypto.MessageDigest = function(t) {
                    this.setAlgAndProvider = function(t, e) {
                        if (null !== (t = Sr.crypto.MessageDigest.getCanonicalAlgName(t)) && void 0 === e && (e = Sr.crypto.Util.DEFAULTPROVIDER[t]), -1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(t) && "cryptojs" == e) {
                            try {
                                this.md = Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create();
                            } catch (e) {
                                throw "setAlgAndProvider hash alg set fail alg=" + t + "/" + e;
                            }
                            this.updateString = function(t) {
                                this.md.update(t);
                            }, this.updateHex = function(t) {
                                var e = v.enc.Hex.parse(t);
                                this.md.update(e);
                            }, this.digest = function() {
                                return this.md.finalize().toString(v.enc.Hex);
                            }, this.digestString = function(t) {
                                return this.updateString(t), this.digest();
                            }, this.digestHex = function(t) {
                                return this.updateHex(t), this.digest();
                            };
                        }
                        if (-1 != ":sha256:".indexOf(t) && "sjcl" == e) {
                            try {
                                this.md = new sjcl.hash.sha256;
                            } catch (e) {
                                throw "setAlgAndProvider hash alg set fail alg=" + t + "/" + e;
                            }
                            this.updateString = function(t) {
                                this.md.update(t);
                            }, this.updateHex = function(t) {
                                var e = sjcl.codec.hex.toBits(t);
                                this.md.update(e);
                            }, this.digest = function() {
                                var t = this.md.finalize();
                                return sjcl.codec.hex.fromBits(t);
                            }, this.digestString = function(t) {
                                return this.updateString(t), this.digest();
                            }, this.digestHex = function(t) {
                                return this.updateHex(t), this.digest();
                            };
                        }
                    }, this.updateString = function(t) {
                        throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
                    }, this.updateHex = function(t) {
                        throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
                    }, this.digest = function() {
                        throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
                    }, this.digestString = function(t) {
                        throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
                    }, this.digestHex = function(t) {
                        throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
                    }, void 0 !== t && void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov && (this.provName = Sr.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName));
                }, Sr.crypto.MessageDigest.getCanonicalAlgName = function(t) {
                    return "string" == typeof t && (t = (t = t.toLowerCase()).replace(/-/, "")), t;
                }, Sr.crypto.MessageDigest.getHashLength = function(t) {
                    var e = Sr.crypto.MessageDigest, r = e.getCanonicalAlgName(t);
                    if (void 0 === e.HASHLENGTH[r]) throw "not supported algorithm: " + t;
                    return e.HASHLENGTH[r];
                }, Sr.crypto.MessageDigest.HASHLENGTH = {
                    md5: 16,
                    sha1: 20,
                    sha224: 28,
                    sha256: 32,
                    sha384: 48,
                    sha512: 64,
                    ripemd160: 20
                }, Sr.crypto.Mac = function(t) {
                    this.setAlgAndProvider = function(t, e) {
                        if (null == (t = t.toLowerCase()) && (t = "hmacsha1"), "hmac" != (t = t.toLowerCase()).substr(0, 4)) throw "setAlgAndProvider unsupported HMAC alg: " + t;
                        void 0 === e && (e = Sr.crypto.Util.DEFAULTPROVIDER[t]), this.algProv = t + "/" + e;
                        var r = t.substr(4);
                        if (-1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(r) && "cryptojs" == e) {
                            try {
                                var n = Sr.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[r];
                                this.mac = v.algo.HMAC.create(n, this.pass);
                            } catch (t) {
                                throw "setAlgAndProvider hash alg set fail hashAlg=" + r + "/" + t;
                            }
                            this.updateString = function(t) {
                                this.mac.update(t);
                            }, this.updateHex = function(t) {
                                var e = v.enc.Hex.parse(t);
                                this.mac.update(e);
                            }, this.doFinal = function() {
                                return this.mac.finalize().toString(v.enc.Hex);
                            }, this.doFinalString = function(t) {
                                return this.updateString(t), this.doFinal();
                            }, this.doFinalHex = function(t) {
                                return this.updateHex(t), this.doFinal();
                            };
                        }
                    }, this.updateString = function(t) {
                        throw "updateString(str) not supported for this alg/prov: " + this.algProv;
                    }, this.updateHex = function(t) {
                        throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
                    }, this.doFinal = function() {
                        throw "digest() not supported for this alg/prov: " + this.algProv;
                    }, this.doFinalString = function(t) {
                        throw "digestString(str) not supported for this alg/prov: " + this.algProv;
                    }, this.doFinalHex = function(t) {
                        throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
                    }, this.setPassword = function(t) {
                        if ("string" == typeof t) {
                            var e = t;
                            return t.length % 2 != 1 && t.match(/^[0-9A-Fa-f]+$/) || (e = Nr(t)), void (this.pass = v.enc.Hex.parse(e));
                        }
                        if ("object" != (void 0 === t ? "undefined" : g(t))) throw "KJUR.crypto.Mac unsupported password type: " + t;
                        e = null;
                        if (void 0 !== t.hex) {
                            if (t.hex.length % 2 != 0 || !t.hex.match(/^[0-9A-Fa-f]+$/)) throw "Mac: wrong hex password: " + t.hex;
                            e = t.hex;
                        }
                        if (void 0 !== t.utf8 && (e = Ir(t.utf8)), void 0 !== t.rstr && (e = Nr(t.rstr)), void 0 !== t.b64 && (e = S(t.b64)), void 0 !== t.b64u && (e = Rr(t.b64u)), null == e) throw "KJUR.crypto.Mac unsupported password type: " + t;
                        this.pass = v.enc.Hex.parse(e);
                    }, void 0 !== t && (void 0 !== t.pass && this.setPassword(t.pass), void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov && (this.provName = Sr.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName)));
                }, Sr.crypto.Signature = function(t) {
                    var e = null;
                    if (this._setAlgNames = function() {
                        var t = this.algName.match(/^(.+)with(.+)$/);
                        t && (this.mdAlgName = t[1].toLowerCase(), this.pubkeyAlgName = t[2].toLowerCase(), "rsaandmgf1" == this.pubkeyAlgName && "sha" == this.mdAlgName && (this.mdAlgName = "sha1"));
                    }, this._zeroPaddingOfSignature = function(t, e) {
                        for(var r = "", n = e / 4 - t.length, i = 0; i < n; i++)r += "0";
                        return r + t;
                    }, this.setAlgAndProvider = function(t, e) {
                        if (this._setAlgNames(), "cryptojs/jsrsa" != e) throw new Error("provider not supported: " + e);
                        if (-1 != ":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)) {
                            try {
                                this.md = new Sr.crypto.MessageDigest({
                                    alg: this.mdAlgName
                                });
                            } catch (t) {
                                throw new Error("setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + t);
                            }
                            this.init = function(t, e) {
                                var r = null;
                                try {
                                    r = void 0 === e ? tn.getKey(t) : tn.getKey(t, e);
                                } catch (t) {
                                    throw "init failed:" + t;
                                }
                                if (!0 === r.isPrivate) this.prvKey = r, this.state = "SIGN";
                                else {
                                    if (!0 !== r.isPublic) throw "init failed.:" + r;
                                    this.pubKey = r, this.state = "VERIFY";
                                }
                            }, this.updateString = function(t) {
                                this.md.updateString(t);
                            }, this.updateHex = function(t) {
                                this.md.updateHex(t);
                            }, this.sign = function() {
                                if (this.sHashHex = this.md.digest(), void 0 === this.prvKey && void 0 !== this.ecprvhex && void 0 !== this.eccurvename && void 0 !== Sr.crypto.ECDSA && (this.prvKey = new Sr.crypto.ECDSA({
                                    curve: this.eccurvename,
                                    prv: this.ecprvhex
                                })), this.prvKey instanceof Me && "rsaandmgf1" === this.pubkeyAlgName) this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
                                else if (this.prvKey instanceof Me && "rsa" === this.pubkeyAlgName) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
                                else if (this.prvKey instanceof Sr.crypto.ECDSA) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
                                else {
                                    if (!(this.prvKey instanceof Sr.crypto.DSA)) throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
                                    this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
                                }
                                return this.hSign;
                            }, this.signString = function(t) {
                                return this.updateString(t), this.sign();
                            }, this.signHex = function(t) {
                                return this.updateHex(t), this.sign();
                            }, this.verify = function(t) {
                                if (this.sHashHex = this.md.digest(), void 0 === this.pubKey && void 0 !== this.ecpubhex && void 0 !== this.eccurvename && void 0 !== Sr.crypto.ECDSA && (this.pubKey = new Sr.crypto.ECDSA({
                                    curve: this.eccurvename,
                                    pub: this.ecpubhex
                                })), this.pubKey instanceof Me && "rsaandmgf1" === this.pubkeyAlgName) return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, t, this.mdAlgName, this.pssSaltLen);
                                if (this.pubKey instanceof Me && "rsa" === this.pubkeyAlgName) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);
                                if (void 0 !== Sr.crypto.ECDSA && this.pubKey instanceof Sr.crypto.ECDSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);
                                if (void 0 !== Sr.crypto.DSA && this.pubKey instanceof Sr.crypto.DSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, t);
                                throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
                            };
                        }
                    }, this.init = function(t, e) {
                        throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
                    }, this.updateString = function(t) {
                        throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
                    }, this.updateHex = function(t) {
                        throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
                    }, this.sign = function() {
                        throw "sign() not supported for this alg:prov=" + this.algProvName;
                    }, this.signString = function(t) {
                        throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
                    }, this.signHex = function(t) {
                        throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
                    }, this.verify = function(t) {
                        throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
                    }, this.initParams = t, void 0 !== t && (void 0 !== t.alg && (this.algName = t.alg, void 0 === t.prov ? this.provName = Sr.crypto.Util.DEFAULTPROVIDER[this.algName] : this.provName = t.prov, this.algProvName = this.algName + ":" + this.provName, this.setAlgAndProvider(this.algName, this.provName), this._setAlgNames()), void 0 !== t.psssaltlen && (this.pssSaltLen = t.psssaltlen), void 0 !== t.prvkeypem)) {
                        if (void 0 !== t.prvkeypas) throw "both prvkeypem and prvkeypas parameters not supported";
                        try {
                            e = tn.getKey(t.prvkeypem);
                            this.init(e);
                        } catch (t) {
                            throw "fatal error to load pem private key: " + t;
                        }
                    }
                }, Sr.crypto.Cipher = function(t) {}, Sr.crypto.Cipher.encrypt = function(t, e, r) {
                    if (e instanceof Me && e.isPublic) {
                        var n = Sr.crypto.Cipher.getAlgByKeyAndName(e, r);
                        if ("RSA" === n) return e.encrypt(t);
                        if ("RSAOAEP" === n) return e.encryptOAEP(t, "sha1");
                        var i = n.match(/^RSAOAEP(\d+)$/);
                        if (null !== i) return e.encryptOAEP(t, "sha" + i[1]);
                        throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + r;
                    }
                    throw "Cipher.encrypt: unsupported key or algorithm";
                }, Sr.crypto.Cipher.decrypt = function(t, e, r) {
                    if (e instanceof Me && e.isPrivate) {
                        var n = Sr.crypto.Cipher.getAlgByKeyAndName(e, r);
                        if ("RSA" === n) return e.decrypt(t);
                        if ("RSAOAEP" === n) return e.decryptOAEP(t, "sha1");
                        var i = n.match(/^RSAOAEP(\d+)$/);
                        if (null !== i) return e.decryptOAEP(t, "sha" + i[1]);
                        throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + r;
                    }
                    throw "Cipher.decrypt: unsupported key or algorithm";
                }, Sr.crypto.Cipher.getAlgByKeyAndName = function(t, e) {
                    if (t instanceof Me) {
                        if (-1 != ":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(e)) return e;
                        if (null == e) return "RSA";
                        throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + e;
                    }
                    throw "getAlgByKeyAndName: not supported algorithm name: " + e;
                }, Sr.crypto.OID = new function() {
                    this.oidhex2name = {
                        "2a864886f70d010101": "rsaEncryption",
                        "2a8648ce3d0201": "ecPublicKey",
                        "2a8648ce380401": "dsa",
                        "2a8648ce3d030107": "secp256r1",
                        "2b8104001f": "secp192k1",
                        "2b81040021": "secp224r1",
                        "2b8104000a": "secp256k1",
                        "2b81040023": "secp521r1",
                        "2b81040022": "secp384r1",
                        "2a8648ce380403": "SHA1withDSA",
                        "608648016503040301": "SHA224withDSA",
                        "608648016503040302": "SHA256withDSA"
                    };
                }, void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.crypto && Sr.crypto || (Sr.crypto = {}), Sr.crypto.ECDSA = function(t) {
                    var e = Error, r = w, n = Ve, i = Sr.crypto.ECDSA, o = Sr.crypto.ECParameterDB, s = i.getName, a = Fr, u = a.getVbyListEx, c = a.isASN1HEX, h = new Be;
                    this.type = "EC", this.isPrivate = !1, this.isPublic = !1, this.getBigRandom = function(t) {
                        return new r(t.bitLength(), h).mod(t.subtract(r.ONE)).add(r.ONE);
                    }, this.setNamedCurve = function(t) {
                        this.ecparams = o.getByName(t), this.prvKeyHex = null, this.pubKeyHex = null, this.curveName = t;
                    }, this.setPrivateKeyHex = function(t) {
                        this.isPrivate = !0, this.prvKeyHex = t;
                    }, this.setPublicKeyHex = function(t) {
                        this.isPublic = !0, this.pubKeyHex = t;
                    }, this.getPublicKeyXYHex = function() {
                        var t = this.pubKeyHex;
                        if ("04" !== t.substr(0, 2)) throw "this method supports uncompressed format(04) only";
                        var e = this.ecparams.keylen / 4;
                        if (t.length !== 2 + 2 * e) throw "malformed public key hex length";
                        var r = {};
                        return r.x = t.substr(2, e), r.y = t.substr(2 + e), r;
                    }, this.getShortNISTPCurveName = function() {
                        var t = this.curveName;
                        return "secp256r1" === t || "NIST P-256" === t || "P-256" === t || "prime256v1" === t ? "P-256" : "secp384r1" === t || "NIST P-384" === t || "P-384" === t ? "P-384" : null;
                    }, this.generateKeyPairHex = function() {
                        var t = this.ecparams.n, e = this.getBigRandom(t), r = this.ecparams.G.multiply(e), n = r.getX().toBigInteger(), i = r.getY().toBigInteger(), o = this.ecparams.keylen / 4, s = ("0000000000" + e.toString(16)).slice(-o), a = "04" + ("0000000000" + n.toString(16)).slice(-o) + ("0000000000" + i.toString(16)).slice(-o);
                        return this.setPrivateKeyHex(s), this.setPublicKeyHex(a), {
                            ecprvhex: s,
                            ecpubhex: a
                        };
                    }, this.signWithMessageHash = function(t) {
                        return this.signHex(t, this.prvKeyHex);
                    }, this.signHex = function(t, e) {
                        var n = new r(e, 16), o = this.ecparams.n, s = new r(t.substring(0, this.ecparams.keylen / 4), 16);
                        do var a = this.getBigRandom(o), u = this.ecparams.G.multiply(a).getX().toBigInteger().mod(o);
                        while (u.compareTo(r.ZERO) <= 0);
                        var c = a.modInverse(o).multiply(s.add(n.multiply(u))).mod(o);
                        return i.biRSSigToASN1Sig(u, c);
                    }, this.sign = function(t, e) {
                        var n = e, i = this.ecparams.n, o = r.fromByteArrayUnsigned(t);
                        do var s = this.getBigRandom(i), a = this.ecparams.G.multiply(s).getX().toBigInteger().mod(i);
                        while (a.compareTo(w.ZERO) <= 0);
                        var u = s.modInverse(i).multiply(o.add(n.multiply(a))).mod(i);
                        return this.serializeSig(a, u);
                    }, this.verifyWithMessageHash = function(t, e) {
                        return this.verifyHex(t, e, this.pubKeyHex);
                    }, this.verifyHex = function(t, e, o) {
                        try {
                            var s, a, u = i.parseSigHex(e);
                            s = u.r, a = u.s;
                            var c = n.decodeFromHex(this.ecparams.curve, o), h = new r(t.substring(0, this.ecparams.keylen / 4), 16);
                            return this.verifyRaw(h, s, a, c);
                        } catch (t) {
                            return !1;
                        }
                    }, this.verify = function(t, e, i) {
                        var o, s, a;
                        if (Bitcoin.Util.isArray(e)) {
                            var u = this.parseSig(e);
                            o = u.r, s = u.s;
                        } else {
                            if ("object" !== (void 0 === e ? "undefined" : g(e)) || !e.r || !e.s) throw "Invalid value for signature";
                            o = e.r, s = e.s;
                        }
                        if (i instanceof Ve) a = i;
                        else {
                            if (!Bitcoin.Util.isArray(i)) throw "Invalid format for pubkey value, must be byte array or ECPointFp";
                            a = n.decodeFrom(this.ecparams.curve, i);
                        }
                        var c = r.fromByteArrayUnsigned(t);
                        return this.verifyRaw(c, o, s, a);
                    }, this.verifyRaw = function(t, e, n, i) {
                        var o = this.ecparams.n, s = this.ecparams.G;
                        if (e.compareTo(r.ONE) < 0 || e.compareTo(o) >= 0) return !1;
                        if (n.compareTo(r.ONE) < 0 || n.compareTo(o) >= 0) return !1;
                        var a = n.modInverse(o), u = t.multiply(a).mod(o), c = e.multiply(a).mod(o);
                        return s.multiply(u).add(i.multiply(c)).getX().toBigInteger().mod(o).equals(e);
                    }, this.serializeSig = function(t, e) {
                        var r = t.toByteArraySigned(), n = e.toByteArraySigned(), i = [];
                        return i.push(2), i.push(r.length), (i = i.concat(r)).push(2), i.push(n.length), (i = i.concat(n)).unshift(i.length), i.unshift(48), i;
                    }, this.parseSig = function(t) {
                        var e;
                        if (48 != t[0]) throw new Error("Signature not a valid DERSequence");
                        if (2 != t[e = 2]) throw new Error("First element in signature must be a DERInteger");
                        var n = t.slice(e + 2, e + 2 + t[e + 1]);
                        if (2 != t[e += 2 + t[e + 1]]) throw new Error("Second element in signature must be a DERInteger");
                        var i = t.slice(e + 2, e + 2 + t[e + 1]);
                        return e += 2 + t[e + 1], {
                            r: r.fromByteArrayUnsigned(n),
                            s: r.fromByteArrayUnsigned(i)
                        };
                    }, this.parseSigCompact = function(t) {
                        if (65 !== t.length) throw "Signature has the wrong length";
                        var e = t[0] - 27;
                        if (e < 0 || e > 7) throw "Invalid signature type";
                        var n = this.ecparams.n;
                        return {
                            r: r.fromByteArrayUnsigned(t.slice(1, 33)).mod(n),
                            s: r.fromByteArrayUnsigned(t.slice(33, 65)).mod(n),
                            i: e
                        };
                    }, this.readPKCS5PrvKeyHex = function(t) {
                        if (!1 === c(t)) throw new Error("not ASN.1 hex string");
                        var e, r, n;
                        try {
                            e = u(t, 0, [
                                "[0]",
                                0
                            ], "06"), r = u(t, 0, [
                                1
                            ], "04");
                            try {
                                n = u(t, 0, [
                                    "[1]",
                                    0
                                ], "03");
                            } catch (t) {}
                        } catch (t) {
                            throw new Error("malformed PKCS#1/5 plain ECC private key");
                        }
                        if (this.curveName = s(e), void 0 === this.curveName) throw "unsupported curve name";
                        this.setNamedCurve(this.curveName), this.setPublicKeyHex(n), this.setPrivateKeyHex(r), this.isPublic = !1;
                    }, this.readPKCS8PrvKeyHex = function(t) {
                        if (!1 === c(t)) throw new e("not ASN.1 hex string");
                        var r, n, i;
                        try {
                            u(t, 0, [
                                1,
                                0
                            ], "06"), r = u(t, 0, [
                                1,
                                1
                            ], "06"), n = u(t, 0, [
                                2,
                                0,
                                1
                            ], "04");
                            try {
                                i = u(t, 0, [
                                    2,
                                    0,
                                    "[1]",
                                    0
                                ], "03");
                            } catch (t) {}
                        } catch (t) {
                            throw new e("malformed PKCS#8 plain ECC private key");
                        }
                        if (this.curveName = s(r), void 0 === this.curveName) throw new e("unsupported curve name");
                        this.setNamedCurve(this.curveName), this.setPublicKeyHex(i), this.setPrivateKeyHex(n), this.isPublic = !1;
                    }, this.readPKCS8PubKeyHex = function(t) {
                        if (!1 === c(t)) throw new e("not ASN.1 hex string");
                        var r, n;
                        try {
                            u(t, 0, [
                                0,
                                0
                            ], "06"), r = u(t, 0, [
                                0,
                                1
                            ], "06"), n = u(t, 0, [
                                1
                            ], "03");
                        } catch (t) {
                            throw new e("malformed PKCS#8 ECC public key");
                        }
                        if (this.curveName = s(r), null === this.curveName) throw new e("unsupported curve name");
                        this.setNamedCurve(this.curveName), this.setPublicKeyHex(n);
                    }, this.readCertPubKeyHex = function(t, r) {
                        if (!1 === c(t)) throw new e("not ASN.1 hex string");
                        var n, i;
                        try {
                            n = u(t, 0, [
                                0,
                                5,
                                0,
                                1
                            ], "06"), i = u(t, 0, [
                                0,
                                5,
                                1
                            ], "03");
                        } catch (t) {
                            throw new e("malformed X.509 certificate ECC public key");
                        }
                        if (this.curveName = s(n), null === this.curveName) throw new e("unsupported curve name");
                        this.setNamedCurve(this.curveName), this.setPublicKeyHex(i);
                    }, void 0 !== t && void 0 !== t.curve && (this.curveName = t.curve), void 0 === this.curveName && (this.curveName = "secp256r1"), this.setNamedCurve(this.curveName), void 0 !== t && (void 0 !== t.prv && this.setPrivateKeyHex(t.prv), void 0 !== t.pub && this.setPublicKeyHex(t.pub));
                }, Sr.crypto.ECDSA.parseSigHex = function(t) {
                    var e = Sr.crypto.ECDSA.parseSigHexInHexRS(t);
                    return {
                        r: new w(e.r, 16),
                        s: new w(e.s, 16)
                    };
                }, Sr.crypto.ECDSA.parseSigHexInHexRS = function(t) {
                    var e = Fr, r = e.getChildIdx, n = e.getV;
                    if (e.checkStrictDER(t, 0), "30" != t.substr(0, 2)) throw new Error("signature is not a ASN.1 sequence");
                    var i = r(t, 0);
                    if (2 != i.length) throw new Error("signature shall have two elements");
                    var o = i[0], s = i[1];
                    if ("02" != t.substr(o, 2)) throw new Error("1st item not ASN.1 integer");
                    if ("02" != t.substr(s, 2)) throw new Error("2nd item not ASN.1 integer");
                    return {
                        r: n(t, o),
                        s: n(t, s)
                    };
                }, Sr.crypto.ECDSA.asn1SigToConcatSig = function(t) {
                    var e = Sr.crypto.ECDSA.parseSigHexInHexRS(t), r = e.r, n = e.s;
                    if ("00" == r.substr(0, 2) && r.length % 32 == 2 && (r = r.substr(2)), "00" == n.substr(0, 2) && n.length % 32 == 2 && (n = n.substr(2)), r.length % 32 == 30 && (r = "00" + r), n.length % 32 == 30 && (n = "00" + n), r.length % 32 != 0) throw "unknown ECDSA sig r length error";
                    if (n.length % 32 != 0) throw "unknown ECDSA sig s length error";
                    return r + n;
                }, Sr.crypto.ECDSA.concatSigToASN1Sig = function(t) {
                    if (t.length / 2 * 8 % 128 != 0) throw "unknown ECDSA concatinated r-s sig  length error";
                    var e = t.substr(0, t.length / 2), r = t.substr(t.length / 2);
                    return Sr.crypto.ECDSA.hexRSSigToASN1Sig(e, r);
                }, Sr.crypto.ECDSA.hexRSSigToASN1Sig = function(t, e) {
                    var r = new w(t, 16), n = new w(e, 16);
                    return Sr.crypto.ECDSA.biRSSigToASN1Sig(r, n);
                }, Sr.crypto.ECDSA.biRSSigToASN1Sig = function(t, e) {
                    var r = Sr.asn1, n = new r.DERInteger({
                        bigint: t
                    }), i = new r.DERInteger({
                        bigint: e
                    });
                    return new r.DERSequence({
                        array: [
                            n,
                            i
                        ]
                    }).getEncodedHex();
                }, Sr.crypto.ECDSA.getName = function(t) {
                    return "2b8104001f" === t ? "secp192k1" : "2a8648ce3d030107" === t ? "secp256r1" : "2b8104000a" === t ? "secp256k1" : "2b81040021" === t ? "secp224r1" : "2b81040022" === t ? "secp384r1" : -1 !== "|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(t) ? "secp256r1" : -1 !== "|secp256k1|".indexOf(t) ? "secp256k1" : -1 !== "|secp224r1|NIST P-224|P-224|".indexOf(t) ? "secp224r1" : -1 !== "|secp384r1|NIST P-384|P-384|".indexOf(t) ? "secp384r1" : null;
                }, void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.crypto && Sr.crypto || (Sr.crypto = {}), Sr.crypto.ECParameterDB = new function() {
                    var t = {}, e = {};
                    function r(t) {
                        return new w(t, 16);
                    }
                    this.getByName = function(r) {
                        var n = r;
                        if (void 0 !== e[n] && (n = e[r]), void 0 !== t[n]) return t[n];
                        throw "unregistered EC curve name: " + n;
                    }, this.regist = function(n, i, o, s, a, u, c, h, l, f, g, d) {
                        t[n] = {};
                        var p = r(o), v = r(s), y = r(a), m = r(u), _ = r(c), S = new Ke(p, v, y), b = S.decodePointHex("04" + h + l);
                        t[n].name = n, t[n].keylen = i, t[n].curve = S, t[n].G = b, t[n].n = m, t[n].h = _, t[n].oid = g, t[n].info = d;
                        for(var w = 0; w < f.length; w++)e[f[w]] = n;
                    };
                }, Sr.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field"), Sr.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field"), Sr.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field"), Sr.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []), Sr.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []), Sr.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []), Sr.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []), Sr.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", [
                    "NIST P-256",
                    "P-256",
                    "prime256v1"
                ]), Sr.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", [
                    "NIST P-384",
                    "P-384"
                ]), Sr.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", [
                    "NIST P-521",
                    "P-521"
                ]);
                var tn = function() {
                    var t = function t(r, n, i) {
                        return e(v.AES, r, n, i);
                    }, e = function t(e, r, n, i) {
                        var o = v.enc.Hex.parse(r), s = v.enc.Hex.parse(n), a = v.enc.Hex.parse(i), u = {};
                        u.key = s, u.iv = a, u.ciphertext = o;
                        var c = e.decrypt(u, s, {
                            iv: a
                        });
                        return v.enc.Hex.stringify(c);
                    }, r = function t(e, r, i) {
                        return n(v.AES, e, r, i);
                    }, n = function t(e, r, n, i) {
                        var o = v.enc.Hex.parse(r), s = v.enc.Hex.parse(n), a = v.enc.Hex.parse(i), u = e.encrypt(o, s, {
                            iv: a
                        }), c = v.enc.Hex.parse(u.toString());
                        return v.enc.Base64.stringify(c);
                    }, i = {
                        "AES-256-CBC": {
                            proc: t,
                            eproc: r,
                            keylen: 32,
                            ivlen: 16
                        },
                        "AES-192-CBC": {
                            proc: t,
                            eproc: r,
                            keylen: 24,
                            ivlen: 16
                        },
                        "AES-128-CBC": {
                            proc: t,
                            eproc: r,
                            keylen: 16,
                            ivlen: 16
                        },
                        "DES-EDE3-CBC": {
                            proc: function t(r, n, i) {
                                return e(v.TripleDES, r, n, i);
                            },
                            eproc: function t(e, r, i) {
                                return n(v.TripleDES, e, r, i);
                            },
                            keylen: 24,
                            ivlen: 8
                        },
                        "DES-CBC": {
                            proc: function t(r, n, i) {
                                return e(v.DES, r, n, i);
                            },
                            eproc: function t(e, r, i) {
                                return n(v.DES, e, r, i);
                            },
                            keylen: 8,
                            ivlen: 8
                        }
                    }, o = function t(e) {
                        var r = {}, n = e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));
                        n && (r.cipher = n[1], r.ivsalt = n[2]);
                        var i = e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));
                        i && (r.type = i[1]);
                        var o = -1, s = 0;
                        -1 != e.indexOf("\r\n\r\n") && (o = e.indexOf("\r\n\r\n"), s = 2), -1 != e.indexOf("\n\n") && (o = e.indexOf("\n\n"), s = 1);
                        var a = e.indexOf("-----END");
                        if (-1 != o && -1 != a) {
                            var u = e.substring(o + 2 * s, a - s);
                            u = u.replace(/\s+/g, ""), r.data = u;
                        }
                        return r;
                    }, s = function t(e, r, n) {
                        for(var o = n.substring(0, 16), s = v.enc.Hex.parse(o), a = v.enc.Utf8.parse(r), u = i[e].keylen + i[e].ivlen, c = "", h = null;;){
                            var l = v.algo.MD5.create();
                            if (null != h && l.update(h), l.update(a), l.update(s), h = l.finalize(), (c += v.enc.Hex.stringify(h)).length >= 2 * u) break;
                        }
                        var f = {};
                        return f.keyhex = c.substr(0, 2 * i[e].keylen), f.ivhex = c.substr(2 * i[e].keylen, 2 * i[e].ivlen), f;
                    }, a = function t(e, r, n, o) {
                        var s = v.enc.Base64.parse(e), a = v.enc.Hex.stringify(s);
                        return (0, i[r].proc)(a, n, o);
                    };
                    return {
                        version: "1.0.0",
                        parsePKCS5PEM: function t(e) {
                            return o(e);
                        },
                        getKeyAndUnusedIvByPasscodeAndIvsalt: function t(e, r, n) {
                            return s(e, r, n);
                        },
                        decryptKeyB64: function t(e, r, n, i) {
                            return a(e, r, n, i);
                        },
                        getDecryptedKeyHex: function t(e, r) {
                            var n = o(e), i = (n.type, n.cipher), u = n.ivsalt, c = n.data, h = s(i, r, u).keyhex;
                            return a(c, i, h, u);
                        },
                        getEncryptedPKCS5PEMFromPrvKeyHex: function t(e, r, n, o, a) {
                            var u = "";
                            if (void 0 !== o && null != o || (o = "AES-256-CBC"), void 0 === i[o]) throw new Error("KEYUTIL unsupported algorithm: " + o);
                            void 0 !== a && null != a || (a = (function t(e) {
                                var r = v.lib.WordArray.random(e);
                                return v.enc.Hex.stringify(r);
                            })(i[o].ivlen).toUpperCase());
                            var c = function t(e, r, n, o) {
                                return (0, i[r].eproc)(e, n, o);
                            }(r, o, s(o, n, a).keyhex, a);
                            u = "-----BEGIN " + e + " PRIVATE KEY-----\r\n";
                            return u += "Proc-Type: 4,ENCRYPTED\r\n", u += "DEK-Info: " + o + "," + a + "\r\n", u += "\r\n", u += c.replace(/(.{64})/g, "$1\r\n"), u += "\r\n-----END " + e + " PRIVATE KEY-----\r\n";
                        },
                        parseHexOfEncryptedPKCS8: function t(e) {
                            var r = Fr, n = r.getChildIdx, i = r.getV, o = {}, s = n(e, 0);
                            if (2 != s.length) throw new Error("malformed format: SEQUENCE(0).items != 2: " + s.length);
                            o.ciphertext = i(e, s[1]);
                            var a = n(e, s[0]);
                            if (2 != a.length) throw new Error("malformed format: SEQUENCE(0.0).items != 2: " + a.length);
                            if ("2a864886f70d01050d" != i(e, a[0])) throw new Error("this only supports pkcs5PBES2");
                            var u = n(e, a[1]);
                            if (2 != a.length) throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: " + u.length);
                            var c = n(e, u[1]);
                            if (2 != c.length) throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: " + c.length);
                            if ("2a864886f70d0307" != i(e, c[0])) throw "this only supports TripleDES";
                            o.encryptionSchemeAlg = "TripleDES", o.encryptionSchemeIV = i(e, c[1]);
                            var h = n(e, u[0]);
                            if (2 != h.length) throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: " + h.length);
                            if ("2a864886f70d01050c" != i(e, h[0])) throw new Error("this only supports pkcs5PBKDF2");
                            var l = n(e, h[1]);
                            if (l.length < 2) throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + l.length);
                            o.pbkdf2Salt = i(e, l[0]);
                            var f = i(e, l[1]);
                            try {
                                o.pbkdf2Iter = parseInt(f, 16);
                            } catch (t) {
                                throw new Error("malformed format pbkdf2Iter: " + f);
                            }
                            return o;
                        },
                        getPBKDF2KeyHexFromParam: function t(e, r) {
                            var n = v.enc.Hex.parse(e.pbkdf2Salt), i = e.pbkdf2Iter, o = v.PBKDF2(r, n, {
                                keySize: 6,
                                iterations: i
                            });
                            return v.enc.Hex.stringify(o);
                        },
                        _getPlainPKCS8HexFromEncryptedPKCS8PEM: function t(e, r) {
                            var n = Mr(e, "ENCRYPTED PRIVATE KEY"), i = this.parseHexOfEncryptedPKCS8(n), o = tn.getPBKDF2KeyHexFromParam(i, r), s = {};
                            s.ciphertext = v.enc.Hex.parse(i.ciphertext);
                            var a = v.enc.Hex.parse(o), u = v.enc.Hex.parse(i.encryptionSchemeIV), c = v.TripleDES.decrypt(s, a, {
                                iv: u
                            });
                            return v.enc.Hex.stringify(c);
                        },
                        getKeyFromEncryptedPKCS8PEM: function t(e, r) {
                            var n = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e, r);
                            return this.getKeyFromPlainPrivatePKCS8Hex(n);
                        },
                        parsePlainPrivatePKCS8Hex: function t(e) {
                            var r = Fr, n = r.getChildIdx, i = r.getV, o = {
                                algparam: null
                            };
                            if ("30" != e.substr(0, 2)) throw new Error("malformed plain PKCS8 private key(code:001)");
                            var s = n(e, 0);
                            if (s.length < 3) throw new Error("malformed plain PKCS8 private key(code:002)");
                            if ("30" != e.substr(s[1], 2)) throw new Error("malformed PKCS8 private key(code:003)");
                            var a = n(e, s[1]);
                            if (2 != a.length) throw new Error("malformed PKCS8 private key(code:004)");
                            if ("06" != e.substr(a[0], 2)) throw new Error("malformed PKCS8 private key(code:005)");
                            if (o.algoid = i(e, a[0]), "06" == e.substr(a[1], 2) && (o.algparam = i(e, a[1])), "04" != e.substr(s[2], 2)) throw new Error("malformed PKCS8 private key(code:006)");
                            return o.keyidx = r.getVidx(e, s[2]), o;
                        },
                        getKeyFromPlainPrivatePKCS8PEM: function t(e) {
                            var r = Mr(e, "PRIVATE KEY");
                            return this.getKeyFromPlainPrivatePKCS8Hex(r);
                        },
                        getKeyFromPlainPrivatePKCS8Hex: function t(e) {
                            var r, n = this.parsePlainPrivatePKCS8Hex(e);
                            if ("2a864886f70d010101" == n.algoid) r = new Me;
                            else if ("2a8648ce380401" == n.algoid) r = new Sr.crypto.DSA;
                            else {
                                if ("2a8648ce3d0201" != n.algoid) throw new Error("unsupported private key algorithm");
                                r = new Sr.crypto.ECDSA;
                            }
                            return r.readPKCS8PrvKeyHex(e), r;
                        },
                        _getKeyFromPublicPKCS8Hex: function t(e) {
                            var r, n = Fr.getVbyList(e, 0, [
                                0,
                                0
                            ], "06");
                            if ("2a864886f70d010101" === n) r = new Me;
                            else if ("2a8648ce380401" === n) r = new Sr.crypto.DSA;
                            else {
                                if ("2a8648ce3d0201" !== n) throw new Error("unsupported PKCS#8 public key hex");
                                r = new Sr.crypto.ECDSA;
                            }
                            return r.readPKCS8PubKeyHex(e), r;
                        },
                        parsePublicRawRSAKeyHex: function t(e) {
                            var r = Fr, n = r.getChildIdx, i = r.getV, o = {};
                            if ("30" != e.substr(0, 2)) throw new Error("malformed RSA key(code:001)");
                            var s = n(e, 0);
                            if (2 != s.length) throw new Error("malformed RSA key(code:002)");
                            if ("02" != e.substr(s[0], 2)) throw new Error("malformed RSA key(code:003)");
                            if (o.n = i(e, s[0]), "02" != e.substr(s[1], 2)) throw new Error("malformed RSA key(code:004)");
                            return o.e = i(e, s[1]), o;
                        },
                        parsePublicPKCS8Hex: function t(e) {
                            var r = Fr, n = r.getChildIdx, i = r.getV, o = {
                                algparam: null
                            }, s = n(e, 0);
                            if (2 != s.length) throw new Error("outer DERSequence shall have 2 elements: " + s.length);
                            var a = s[0];
                            if ("30" != e.substr(a, 2)) throw new Error("malformed PKCS8 public key(code:001)");
                            var u = n(e, a);
                            if (2 != u.length) throw new Error("malformed PKCS8 public key(code:002)");
                            if ("06" != e.substr(u[0], 2)) throw new Error("malformed PKCS8 public key(code:003)");
                            if (o.algoid = i(e, u[0]), "06" == e.substr(u[1], 2) ? o.algparam = i(e, u[1]) : "30" == e.substr(u[1], 2) && (o.algparam = {}, o.algparam.p = r.getVbyList(e, u[1], [
                                0
                            ], "02"), o.algparam.q = r.getVbyList(e, u[1], [
                                1
                            ], "02"), o.algparam.g = r.getVbyList(e, u[1], [
                                2
                            ], "02")), "03" != e.substr(s[1], 2)) throw new Error("malformed PKCS8 public key(code:004)");
                            return o.key = i(e, s[1]).substr(2), o;
                        }
                    };
                }();
                tn.getKey = function(t, e, r) {
                    var n = (v = Fr).getChildIdx, i = (v.getV, v.getVbyList), o = Sr.crypto, s = o.ECDSA, a = o.DSA, u = Me, c = Mr, h = tn;
                    if (void 0 !== u && t instanceof u) return t;
                    if (void 0 !== s && t instanceof s) return t;
                    if (void 0 !== a && t instanceof a) return t;
                    if (void 0 !== t.curve && void 0 !== t.xy && void 0 === t.d) return new s({
                        pub: t.xy,
                        curve: t.curve
                    });
                    if (void 0 !== t.curve && void 0 !== t.d) return new s({
                        prv: t.d,
                        curve: t.curve
                    });
                    if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 === t.d) return (P = new u).setPublic(t.n, t.e), P;
                    if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 !== t.p && void 0 !== t.q && void 0 !== t.dp && void 0 !== t.dq && void 0 !== t.co && void 0 === t.qi) return (P = new u).setPrivateEx(t.n, t.e, t.d, t.p, t.q, t.dp, t.dq, t.co), P;
                    if (void 0 === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 === t.p) return (P = new u).setPrivate(t.n, t.e, t.d), P;
                    if (void 0 !== t.p && void 0 !== t.q && void 0 !== t.g && void 0 !== t.y && void 0 === t.x) return (P = new a).setPublic(t.p, t.q, t.g, t.y), P;
                    if (void 0 !== t.p && void 0 !== t.q && void 0 !== t.g && void 0 !== t.y && void 0 !== t.x) return (P = new a).setPrivate(t.p, t.q, t.g, t.y, t.x), P;
                    if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 === t.d) return (P = new u).setPublic(Rr(t.n), Rr(t.e)), P;
                    if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d && void 0 !== t.p && void 0 !== t.q && void 0 !== t.dp && void 0 !== t.dq && void 0 !== t.qi) return (P = new u).setPrivateEx(Rr(t.n), Rr(t.e), Rr(t.d), Rr(t.p), Rr(t.q), Rr(t.dp), Rr(t.dq), Rr(t.qi)), P;
                    if ("RSA" === t.kty && void 0 !== t.n && void 0 !== t.e && void 0 !== t.d) return (P = new u).setPrivate(Rr(t.n), Rr(t.e), Rr(t.d)), P;
                    if ("EC" === t.kty && void 0 !== t.crv && void 0 !== t.x && void 0 !== t.y && void 0 === t.d) {
                        var l = (k = new s({
                            curve: t.crv
                        })).ecparams.keylen / 4, f = "04" + ("0000000000" + Rr(t.x)).slice(-l) + ("0000000000" + Rr(t.y)).slice(-l);
                        return k.setPublicKeyHex(f), k;
                    }
                    if ("EC" === t.kty && void 0 !== t.crv && void 0 !== t.x && void 0 !== t.y && void 0 !== t.d) {
                        l = (k = new s({
                            curve: t.crv
                        })).ecparams.keylen / 4, f = "04" + ("0000000000" + Rr(t.x)).slice(-l) + ("0000000000" + Rr(t.y)).slice(-l);
                        var g = ("0000000000" + Rr(t.d)).slice(-l);
                        return k.setPublicKeyHex(f), k.setPrivateKeyHex(g), k;
                    }
                    if ("pkcs5prv" === r) {
                        var d, p = t, v = Fr;
                        if (9 === (d = n(p, 0)).length) (P = new u).readPKCS5PrvKeyHex(p);
                        else if (6 === d.length) (P = new a).readPKCS5PrvKeyHex(p);
                        else {
                            if (!(d.length > 2 && "04" === p.substr(d[1], 2))) throw new Error("unsupported PKCS#1/5 hexadecimal key");
                            (P = new s).readPKCS5PrvKeyHex(p);
                        }
                        return P;
                    }
                    if ("pkcs8prv" === r) return P = h.getKeyFromPlainPrivatePKCS8Hex(t);
                    if ("pkcs8pub" === r) return h._getKeyFromPublicPKCS8Hex(t);
                    if ("x509pub" === r) return on.getPublicKeyFromCertHex(t);
                    if (-1 != t.indexOf("-END CERTIFICATE-", 0) || -1 != t.indexOf("-END X509 CERTIFICATE-", 0) || -1 != t.indexOf("-END TRUSTED CERTIFICATE-", 0)) return on.getPublicKeyFromCertPEM(t);
                    if (-1 != t.indexOf("-END PUBLIC KEY-")) {
                        var y = Mr(t, "PUBLIC KEY");
                        return h._getKeyFromPublicPKCS8Hex(y);
                    }
                    if (-1 != t.indexOf("-END RSA PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
                        var m = c(t, "RSA PRIVATE KEY");
                        return h.getKey(m, null, "pkcs5prv");
                    }
                    if (-1 != t.indexOf("-END DSA PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
                        var _ = i(R = c(t, "DSA PRIVATE KEY"), 0, [
                            1
                        ], "02"), S = i(R, 0, [
                            2
                        ], "02"), b = i(R, 0, [
                            3
                        ], "02"), F = i(R, 0, [
                            4
                        ], "02"), E = i(R, 0, [
                            5
                        ], "02");
                        return (P = new a).setPrivate(new w(_, 16), new w(S, 16), new w(b, 16), new w(F, 16), new w(E, 16)), P;
                    }
                    if (-1 != t.indexOf("-END EC PRIVATE KEY-") && -1 == t.indexOf("4,ENCRYPTED")) {
                        m = c(t, "EC PRIVATE KEY");
                        return h.getKey(m, null, "pkcs5prv");
                    }
                    if (-1 != t.indexOf("-END PRIVATE KEY-")) return h.getKeyFromPlainPrivatePKCS8PEM(t);
                    if (-1 != t.indexOf("-END RSA PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
                        var x = h.getDecryptedKeyHex(t, e), A = new Me;
                        return A.readPKCS5PrvKeyHex(x), A;
                    }
                    if (-1 != t.indexOf("-END EC PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
                        var k, P = i(R = h.getDecryptedKeyHex(t, e), 0, [
                            1
                        ], "04"), C = i(R, 0, [
                            2,
                            0
                        ], "06"), T = i(R, 0, [
                            3,
                            0
                        ], "03").substr(2);
                        if (void 0 === Sr.crypto.OID.oidhex2name[C]) throw new Error("undefined OID(hex) in KJUR.crypto.OID: " + C);
                        return (k = new s({
                            curve: Sr.crypto.OID.oidhex2name[C]
                        })).setPublicKeyHex(T), k.setPrivateKeyHex(P), k.isPublic = !1, k;
                    }
                    if (-1 != t.indexOf("-END DSA PRIVATE KEY-") && -1 != t.indexOf("4,ENCRYPTED")) {
                        var R;
                        _ = i(R = h.getDecryptedKeyHex(t, e), 0, [
                            1
                        ], "02"), S = i(R, 0, [
                            2
                        ], "02"), b = i(R, 0, [
                            3
                        ], "02"), F = i(R, 0, [
                            4
                        ], "02"), E = i(R, 0, [
                            5
                        ], "02");
                        return (P = new a).setPrivate(new w(_, 16), new w(S, 16), new w(b, 16), new w(F, 16), new w(E, 16)), P;
                    }
                    if (-1 != t.indexOf("-END ENCRYPTED PRIVATE KEY-")) return h.getKeyFromEncryptedPKCS8PEM(t, e);
                    throw new Error("not supported argument");
                }, tn.generateKeypair = function(t, e) {
                    if ("RSA" == t) {
                        var r = e;
                        (s = new Me).generate(r, "10001"), s.isPrivate = !0, s.isPublic = !0;
                        var n = new Me, i = s.n.toString(16), o = s.e.toString(16);
                        return n.setPublic(i, o), n.isPrivate = !1, n.isPublic = !0, (a = {}).prvKeyObj = s, a.pubKeyObj = n, a;
                    }
                    if ("EC" == t) {
                        var s, a, u = e, c = new Sr.crypto.ECDSA({
                            curve: u
                        }).generateKeyPairHex();
                        return (s = new Sr.crypto.ECDSA({
                            curve: u
                        })).setPublicKeyHex(c.ecpubhex), s.setPrivateKeyHex(c.ecprvhex), s.isPrivate = !0, s.isPublic = !1, (n = new Sr.crypto.ECDSA({
                            curve: u
                        })).setPublicKeyHex(c.ecpubhex), n.isPrivate = !1, n.isPublic = !0, (a = {}).prvKeyObj = s, a.pubKeyObj = n, a;
                    }
                    throw new Error("unknown algorithm: " + t);
                }, tn.getPEM = function(t, e, r, n, i, o) {
                    var s = Sr, a = s.asn1, u = a.DERObjectIdentifier, c = a.DERInteger, h = a.ASN1Util.newObject, l = a.x509.SubjectPublicKeyInfo, f = s.crypto, g = f.DSA, d = f.ECDSA, p = Me;
                    function y(t) {
                        return h({
                            seq: [
                                {
                                    int: 0
                                },
                                {
                                    int: {
                                        bigint: t.n
                                    }
                                },
                                {
                                    int: t.e
                                },
                                {
                                    int: {
                                        bigint: t.d
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.p
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.q
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.dmp1
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.dmq1
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.coeff
                                    }
                                }
                            ]
                        });
                    }
                    function m(t) {
                        return h({
                            seq: [
                                {
                                    int: 1
                                },
                                {
                                    octstr: {
                                        hex: t.prvKeyHex
                                    }
                                },
                                {
                                    tag: [
                                        "a0",
                                        !0,
                                        {
                                            oid: {
                                                name: t.curveName
                                            }
                                        }
                                    ]
                                },
                                {
                                    tag: [
                                        "a1",
                                        !0,
                                        {
                                            bitstr: {
                                                hex: "00" + t.pubKeyHex
                                            }
                                        }
                                    ]
                                }
                            ]
                        });
                    }
                    function _(t) {
                        return h({
                            seq: [
                                {
                                    int: 0
                                },
                                {
                                    int: {
                                        bigint: t.p
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.q
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.g
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.y
                                    }
                                },
                                {
                                    int: {
                                        bigint: t.x
                                    }
                                }
                            ]
                        });
                    }
                    if ((void 0 !== p && t instanceof p || void 0 !== g && t instanceof g || void 0 !== d && t instanceof d) && 1 == t.isPublic && (void 0 === e || "PKCS8PUB" == e)) return jr(F = new l(t).getEncodedHex(), "PUBLIC KEY");
                    if ("PKCS1PRV" == e && void 0 !== p && t instanceof p && (void 0 === r || null == r) && 1 == t.isPrivate) return jr(F = y(t).getEncodedHex(), "RSA PRIVATE KEY");
                    if ("PKCS1PRV" == e && void 0 !== d && t instanceof d && (void 0 === r || null == r) && 1 == t.isPrivate) {
                        var S = new u({
                            name: t.curveName
                        }).getEncodedHex(), b = m(t).getEncodedHex(), w = "";
                        return w += jr(S, "EC PARAMETERS"), w += jr(b, "EC PRIVATE KEY");
                    }
                    if ("PKCS1PRV" == e && void 0 !== g && t instanceof g && (void 0 === r || null == r) && 1 == t.isPrivate) return jr(F = _(t).getEncodedHex(), "DSA PRIVATE KEY");
                    if ("PKCS5PRV" == e && void 0 !== p && t instanceof p && void 0 !== r && null != r && 1 == t.isPrivate) {
                        var F = y(t).getEncodedHex();
                        return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", F, r, n, o);
                    }
                    if ("PKCS5PRV" == e && void 0 !== d && t instanceof d && void 0 !== r && null != r && 1 == t.isPrivate) {
                        F = m(t).getEncodedHex();
                        return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", F, r, n, o);
                    }
                    if ("PKCS5PRV" == e && void 0 !== g && t instanceof g && void 0 !== r && null != r && 1 == t.isPrivate) {
                        F = _(t).getEncodedHex();
                        return void 0 === n && (n = "DES-EDE3-CBC"), this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", F, r, n, o);
                    }
                    var E = function t(e, r) {
                        var n = x(e, r);
                        return new h({
                            seq: [
                                {
                                    seq: [
                                        {
                                            oid: {
                                                name: "pkcs5PBES2"
                                            }
                                        },
                                        {
                                            seq: [
                                                {
                                                    seq: [
                                                        {
                                                            oid: {
                                                                name: "pkcs5PBKDF2"
                                                            }
                                                        },
                                                        {
                                                            seq: [
                                                                {
                                                                    octstr: {
                                                                        hex: n.pbkdf2Salt
                                                                    }
                                                                },
                                                                {
                                                                    int: n.pbkdf2Iter
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    seq: [
                                                        {
                                                            oid: {
                                                                name: "des-EDE3-CBC"
                                                            }
                                                        },
                                                        {
                                                            octstr: {
                                                                hex: n.encryptionSchemeIV
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    octstr: {
                                        hex: n.ciphertext
                                    }
                                }
                            ]
                        }).getEncodedHex();
                    }, x = function t(e, r) {
                        var n = v.lib.WordArray.random(8), i = v.lib.WordArray.random(8), o = v.PBKDF2(r, n, {
                            keySize: 6,
                            iterations: 100
                        }), s = v.enc.Hex.parse(e), a = v.TripleDES.encrypt(s, o, {
                            iv: i
                        }) + "", u = {};
                        return u.ciphertext = a, u.pbkdf2Salt = v.enc.Hex.stringify(n), u.pbkdf2Iter = 100, u.encryptionSchemeAlg = "DES-EDE3-CBC", u.encryptionSchemeIV = v.enc.Hex.stringify(i), u;
                    };
                    if ("PKCS8PRV" == e && null != p && t instanceof p && 1 == t.isPrivate) {
                        var A = y(t).getEncodedHex();
                        F = h({
                            seq: [
                                {
                                    int: 0
                                },
                                {
                                    seq: [
                                        {
                                            oid: {
                                                name: "rsaEncryption"
                                            }
                                        },
                                        {
                                            null: !0
                                        }
                                    ]
                                },
                                {
                                    octstr: {
                                        hex: A
                                    }
                                }
                            ]
                        }).getEncodedHex();
                        return void 0 === r || null == r ? jr(F, "PRIVATE KEY") : jr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
                    }
                    if ("PKCS8PRV" == e && void 0 !== d && t instanceof d && 1 == t.isPrivate) {
                        A = new h({
                            seq: [
                                {
                                    int: 1
                                },
                                {
                                    octstr: {
                                        hex: t.prvKeyHex
                                    }
                                },
                                {
                                    tag: [
                                        "a1",
                                        !0,
                                        {
                                            bitstr: {
                                                hex: "00" + t.pubKeyHex
                                            }
                                        }
                                    ]
                                }
                            ]
                        }).getEncodedHex(), F = h({
                            seq: [
                                {
                                    int: 0
                                },
                                {
                                    seq: [
                                        {
                                            oid: {
                                                name: "ecPublicKey"
                                            }
                                        },
                                        {
                                            oid: {
                                                name: t.curveName
                                            }
                                        }
                                    ]
                                },
                                {
                                    octstr: {
                                        hex: A
                                    }
                                }
                            ]
                        }).getEncodedHex();
                        return void 0 === r || null == r ? jr(F, "PRIVATE KEY") : jr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
                    }
                    if ("PKCS8PRV" == e && void 0 !== g && t instanceof g && 1 == t.isPrivate) {
                        A = new c({
                            bigint: t.x
                        }).getEncodedHex(), F = h({
                            seq: [
                                {
                                    int: 0
                                },
                                {
                                    seq: [
                                        {
                                            oid: {
                                                name: "dsa"
                                            }
                                        },
                                        {
                                            seq: [
                                                {
                                                    int: {
                                                        bigint: t.p
                                                    }
                                                },
                                                {
                                                    int: {
                                                        bigint: t.q
                                                    }
                                                },
                                                {
                                                    int: {
                                                        bigint: t.g
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    octstr: {
                                        hex: A
                                    }
                                }
                            ]
                        }).getEncodedHex();
                        return void 0 === r || null == r ? jr(F, "PRIVATE KEY") : jr(b = E(F, r), "ENCRYPTED PRIVATE KEY");
                    }
                    throw new Error("unsupported object nor format");
                }, tn.getKeyFromCSRPEM = function(t) {
                    var e = Mr(t, "CERTIFICATE REQUEST");
                    return tn.getKeyFromCSRHex(e);
                }, tn.getKeyFromCSRHex = function(t) {
                    var e = tn.parseCSRHex(t);
                    return tn.getKey(e.p8pubkeyhex, null, "pkcs8pub");
                }, tn.parseCSRHex = function(t) {
                    var e = Fr, r = e.getChildIdx, n = e.getTLV, i = {}, o = t;
                    if ("30" != o.substr(0, 2)) throw new Error("malformed CSR(code:001)");
                    var s = r(o, 0);
                    if (s.length < 1) throw new Error("malformed CSR(code:002)");
                    if ("30" != o.substr(s[0], 2)) throw new Error("malformed CSR(code:003)");
                    var a = r(o, s[0]);
                    if (a.length < 3) throw new Error("malformed CSR(code:004)");
                    return i.p8pubkeyhex = n(o, a[2]), i;
                }, tn.getKeyID = function(t) {
                    var e = tn, r = Fr;
                    "string" == typeof t && -1 != t.indexOf("BEGIN ") && (t = e.getKey(t));
                    var n = Mr(e.getPEM(t)), i = r.getIdxbyList(n, 0, [
                        1
                    ]), o = r.getV(n, i).substring(2);
                    return Sr.crypto.Util.hashHex(o, "sha1");
                }, tn.getJWKFromKey = function(t) {
                    var e = {};
                    if (t instanceof Me && t.isPrivate) return e.kty = "RSA", e.n = Tr(t.n.toString(16)), e.e = Tr(t.e.toString(16)), e.d = Tr(t.d.toString(16)), e.p = Tr(t.p.toString(16)), e.q = Tr(t.q.toString(16)), e.dp = Tr(t.dmp1.toString(16)), e.dq = Tr(t.dmq1.toString(16)), e.qi = Tr(t.coeff.toString(16)), e;
                    if (t instanceof Me && t.isPublic) return e.kty = "RSA", e.n = Tr(t.n.toString(16)), e.e = Tr(t.e.toString(16)), e;
                    if (t instanceof Sr.crypto.ECDSA && t.isPrivate) {
                        if ("P-256" !== (n = t.getShortNISTPCurveName()) && "P-384" !== n) throw new Error("unsupported curve name for JWT: " + n);
                        var r = t.getPublicKeyXYHex();
                        return e.kty = "EC", e.crv = n, e.x = Tr(r.x), e.y = Tr(r.y), e.d = Tr(t.prvKeyHex), e;
                    }
                    if (t instanceof Sr.crypto.ECDSA && t.isPublic) {
                        var n;
                        if ("P-256" !== (n = t.getShortNISTPCurveName()) && "P-384" !== n) throw new Error("unsupported curve name for JWT: " + n);
                        r = t.getPublicKeyXYHex();
                        return e.kty = "EC", e.crv = n, e.x = Tr(r.x), e.y = Tr(r.y), e;
                    }
                    throw new Error("not supported key object");
                }, Me.getPosArrayOfChildrenFromHex = function(t) {
                    return Fr.getChildIdx(t, 0);
                }, Me.getHexValueArrayOfChildrenFromHex = function(t) {
                    var e, r = Fr.getV, n = r(t, (e = Me.getPosArrayOfChildrenFromHex(t))[0]), i = r(t, e[1]), o = r(t, e[2]), s = r(t, e[3]), a = r(t, e[4]), u = r(t, e[5]), c = r(t, e[6]), h = r(t, e[7]), l = r(t, e[8]);
                    return (e = new Array).push(n, i, o, s, a, u, c, h, l), e;
                }, Me.prototype.readPrivateKeyFromPEMString = function(t) {
                    var e = Mr(t), r = Me.getHexValueArrayOfChildrenFromHex(e);
                    this.setPrivateEx(r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
                }, Me.prototype.readPKCS5PrvKeyHex = function(t) {
                    var e = Me.getHexValueArrayOfChildrenFromHex(t);
                    this.setPrivateEx(e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
                }, Me.prototype.readPKCS8PrvKeyHex = function(t) {
                    var e, r, n, i, o, s, a, u, c = Fr, h = c.getVbyListEx;
                    if (!1 === c.isASN1HEX(t)) throw new Error("not ASN.1 hex string");
                    try {
                        e = h(t, 0, [
                            2,
                            0,
                            1
                        ], "02"), r = h(t, 0, [
                            2,
                            0,
                            2
                        ], "02"), n = h(t, 0, [
                            2,
                            0,
                            3
                        ], "02"), i = h(t, 0, [
                            2,
                            0,
                            4
                        ], "02"), o = h(t, 0, [
                            2,
                            0,
                            5
                        ], "02"), s = h(t, 0, [
                            2,
                            0,
                            6
                        ], "02"), a = h(t, 0, [
                            2,
                            0,
                            7
                        ], "02"), u = h(t, 0, [
                            2,
                            0,
                            8
                        ], "02");
                    } catch (t) {
                        throw new Error("malformed PKCS#8 plain RSA private key");
                    }
                    this.setPrivateEx(e, r, n, i, o, s, a, u);
                }, Me.prototype.readPKCS5PubKeyHex = function(t) {
                    var e = Fr, r = e.getV;
                    if (!1 === e.isASN1HEX(t)) throw new Error("keyHex is not ASN.1 hex string");
                    var n = e.getChildIdx(t, 0);
                    if (2 !== n.length || "02" !== t.substr(n[0], 2) || "02" !== t.substr(n[1], 2)) throw new Error("wrong hex for PKCS#5 public key");
                    var i = r(t, n[0]), o = r(t, n[1]);
                    this.setPublic(i, o);
                }, Me.prototype.readPKCS8PubKeyHex = function(t) {
                    var e = Fr;
                    if (!1 === e.isASN1HEX(t)) throw new Error("not ASN.1 hex string");
                    if ("06092a864886f70d010101" !== e.getTLVbyListEx(t, 0, [
                        0,
                        0
                    ])) throw new Error("not PKCS8 RSA public key");
                    var r = e.getTLVbyListEx(t, 0, [
                        1,
                        0
                    ]);
                    this.readPKCS5PubKeyHex(r);
                }, Me.prototype.readCertPubKeyHex = function(t, e) {
                    var r, n;
                    (r = new on).readCertHex(t), n = r.getPublicKeyHex(), this.readPKCS8PubKeyHex(n);
                };
                new RegExp("[^0-9a-f]", "gi");
                function en(t, e) {
                    for(var r = "", n = e / 4 - t.length, i = 0; i < n; i++)r += "0";
                    return r + t;
                }
                function rn(t, e, r) {
                    for(var n = "", i = 0; n.length < e;)n += Lr(r(Nr(t + String.fromCharCode.apply(String, [
                        (4278190080 & i) >> 24,
                        (16711680 & i) >> 16,
                        (65280 & i) >> 8,
                        255 & i
                    ])))), i += 1;
                    return n;
                }
                function nn(t) {
                    for(var e in Sr.crypto.Util.DIGESTINFOHEAD){
                        var r = Sr.crypto.Util.DIGESTINFOHEAD[e], n = r.length;
                        if (t.substring(0, n) == r) return [
                            e,
                            t.substring(n)
                        ];
                    }
                    return [];
                }
                function on(t) {
                    var e, r = Fr, n = r.getChildIdx, i = r.getV, o = r.getTLV, s = r.getVbyList, a = r.getVbyListEx, u = r.getTLVbyList, c = r.getTLVbyListEx, h = r.getIdxbyList, l = r.getIdxbyListEx, f = r.getVidx, g = r.getInt, d = r.oidname, p = r.hextooidstr, v = Mr;
                    try {
                        e = Sr.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;
                    } catch (t) {}
                    this.HEX2STAG = {
                        "0c": "utf8",
                        13: "prn",
                        16: "ia5",
                        "1a": "vis",
                        "1e": "bmp"
                    }, this.hex = null, this.version = 0, this.foffset = 0, this.aExtInfo = null, this.getVersion = function() {
                        if (null === this.hex || 0 !== this.version) return this.version;
                        var t = u(this.hex, 0, [
                            0,
                            0
                        ]);
                        if ("a0" == t.substr(0, 2)) {
                            var e = u(t, 0, [
                                0
                            ]), r = g(e, 0);
                            if (r < 0 || 2 < r) throw new Error("malformed version field");
                            return this.version = r + 1, this.version;
                        }
                        return this.version = 1, this.foffset = -1, 1;
                    }, this.getSerialNumberHex = function() {
                        return a(this.hex, 0, [
                            0,
                            0
                        ], "02");
                    }, this.getSignatureAlgorithmField = function() {
                        var t = c(this.hex, 0, [
                            0,
                            1
                        ]);
                        return this.getAlgorithmIdentifierName(t);
                    }, this.getAlgorithmIdentifierName = function(t) {
                        for(var r in e)if (t === e[r]) return r;
                        return d(a(t, 0, [
                            0
                        ], "06"));
                    }, this.getIssuer = function() {
                        return this.getX500Name(this.getIssuerHex());
                    }, this.getIssuerHex = function() {
                        return u(this.hex, 0, [
                            0,
                            3 + this.foffset
                        ], "30");
                    }, this.getIssuerString = function() {
                        return this.getIssuer().str;
                    }, this.getSubject = function() {
                        return this.getX500Name(this.getSubjectHex());
                    }, this.getSubjectHex = function() {
                        return u(this.hex, 0, [
                            0,
                            5 + this.foffset
                        ], "30");
                    }, this.getSubjectString = function() {
                        return this.getSubject().str;
                    }, this.getNotBefore = function() {
                        var t = s(this.hex, 0, [
                            0,
                            4 + this.foffset,
                            0
                        ]);
                        return t = t.replace(/(..)/g, "%$1"), t = decodeURIComponent(t);
                    }, this.getNotAfter = function() {
                        var t = s(this.hex, 0, [
                            0,
                            4 + this.foffset,
                            1
                        ]);
                        return t = t.replace(/(..)/g, "%$1"), t = decodeURIComponent(t);
                    }, this.getPublicKeyHex = function() {
                        return r.getTLVbyList(this.hex, 0, [
                            0,
                            6 + this.foffset
                        ], "30");
                    }, this.getPublicKeyIdx = function() {
                        return h(this.hex, 0, [
                            0,
                            6 + this.foffset
                        ], "30");
                    }, this.getPublicKeyContentIdx = function() {
                        var t = this.getPublicKeyIdx();
                        return h(this.hex, t, [
                            1,
                            0
                        ], "30");
                    }, this.getPublicKey = function() {
                        return tn.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
                    }, this.getSignatureAlgorithmName = function() {
                        var t = u(this.hex, 0, [
                            1
                        ], "30");
                        return this.getAlgorithmIdentifierName(t);
                    }, this.getSignatureValueHex = function() {
                        return s(this.hex, 0, [
                            2
                        ], "03", !0);
                    }, this.verifySignature = function(t) {
                        var e = this.getSignatureAlgorithmField(), r = this.getSignatureValueHex(), n = u(this.hex, 0, [
                            0
                        ], "30"), i = new Sr.crypto.Signature({
                            alg: e
                        });
                        return i.init(t), i.updateHex(n), i.verify(r);
                    }, this.parseExt = function(t) {
                        var e, o, a;
                        if (void 0 === t) {
                            if (a = this.hex, 3 !== this.version) return -1;
                            e = h(a, 0, [
                                0,
                                7,
                                0
                            ], "30"), o = n(a, e);
                        } else {
                            a = Mr(t);
                            var u = h(a, 0, [
                                0,
                                3,
                                0,
                                0
                            ], "06");
                            if ("2a864886f70d01090e" != i(a, u)) return void (this.aExtInfo = new Array);
                            e = h(a, 0, [
                                0,
                                3,
                                0,
                                1,
                                0
                            ], "30"), o = n(a, e), this.hex = a;
                        }
                        this.aExtInfo = new Array;
                        for(var c = 0; c < o.length; c++){
                            var l = {
                                critical: !1
                            }, g = 0;
                            3 === n(a, o[c]).length && (l.critical = !0, g = 1), l.oid = r.hextooidstr(s(a, o[c], [
                                0
                            ], "06"));
                            var d = h(a, o[c], [
                                1 + g
                            ]);
                            l.vidx = f(a, d), this.aExtInfo.push(l);
                        }
                    }, this.getExtInfo = function(t) {
                        var e = this.aExtInfo, r = t;
                        if (t.match(/^[0-9.]+$/) || (r = Sr.asn1.x509.OID.name2oid(t)), "" !== r) {
                            for(var n = 0; n < e.length; n++)if (e[n].oid === r) return e[n];
                        }
                    }, this.getExtBasicConstraints = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("basicConstraints");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var n = {
                            extname: "basicConstraints"
                        };
                        if (e && (n.critical = !0), "3000" === t) return n;
                        if ("30030101ff" === t) return n.cA = !0, n;
                        if ("30060101ff02" === t.substr(0, 12)) {
                            var s = i(t, 10), a = parseInt(s, 16);
                            return n.cA = !0, n.pathLen = a, n;
                        }
                        throw new Error("hExtV parse error: " + t);
                    }, this.getExtKeyUsage = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("keyUsage");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var n = {
                            extname: "keyUsage"
                        };
                        return e && (n.critical = !0), n.names = this.getExtKeyUsageString(t).split(","), n;
                    }, this.getExtKeyUsageBin = function(t) {
                        if (void 0 === t) {
                            var e = this.getExtInfo("keyUsage");
                            if (void 0 === e) return "";
                            t = o(this.hex, e.vidx);
                        }
                        if (8 != t.length && 10 != t.length) throw new Error("malformed key usage value: " + t);
                        var r = "000000000000000" + parseInt(t.substr(6), 16).toString(2);
                        return 8 == t.length && (r = r.slice(-8)), 10 == t.length && (r = r.slice(-16)), "" == (r = r.replace(/0+$/, "")) && (r = "0"), r;
                    }, this.getExtKeyUsageString = function(t) {
                        for(var e = this.getExtKeyUsageBin(t), r = new Array, n = 0; n < e.length; n++)"1" == e.substr(n, 1) && r.push(on.KEYUSAGE_NAME[n]);
                        return r.join(",");
                    }, this.getExtSubjectKeyIdentifier = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("subjectKeyIdentifier");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var n = {
                            extname: "subjectKeyIdentifier"
                        };
                        e && (n.critical = !0);
                        var s = i(t, 0);
                        return n.kid = {
                            hex: s
                        }, n;
                    }, this.getExtAuthorityKeyIdentifier = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("authorityKeyIdentifier");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var s = {
                            extname: "authorityKeyIdentifier"
                        };
                        e && (s.critical = !0);
                        for(var a = n(t, 0), u = 0; u < a.length; u++){
                            var c = t.substr(a[u], 2);
                            if ("80" === c && (s.kid = {
                                hex: i(t, a[u])
                            }), "a1" === c) {
                                var h = o(t, a[u]), l = this.getGeneralNames(h);
                                s.issuer = l[0].dn;
                            }
                            "82" === c && (s.sn = {
                                hex: i(t, a[u])
                            });
                        }
                        return s;
                    }, this.getExtExtKeyUsage = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("extKeyUsage");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var s = {
                            extname: "extKeyUsage",
                            array: []
                        };
                        e && (s.critical = !0);
                        for(var a = n(t, 0), u = 0; u < a.length; u++)s.array.push(d(i(t, a[u])));
                        return s;
                    }, this.getExtExtKeyUsageName = function() {
                        var t = this.getExtInfo("extKeyUsage");
                        if (void 0 === t) return t;
                        var e = new Array, r = o(this.hex, t.vidx);
                        if ("" === r) return e;
                        for(var s = n(r, 0), a = 0; a < s.length; a++)e.push(d(i(r, s[a])));
                        return e;
                    }, this.getExtSubjectAltName = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("subjectAltName");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var n = {
                            extname: "subjectAltName",
                            array: []
                        };
                        return e && (n.critical = !0), n.array = this.getGeneralNames(t), n;
                    }, this.getExtIssuerAltName = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("issuerAltName");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var n = {
                            extname: "issuerAltName",
                            array: []
                        };
                        return e && (n.critical = !0), n.array = this.getGeneralNames(t), n;
                    }, this.getGeneralNames = function(t) {
                        for(var e = n(t, 0), r = [], i = 0; i < e.length; i++){
                            var s = this.getGeneralName(o(t, e[i]));
                            void 0 !== s && r.push(s);
                        }
                        return r;
                    }, this.getGeneralName = function(t) {
                        var e = t.substr(0, 2), r = i(t, 0), n = Lr(r);
                        return "81" == e ? {
                            rfc822: n
                        } : "82" == e ? {
                            dns: n
                        } : "86" == e ? {
                            uri: n
                        } : "87" == e ? {
                            ip: zr(r)
                        } : "a4" == e ? {
                            dn: this.getX500Name(r)
                        } : void 0;
                    }, this.getExtSubjectAltName2 = function() {
                        var t, e, r, s = this.getExtInfo("subjectAltName");
                        if (void 0 === s) return s;
                        for(var a = new Array, u = o(this.hex, s.vidx), c = n(u, 0), h = 0; h < c.length; h++)r = u.substr(c[h], 2), t = i(u, c[h]), "81" === r && (e = Dr(t), a.push([
                            "MAIL",
                            e
                        ])), "82" === r && (e = Dr(t), a.push([
                            "DNS",
                            e
                        ])), "84" === r && (e = on.hex2dn(t, 0), a.push([
                            "DN",
                            e
                        ])), "86" === r && (e = Dr(t), a.push([
                            "URI",
                            e
                        ])), "87" === r && (e = zr(t), a.push([
                            "IP",
                            e
                        ]));
                        return a;
                    }, this.getExtCRLDistributionPoints = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("cRLDistributionPoints");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var i = {
                            extname: "cRLDistributionPoints",
                            array: []
                        };
                        e && (i.critical = !0);
                        for(var s = n(t, 0), a = 0; a < s.length; a++){
                            var u = o(t, s[a]);
                            i.array.push(this.getDistributionPoint(u));
                        }
                        return i;
                    }, this.getDistributionPoint = function(t) {
                        for(var e = {}, r = n(t, 0), i = 0; i < r.length; i++){
                            var s = t.substr(r[i], 2), a = o(t, r[i]);
                            "a0" == s && (e.dpname = this.getDistributionPointName(a));
                        }
                        return e;
                    }, this.getDistributionPointName = function(t) {
                        for(var e = {}, r = n(t, 0), i = 0; i < r.length; i++){
                            var s = t.substr(r[i], 2), a = o(t, r[i]);
                            "a0" == s && (e.full = this.getGeneralNames(a));
                        }
                        return e;
                    }, this.getExtCRLDistributionPointsURI = function() {
                        var t = this.getExtInfo("cRLDistributionPoints");
                        if (void 0 === t) return t;
                        for(var e = new Array, r = n(this.hex, t.vidx), i = 0; i < r.length; i++)try {
                            var o = Dr(s(this.hex, r[i], [
                                0,
                                0,
                                0
                            ], "86"));
                            e.push(o);
                        } catch (t) {}
                        return e;
                    }, this.getExtAIAInfo = function() {
                        var t = this.getExtInfo("authorityInfoAccess");
                        if (void 0 === t) return t;
                        for(var e = {
                            ocsp: [],
                            caissuer: []
                        }, r = n(this.hex, t.vidx), i = 0; i < r.length; i++){
                            var o = s(this.hex, r[i], [
                                0
                            ], "06"), a = s(this.hex, r[i], [
                                1
                            ], "86");
                            "2b06010505073001" === o && e.ocsp.push(Dr(a)), "2b06010505073002" === o && e.caissuer.push(Dr(a));
                        }
                        return e;
                    }, this.getExtAuthorityInfoAccess = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("authorityInfoAccess");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var i = {
                            extname: "authorityInfoAccess",
                            array: []
                        };
                        e && (i.critical = !0);
                        for(var u = n(t, 0), c = 0; c < u.length; c++){
                            var h = a(t, u[c], [
                                0
                            ], "06"), l = Dr(s(t, u[c], [
                                1
                            ], "86"));
                            if ("2b06010505073001" == h) i.array.push({
                                ocsp: l
                            });
                            else {
                                if ("2b06010505073002" != h) throw new Error("unknown method: " + h);
                                i.array.push({
                                    caissuer: l
                                });
                            }
                        }
                        return i;
                    }, this.getExtCertificatePolicies = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("certificatePolicies");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var i = {
                            extname: "certificatePolicies",
                            array: []
                        };
                        e && (i.critical = !0);
                        for(var s = n(t, 0), a = 0; a < s.length; a++){
                            var u = o(t, s[a]), c = this.getPolicyInformation(u);
                            i.array.push(c);
                        }
                        return i;
                    }, this.getPolicyInformation = function(t) {
                        var e = {}, r = s(t, 0, [
                            0
                        ], "06");
                        e.policyoid = d(r);
                        var i = l(t, 0, [
                            1
                        ], "30");
                        if (-1 != i) {
                            e.array = [];
                            for(var a = n(t, i), u = 0; u < a.length; u++){
                                var c = o(t, a[u]), h = this.getPolicyQualifierInfo(c);
                                e.array.push(h);
                            }
                        }
                        return e;
                    }, this.getPolicyQualifierInfo = function(t) {
                        var e = {}, r = s(t, 0, [
                            0
                        ], "06");
                        if ("2b06010505070201" === r) {
                            var n = a(t, 0, [
                                1
                            ], "16");
                            e.cps = Lr(n);
                        } else if ("2b06010505070202" === r) {
                            var i = u(t, 0, [
                                1
                            ], "30");
                            e.unotice = this.getUserNotice(i);
                        }
                        return e;
                    }, this.getUserNotice = function(t) {
                        for(var e = {}, r = n(t, 0), i = 0; i < r.length; i++){
                            var s = o(t, r[i]);
                            "30" != s.substr(0, 2) && (e.exptext = this.getDisplayText(s));
                        }
                        return e;
                    }, this.getDisplayText = function(t) {
                        var e = {};
                        return e.type = ({
                            "0c": "utf8",
                            16: "ia5",
                            "1a": "vis",
                            "1e": "bmp"
                        })[t.substr(0, 2)], e.str = Lr(i(t, 0)), e;
                    }, this.getExtCRLNumber = function(t, e) {
                        var r = {
                            extname: "cRLNumber"
                        };
                        if (e && (r.critical = !0), "02" == t.substr(0, 2)) return r.num = {
                            hex: i(t, 0)
                        }, r;
                        throw new Error("hExtV parse error: " + t);
                    }, this.getExtCRLReason = function(t, e) {
                        var r = {
                            extname: "cRLReason"
                        };
                        if (e && (r.critical = !0), "0a" == t.substr(0, 2)) return r.code = parseInt(i(t, 0), 16), r;
                        throw new Error("hExtV parse error: " + t);
                    }, this.getExtOcspNonce = function(t, e) {
                        var r = {
                            extname: "ocspNonce"
                        };
                        e && (r.critical = !0);
                        var n = i(t, 0);
                        return r.hex = n, r;
                    }, this.getExtOcspNoCheck = function(t, e) {
                        var r = {
                            extname: "ocspNoCheck"
                        };
                        return e && (r.critical = !0), r;
                    }, this.getExtAdobeTimeStamp = function(t, e) {
                        if (void 0 === t && void 0 === e) {
                            var r = this.getExtInfo("adobeTimeStamp");
                            if (void 0 === r) return;
                            t = o(this.hex, r.vidx), e = r.critical;
                        }
                        var i = {
                            extname: "adobeTimeStamp"
                        };
                        e && (i.critical = !0);
                        var s = n(t, 0);
                        if (s.length > 1) {
                            var a = o(t, s[1]), u = this.getGeneralName(a);
                            null != u.uri && (i.uri = u.uri);
                        }
                        if (s.length > 2) {
                            var c = o(t, s[2]);
                            "0101ff" == c && (i.reqauth = !0), "010100" == c && (i.reqauth = !1);
                        }
                        return i;
                    }, this.getX500NameRule = function(t) {
                        for(var e = null, r = [], n = 0; n < t.length; n++)for(var i = t[n], o = 0; o < i.length; o++)r.push(i[o]);
                        for(n = 0; n < r.length; n++){
                            var s = r[n], a = s.ds, u = s.value, c = s.type;
                            if (a, "prn" != a && "utf8" != a && "ia5" != a) return "mixed";
                            if ("ia5" == a) {
                                if ("CN" != c) return "mixed";
                                if (Sr.lang.String.isMail(u)) continue;
                                return "mixed";
                            }
                            if ("C" == c) {
                                if ("prn" == a) continue;
                                return "mixed";
                            }
                            if (a, null == e) e = a;
                            else if (e !== a) return "mixed";
                        }
                        return null == e ? "prn" : e;
                    }, this.getX500Name = function(t) {
                        var e = this.getX500NameArray(t);
                        return {
                            array: e,
                            str: this.dnarraytostr(e)
                        };
                    }, this.getX500NameArray = function(t) {
                        for(var e = [], r = n(t, 0), i = 0; i < r.length; i++)e.push(this.getRDN(o(t, r[i])));
                        return e;
                    }, this.getRDN = function(t) {
                        for(var e = [], r = n(t, 0), i = 0; i < r.length; i++)e.push(this.getAttrTypeAndValue(o(t, r[i])));
                        return e;
                    }, this.getAttrTypeAndValue = function(t) {
                        var e = {
                            type: null,
                            value: null,
                            ds: null
                        }, r = n(t, 0), i = s(t, r[0], [], "06"), o = s(t, r[1], []), a = Sr.asn1.ASN1Util.oidHexToInt(i);
                        return e.type = Sr.asn1.x509.OID.oid2atype(a), e.ds = this.HEX2STAG[t.substr(r[1], 2)], "bmp" != e.ds ? e.value = Dr(o) : e.value = Yr(o), e;
                    }, this.readCertPEM = function(t) {
                        this.readCertHex(v(t));
                    }, this.readCertHex = function(t) {
                        this.hex = t, this.getVersion();
                        try {
                            h(this.hex, 0, [
                                0,
                                7
                            ], "a3"), this.parseExt();
                        } catch (t) {}
                    }, this.getParam = function() {
                        var t = {};
                        return t.version = this.getVersion(), t.serial = {
                            hex: this.getSerialNumberHex()
                        }, t.sigalg = this.getSignatureAlgorithmField(), t.issuer = this.getIssuer(), t.notbefore = this.getNotBefore(), t.notafter = this.getNotAfter(), t.subject = this.getSubject(), t.sbjpubkey = jr(this.getPublicKeyHex(), "PUBLIC KEY"), this.aExtInfo.length > 0 && (t.ext = this.getExtParamArray()), t.sighex = this.getSignatureValueHex(), t;
                    }, this.getExtParamArray = function(t) {
                        null == t && -1 != l(this.hex, 0, [
                            0,
                            "[3]"
                        ]) && (t = c(this.hex, 0, [
                            0,
                            "[3]",
                            0
                        ], "30"));
                        for(var e = [], r = n(t, 0), i = 0; i < r.length; i++){
                            var s = o(t, r[i]), a = this.getExtParam(s);
                            null != a && e.push(a);
                        }
                        return e;
                    }, this.getExtParam = function(t) {
                        var e = n(t, 0).length;
                        if (2 != e && 3 != e) throw new Error("wrong number elements in Extension: " + e + " " + t);
                        var r = p(s(t, 0, [
                            0
                        ], "06")), i = !1;
                        3 == e && "0101ff" == u(t, 0, [
                            1
                        ]) && (i = !0);
                        var o = u(t, 0, [
                            e - 1,
                            0
                        ]), a = void 0;
                        if ("2.5.29.14" == r ? a = this.getExtSubjectKeyIdentifier(o, i) : "2.5.29.15" == r ? a = this.getExtKeyUsage(o, i) : "2.5.29.17" == r ? a = this.getExtSubjectAltName(o, i) : "2.5.29.18" == r ? a = this.getExtIssuerAltName(o, i) : "2.5.29.19" == r ? a = this.getExtBasicConstraints(o, i) : "2.5.29.31" == r ? a = this.getExtCRLDistributionPoints(o, i) : "2.5.29.32" == r ? a = this.getExtCertificatePolicies(o, i) : "2.5.29.35" == r ? a = this.getExtAuthorityKeyIdentifier(o, i) : "2.5.29.37" == r ? a = this.getExtExtKeyUsage(o, i) : "1.3.6.1.5.5.7.1.1" == r ? a = this.getExtAuthorityInfoAccess(o, i) : "2.5.29.20" == r ? a = this.getExtCRLNumber(o, i) : "2.5.29.21" == r ? a = this.getExtCRLReason(o, i) : "1.3.6.1.5.5.7.48.1.2" == r ? a = this.getExtOcspNonce(o, i) : "1.3.6.1.5.5.7.48.1.5" == r ? a = this.getExtOcspNoCheck(o, i) : "1.2.840.113583.1.1.9.1" == r && (a = this.getExtAdobeTimeStamp(o, i)), null != a) return a;
                        var c = {
                            extname: r,
                            extn: o
                        };
                        return i && (c.critical = !0), c;
                    }, this.findExt = function(t, e) {
                        for(var r = 0; r < t.length; r++)if (t[r].extname == e) return t[r];
                        return null;
                    }, this.updateExtCDPFullURI = function(t, e) {
                        var r = this.findExt(t, "cRLDistributionPoints");
                        if (null != r && null != r.array) {
                            for(var n = r.array, i = 0; i < n.length; i++)if (null != n[i].dpname && null != n[i].dpname.full) for(var o = n[i].dpname.full, s = 0; s < o.length; s++){
                                var a = o[i];
                                null != a.uri && (a.uri = e);
                            }
                        }
                    }, this.updateExtAIAOCSP = function(t, e) {
                        var r = this.findExt(t, "authorityInfoAccess");
                        if (null != r && null != r.array) for(var n = r.array, i = 0; i < n.length; i++)null != n[i].ocsp && (n[i].ocsp = e);
                    }, this.updateExtAIACAIssuer = function(t, e) {
                        var r = this.findExt(t, "authorityInfoAccess");
                        if (null != r && null != r.array) for(var n = r.array, i = 0; i < n.length; i++)null != n[i].caissuer && (n[i].caissuer = e);
                    }, this.dnarraytostr = function(t) {
                        return "/" + t.map(function(t) {
                            return (function e(t) {
                                return t.map(function(t) {
                                    return (function e(t) {
                                        return t.type + "=" + t.value;
                                    })(t).replace(/\+/, "\\+");
                                }).join("+");
                            })(t).replace(/\//, "\\/");
                        }).join("/");
                    }, this.getInfo = function() {
                        var t, e, r, n = function t(e) {
                            return JSON.stringify(e.array).replace(/[\[\]\{\}\"]/g, "");
                        }, i = function t(e) {
                            for(var r = "", n = e.array, i = 0; i < n.length; i++){
                                var o = n[i];
                                if (r += "    policy oid: " + o.policyoid + "\n", void 0 !== o.array) for(var s = 0; s < o.array.length; s++){
                                    var a = o.array[s];
                                    void 0 !== a.cps && (r += "    cps: " + a.cps + "\n");
                                }
                            }
                            return r;
                        }, o = function t(e) {
                            for(var r = "", n = e.array, i = 0; i < n.length; i++){
                                var o = n[i];
                                try {
                                    void 0 !== o.dpname.full[0].uri && (r += "    " + o.dpname.full[0].uri + "\n");
                                } catch (t) {}
                                try {
                                    void 0 !== o.dname.full[0].dn.hex && (r += "    " + on.hex2dn(o.dpname.full[0].dn.hex) + "\n");
                                } catch (t) {}
                            }
                            return r;
                        }, s = function t(e) {
                            for(var r = "", n = e.array, i = 0; i < n.length; i++){
                                var o = n[i];
                                void 0 !== o.caissuer && (r += "    caissuer: " + o.caissuer + "\n"), void 0 !== o.ocsp && (r += "    ocsp: " + o.ocsp + "\n");
                            }
                            return r;
                        };
                        if (t = "Basic Fields\n", t += "  serial number: " + this.getSerialNumberHex() + "\n", t += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n", t += "  issuer: " + this.getIssuerString() + "\n", t += "  notBefore: " + this.getNotBefore() + "\n", t += "  notAfter: " + this.getNotAfter() + "\n", t += "  subject: " + this.getSubjectString() + "\n", t += "  subject public key info: \n", t += "    key algorithm: " + (e = this.getPublicKey()).type + "\n", "RSA" === e.type && (t += "    n=" + $r(e.n.toString(16)).substr(0, 16) + "...\n", t += "    e=" + $r(e.e.toString(16)) + "\n"), null != (r = this.aExtInfo)) {
                            t += "X509v3 Extensions:\n";
                            for(var a = 0; a < r.length; a++){
                                var u = r[a], c = Sr.asn1.x509.OID.oid2name(u.oid);
                                "" === c && (c = u.oid);
                                var h = "";
                                if (!0 === u.critical && (h = "CRITICAL"), t += "  " + c + " " + h + ":\n", "basicConstraints" === c) {
                                    var l = this.getExtBasicConstraints();
                                    void 0 === l.cA ? t += "    {}\n" : (t += "    cA=true", void 0 !== l.pathLen && (t += ", pathLen=" + l.pathLen), t += "\n");
                                } else if ("keyUsage" === c) t += "    " + this.getExtKeyUsageString() + "\n";
                                else if ("subjectKeyIdentifier" === c) t += "    " + this.getExtSubjectKeyIdentifier().kid.hex + "\n";
                                else if ("authorityKeyIdentifier" === c) {
                                    var f = this.getExtAuthorityKeyIdentifier();
                                    void 0 !== f.kid && (t += "    kid=" + f.kid.hex + "\n");
                                } else {
                                    if ("extKeyUsage" === c) t += "    " + this.getExtExtKeyUsage().array.join(", ") + "\n";
                                    else if ("subjectAltName" === c) t += "    " + n(this.getExtSubjectAltName()) + "\n";
                                    else if ("cRLDistributionPoints" === c) t += o(this.getExtCRLDistributionPoints());
                                    else if ("authorityInfoAccess" === c) t += s(this.getExtAuthorityInfoAccess());
                                    else "certificatePolicies" === c && (t += i(this.getExtCertificatePolicies()));
                                }
                            }
                        }
                        return t += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n", t += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";
                    }, "string" == typeof t && (-1 != t.indexOf("-----BEGIN") ? this.readCertPEM(t) : Sr.lang.String.isHex(t) && this.readCertHex(t));
                }
                Me.prototype.sign = function(t, e) {
                    var r = function t(r) {
                        return Sr.crypto.Util.hashString(r, e);
                    }(t);
                    return this.signWithMessageHash(r, e);
                }, Me.prototype.signWithMessageHash = function(t, e) {
                    var r = Oe(Sr.crypto.Util.getPaddedDigestInfoHex(t, e, this.n.bitLength()), 16);
                    return en(this.doPrivate(r).toString(16), this.n.bitLength());
                }, Me.prototype.signPSS = function(t, e, r) {
                    var n = function t(r) {
                        return Sr.crypto.Util.hashHex(r, e);
                    }(Nr(t));
                    return void 0 === r && (r = -1), this.signWithMessageHashPSS(n, e, r);
                }, Me.prototype.signWithMessageHashPSS = function(t, e, r) {
                    var n, i = Lr(t), o = i.length, s = this.n.bitLength() - 1, a = Math.ceil(s / 8), u = function t(r) {
                        return Sr.crypto.Util.hashHex(r, e);
                    };
                    if (-1 === r || void 0 === r) r = o;
                    else if (-2 === r) r = a - o - 2;
                    else if (r < -2) throw new Error("invalid salt length");
                    if (a < o + r + 2) throw new Error("data too long");
                    var c = "";
                    r > 0 && (c = new Array(r), (new Be).nextBytes(c), c = String.fromCharCode.apply(String, c));
                    var h = Lr(u(Nr("\x00\x00\x00\x00\x00\x00\x00\x00" + i + c))), l = [];
                    for(n = 0; n < a - r - o - 2; n += 1)l[n] = 0;
                    var f = String.fromCharCode.apply(String, l) + "\x01" + c, g = rn(h, f.length, u), d = [];
                    for(n = 0; n < f.length; n += 1)d[n] = f.charCodeAt(n) ^ g.charCodeAt(n);
                    var p = 65280 >> 8 * a - s & 255;
                    for(d[0] &= ~p, n = 0; n < o; n++)d.push(h.charCodeAt(n));
                    return d.push(188), en(this.doPrivate(new w(d)).toString(16), this.n.bitLength());
                }, Me.prototype.verify = function(t, e) {
                    if (null == (e = e.toLowerCase()).match(/^[0-9a-f]+$/)) return !1;
                    var r = Oe(e, 16), n = this.n.bitLength();
                    if (r.bitLength() > n) return !1;
                    var i = this.doPublic(r).toString(16);
                    if (i.length + 3 != n / 4) return !1;
                    var o = nn(i.replace(/^1f+00/, ""));
                    if (0 == o.length) return !1;
                    var s = o[0];
                    return o[1] == function t(e) {
                        return Sr.crypto.Util.hashString(e, s);
                    }(t);
                }, Me.prototype.verifyWithMessageHash = function(t, e) {
                    if (e.length != Math.ceil(this.n.bitLength() / 4)) return !1;
                    var r = Oe(e, 16);
                    if (r.bitLength() > this.n.bitLength()) return 0;
                    var n = nn(this.doPublic(r).toString(16).replace(/^1f+00/, ""));
                    if (0 == n.length) return !1;
                    n[0];
                    return n[1] == t;
                }, Me.prototype.verifyPSS = function(t, e, r, n) {
                    var i = function t(e) {
                        return Sr.crypto.Util.hashHex(e, r);
                    }(Nr(t));
                    return void 0 === n && (n = -1), this.verifyWithMessageHashPSS(i, e, r, n);
                }, Me.prototype.verifyWithMessageHashPSS = function(t, e, r, n) {
                    if (e.length != Math.ceil(this.n.bitLength() / 4)) return !1;
                    var i, o = new w(e, 16), s = function t(e) {
                        return Sr.crypto.Util.hashHex(e, r);
                    }, a = Lr(t), u = a.length, c = this.n.bitLength() - 1, h = Math.ceil(c / 8);
                    if (-1 === n || void 0 === n) n = u;
                    else if (-2 === n) n = h - u - 2;
                    else if (n < -2) throw new Error("invalid salt length");
                    if (h < u + n + 2) throw new Error("data too long");
                    var l = this.doPublic(o).toByteArray();
                    for(i = 0; i < l.length; i += 1)l[i] &= 255;
                    for(; l.length < h;)l.unshift(0);
                    if (188 !== l[h - 1]) throw new Error("encoded message does not end in 0xbc");
                    var f = (l = String.fromCharCode.apply(String, l)).substr(0, h - u - 1), g = l.substr(f.length, u), d = 65280 >> 8 * h - c & 255;
                    if (0 != (f.charCodeAt(0) & d)) throw new Error("bits beyond keysize not zero");
                    var p = rn(g, f.length, s), v = [];
                    for(i = 0; i < f.length; i += 1)v[i] = f.charCodeAt(i) ^ p.charCodeAt(i);
                    v[0] &= ~d;
                    var y = h - u - n - 2;
                    for(i = 0; i < y; i += 1)if (0 !== v[i]) throw new Error("leftmost octets not zero");
                    if (1 !== v[y]) throw new Error("0x01 marker not found");
                    return g === Lr(s(Nr("\x00\x00\x00\x00\x00\x00\x00\x00" + a + String.fromCharCode.apply(String, v.slice(-n)))));
                }, Me.SALT_LEN_HLEN = -1, Me.SALT_LEN_MAX = -2, Me.SALT_LEN_RECOVER = -2, on.hex2dn = function(t, e) {
                    void 0 === e && (e = 0);
                    var r = new on;
                    Fr.getTLV(t, e);
                    return r.getX500Name(t).str;
                }, on.hex2rdn = function(t, e) {
                    if (void 0 === e && (e = 0), "31" !== t.substr(e, 2)) throw new Error("malformed RDN");
                    for(var r = new Array, n = Fr.getChildIdx(t, e), i = 0; i < n.length; i++)r.push(on.hex2attrTypeValue(t, n[i]));
                    return (r = r.map(function(t) {
                        return t.replace("+", "\\+");
                    })).join("+");
                }, on.hex2attrTypeValue = function(t, e) {
                    var r = Fr, n = r.getV;
                    if (void 0 === e && (e = 0), "30" !== t.substr(e, 2)) throw new Error("malformed attribute type and value");
                    var i = r.getChildIdx(t, e);
                    2 !== i.length || t.substr(i[0], 2);
                    var o = n(t, i[0]), s = Sr.asn1.ASN1Util.oidHexToInt(o);
                    return Sr.asn1.x509.OID.oid2atype(s) + "=" + Lr(n(t, i[1]));
                }, on.getPublicKeyFromCertHex = function(t) {
                    var e = new on;
                    return e.readCertHex(t), e.getPublicKey();
                }, on.getPublicKeyFromCertPEM = function(t) {
                    var e = new on;
                    return e.readCertPEM(t), e.getPublicKey();
                }, on.getPublicKeyInfoPropOfCertPEM = function(t) {
                    var e, r, n = Fr.getVbyList, i = {};
                    return i.algparam = null, (e = new on).readCertPEM(t), r = e.getPublicKeyHex(), i.keyhex = n(r, 0, [
                        1
                    ], "03").substr(2), i.algoid = n(r, 0, [
                        0,
                        0
                    ], "06"), "2a8648ce3d0201" === i.algoid && (i.algparam = n(r, 0, [
                        0,
                        1
                    ], "06")), i;
                }, on.KEYUSAGE_NAME = [
                    "digitalSignature",
                    "nonRepudiation",
                    "keyEncipherment",
                    "dataEncipherment",
                    "keyAgreement",
                    "keyCertSign",
                    "cRLSign",
                    "encipherOnly",
                    "decipherOnly"
                ], void 0 !== Sr && Sr || (e.KJUR = Sr = {}), void 0 !== Sr.jws && Sr.jws || (Sr.jws = {}), Sr.jws.JWS = function() {
                    var t = Sr.jws.JWS.isSafeJSONString;
                    this.parseJWS = function(e, r) {
                        if (void 0 === this.parsedJWS || !r && void 0 === this.parsedJWS.sigvalH) {
                            var n = e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);
                            if (null == n) throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
                            var i = n[1], o = n[2], s = n[3], a = i + "." + o;
                            if (this.parsedJWS = {}, this.parsedJWS.headB64U = i, this.parsedJWS.payloadB64U = o, this.parsedJWS.sigvalB64U = s, this.parsedJWS.si = a, !r) {
                                var u = Rr(s), c = Oe(u, 16);
                                this.parsedJWS.sigvalH = u, this.parsedJWS.sigvalBI = c;
                            }
                            var h = wr(i), l = wr(o);
                            if (this.parsedJWS.headS = h, this.parsedJWS.payloadS = l, !t(h, this.parsedJWS, "headP")) throw "malformed JSON string for JWS Head: " + h;
                        }
                    };
                }, Sr.jws.JWS.sign = function(t, e, r, n, i) {
                    var o, s, a, u = Sr, c = u.jws.JWS, h = c.readSafeJSONString, l = c.isSafeJSONString, f = u.crypto, d = (f.ECDSA, f.Mac), p = f.Signature, v = JSON;
                    if ("string" != typeof e && "object" != (void 0 === e ? "undefined" : g(e))) throw "spHeader must be JSON string or object: " + e;
                    if ("object" == (void 0 === e ? "undefined" : g(e)) && (s = e, o = v.stringify(s)), "string" == typeof e) {
                        if (!l(o = e)) throw "JWS Head is not safe JSON string: " + o;
                        s = h(o);
                    }
                    if (a = r, "object" == (void 0 === r ? "undefined" : g(r)) && (a = v.stringify(r)), "" != t && null != t || void 0 === s.alg || (t = s.alg), "" != t && null != t && void 0 === s.alg && (s.alg = t, o = v.stringify(s)), t !== s.alg) throw "alg and sHeader.alg doesn't match: " + t + "!=" + s.alg;
                    var y = null;
                    if (void 0 === c.jwsalg2sigalg[t]) throw "unsupported alg name: " + t;
                    y = c.jwsalg2sigalg[t];
                    var m = br(o) + "." + br(a), _ = "";
                    if ("Hmac" == y.substr(0, 4)) {
                        if (void 0 === n) throw "mac key shall be specified for HS* alg";
                        var S = new d({
                            alg: y,
                            prov: "cryptojs",
                            pass: n
                        });
                        S.updateString(m), _ = S.doFinal();
                    } else if (-1 != y.indexOf("withECDSA")) {
                        (w = new p({
                            alg: y
                        })).init(n, i), w.updateString(m);
                        var b = w.sign();
                        _ = Sr.crypto.ECDSA.asn1SigToConcatSig(b);
                    } else {
                        var w;
                        if ("none" != y) (w = new p({
                            alg: y
                        })).init(n, i), w.updateString(m), _ = w.sign();
                    }
                    return m + "." + Tr(_);
                }, Sr.jws.JWS.verify = function(t, e, r) {
                    var n, i = Sr, o = i.jws.JWS, s = o.readSafeJSONString, a = i.crypto, u = a.ECDSA, c = a.Mac, h = a.Signature;
                    void 0 !== g(Me) && (n = Me);
                    var l = t.split(".");
                    if (3 !== l.length) return !1;
                    var f = l[0] + "." + l[1], d = Rr(l[2]), p = s(wr(l[0])), v = null, y = null;
                    if (void 0 === p.alg) throw "algorithm not specified in header";
                    if ((y = (v = p.alg).substr(0, 2), null != r && "[object Array]" === Object.prototype.toString.call(r) && r.length > 0) && -1 == (":" + r.join(":") + ":").indexOf(":" + v + ":")) throw "algorithm '" + v + "' not accepted in the list";
                    if ("none" != v && null === e) throw "key shall be specified to verify.";
                    if ("string" == typeof e && -1 != e.indexOf("-----BEGIN ") && (e = tn.getKey(e)), !("RS" != y && "PS" != y || e instanceof n)) throw "key shall be a RSAKey obj for RS* and PS* algs";
                    if ("ES" == y && !(e instanceof u)) throw "key shall be a ECDSA obj for ES* algs";
                    var m = null;
                    if (void 0 === o.jwsalg2sigalg[p.alg]) throw "unsupported alg name: " + v;
                    if ("none" == (m = o.jwsalg2sigalg[v])) throw "not supported";
                    if ("Hmac" == m.substr(0, 4)) {
                        if (void 0 === e) throw "hexadecimal key shall be specified for HMAC";
                        var _ = new c({
                            alg: m,
                            pass: e
                        });
                        return _.updateString(f), d == _.doFinal();
                    }
                    if (-1 != m.indexOf("withECDSA")) {
                        var S, b = null;
                        try {
                            b = u.concatSigToASN1Sig(d);
                        } catch (t) {
                            return !1;
                        }
                        return (S = new h({
                            alg: m
                        })).init(e), S.updateString(f), S.verify(b);
                    }
                    return (S = new h({
                        alg: m
                    })).init(e), S.updateString(f), S.verify(d);
                }, Sr.jws.JWS.parse = function(t) {
                    var e, r, n, i = t.split("."), o = {};
                    if (2 != i.length && 3 != i.length) throw "malformed sJWS: wrong number of '.' splitted elements";
                    return e = i[0], r = i[1], 3 == i.length && (n = i[2]), o.headerObj = Sr.jws.JWS.readSafeJSONString(wr(e)), o.payloadObj = Sr.jws.JWS.readSafeJSONString(wr(r)), o.headerPP = JSON.stringify(o.headerObj, null, "  "), null == o.payloadObj ? o.payloadPP = wr(r) : o.payloadPP = JSON.stringify(o.payloadObj, null, "  "), void 0 !== n && (o.sigHex = Rr(n)), o;
                }, Sr.jws.JWS.verifyJWT = function(t, e, r) {
                    var n = Sr.jws, i = n.JWS, o = i.readSafeJSONString, s = i.inArray, a = i.includedArray, u = t.split("."), c = u[0], h = u[1], l = (Rr(u[2]), o(wr(c))), f = o(wr(h));
                    if (void 0 === l.alg) return !1;
                    if (void 0 === r.alg) throw "acceptField.alg shall be specified";
                    if (!s(l.alg, r.alg)) return !1;
                    if (void 0 !== f.iss && "object" === g(r.iss) && !s(f.iss, r.iss)) return !1;
                    if (void 0 !== f.sub && "object" === g(r.sub) && !s(f.sub, r.sub)) return !1;
                    if (void 0 !== f.aud && "object" === g(r.aud)) {
                        if ("string" == typeof f.aud) {
                            if (!s(f.aud, r.aud)) return !1;
                        } else if ("object" == g(f.aud) && !a(f.aud, r.aud)) return !1;
                    }
                    var d = n.IntDate.getNow();
                    return void 0 !== r.verifyAt && "number" == typeof r.verifyAt && (d = r.verifyAt), void 0 !== r.gracePeriod && "number" == typeof r.gracePeriod || (r.gracePeriod = 0), !(void 0 !== f.exp && "number" == typeof f.exp && f.exp + r.gracePeriod < d) && !(void 0 !== f.nbf && "number" == typeof f.nbf && d < f.nbf - r.gracePeriod) && !(void 0 !== f.iat && "number" == typeof f.iat && d < f.iat - r.gracePeriod) && (void 0 === f.jti || void 0 === r.jti || f.jti === r.jti) && !!i.verify(t, e, r.alg);
                }, Sr.jws.JWS.includedArray = function(t, e) {
                    var r = Sr.jws.JWS.inArray;
                    if (null === t) return !1;
                    if ("object" !== (void 0 === t ? "undefined" : g(t))) return !1;
                    if ("number" != typeof t.length) return !1;
                    for(var n = 0; n < t.length; n++)if (!r(t[n], e)) return !1;
                    return !0;
                }, Sr.jws.JWS.inArray = function(t, e) {
                    if (null === e) return !1;
                    if ("object" !== (void 0 === e ? "undefined" : g(e))) return !1;
                    if ("number" != typeof e.length) return !1;
                    for(var r = 0; r < e.length; r++)if (e[r] == t) return !0;
                    return !1;
                }, Sr.jws.JWS.jwsalg2sigalg = {
                    HS256: "HmacSHA256",
                    HS384: "HmacSHA384",
                    HS512: "HmacSHA512",
                    RS256: "SHA256withRSA",
                    RS384: "SHA384withRSA",
                    RS512: "SHA512withRSA",
                    ES256: "SHA256withECDSA",
                    ES384: "SHA384withECDSA",
                    PS256: "SHA256withRSAandMGF1",
                    PS384: "SHA384withRSAandMGF1",
                    PS512: "SHA512withRSAandMGF1",
                    none: "none"
                }, Sr.jws.JWS.isSafeJSONString = function(t, e, r) {
                    var n = null;
                    try {
                        return "object" != (void 0 === (n = _r(t)) ? "undefined" : g(n)) || n.constructor === Array ? 0 : (e && (e[r] = n), 1);
                    } catch (t) {
                        return 0;
                    }
                }, Sr.jws.JWS.readSafeJSONString = function(t) {
                    var e = null;
                    try {
                        return "object" != (void 0 === (e = _r(t)) ? "undefined" : g(e)) || e.constructor === Array ? null : e;
                    } catch (t) {
                        return null;
                    }
                }, Sr.jws.JWS.getEncodedSignatureValueFromJWS = function(t) {
                    var e = t.match(/^[^.]+\.[^.]+\.([^.]+)$/);
                    if (null == e) throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
                    return e[1];
                }, Sr.jws.JWS.getJWKthumbprint = function(t) {
                    if ("RSA" !== t.kty && "EC" !== t.kty && "oct" !== t.kty) throw "unsupported algorithm for JWK Thumprint";
                    var e = "{";
                    if ("RSA" === t.kty) {
                        if ("string" != typeof t.n || "string" != typeof t.e) throw "wrong n and e value for RSA key";
                        e += '"e":"' + t.e + '",', e += '"kty":"' + t.kty + '",', e += '"n":"' + t.n + '"}';
                    } else if ("EC" === t.kty) {
                        if ("string" != typeof t.crv || "string" != typeof t.x || "string" != typeof t.y) throw "wrong crv, x and y value for EC key";
                        e += '"crv":"' + t.crv + '",', e += '"kty":"' + t.kty + '",', e += '"x":"' + t.x + '",', e += '"y":"' + t.y + '"}';
                    } else if ("oct" === t.kty) {
                        if ("string" != typeof t.k) throw "wrong k value for oct(symmetric) key";
                        e += '"kty":"' + t.kty + '",', e += '"k":"' + t.k + '"}';
                    }
                    var r = Nr(e);
                    return Tr(Sr.crypto.Util.hashHex(r, "sha256"));
                }, Sr.jws.IntDate = {}, Sr.jws.IntDate.get = function(t) {
                    var e = Sr.jws.IntDate, r = e.getNow, n = e.getZulu;
                    if ("now" == t) return r();
                    if ("now + 1hour" == t) return r() + 3600;
                    if ("now + 1day" == t) return r() + 86400;
                    if ("now + 1month" == t) return r() + 2592e3;
                    if ("now + 1year" == t) return r() + 31536e3;
                    if (t.match(/Z$/)) return n(t);
                    if (t.match(/^[0-9]+$/)) return parseInt(t);
                    throw "unsupported format: " + t;
                }, Sr.jws.IntDate.getZulu = function(t) {
                    return Vr(t);
                }, Sr.jws.IntDate.getNow = function() {
                    return ~~(new Date / 1e3);
                }, Sr.jws.IntDate.intDate2UTCString = function(t) {
                    return new Date(1e3 * t).toUTCString();
                }, Sr.jws.IntDate.intDate2Zulu = function(t) {
                    var e = new Date(1e3 * t);
                    return ("0000" + e.getUTCFullYear()).slice(-4) + ("00" + (e.getUTCMonth() + 1)).slice(-2) + ("00" + e.getUTCDate()).slice(-2) + ("00" + e.getUTCHours()).slice(-2) + ("00" + e.getUTCMinutes()).slice(-2) + ("00" + e.getUTCSeconds()).slice(-2) + "Z";
                }, e.SecureRandom = Be, e.rng_seed_time = Re, e.BigInteger = w, e.RSAKey = Me;
                var sn = Sr.crypto.EDSA;
                e.EDSA = sn;
                var an = Sr.crypto.DSA;
                e.DSA = an;
                var un = Sr.crypto.Signature;
                e.Signature = un;
                var cn = Sr.crypto.MessageDigest;
                e.MessageDigest = cn;
                var hn = Sr.crypto.Mac;
                e.Mac = hn;
                var ln = Sr.crypto.Cipher;
                e.Cipher = ln, e.KEYUTIL = tn, e.ASN1HEX = Fr, e.X509 = on, e.CryptoJS = v, e.b64tohex = S, e.b64toBA = b, e.stoBA = Er, e.BAtos = xr, e.BAtohex = Ar, e.stohex = kr, e.stob64 = function fn(t) {
                    return _(kr(t));
                }, e.stob64u = function gn(t) {
                    return Pr(_(kr(t)));
                }, e.b64utos = function dn(t) {
                    return xr(b(Cr(t)));
                }, e.b64tob64u = Pr, e.b64utob64 = Cr, e.hex2b64 = _, e.hextob64u = Tr, e.b64utohex = Rr, e.utf8tob64u = br, e.b64utoutf8 = wr, e.utf8tob64 = function pn(t) {
                    return _(Kr(Gr(t)));
                }, e.b64toutf8 = function vn(t) {
                    return decodeURIComponent(qr(S(t)));
                }, e.utf8tohex = Ir, e.hextoutf8 = Dr, e.hextorstr = Lr, e.rstrtohex = Nr, e.hextob64 = Ur, e.hextob64nl = Br, e.b64nltohex = Or, e.hextopem = jr, e.pemtohex = Mr, e.hextoArrayBuffer = function yn(t) {
                    if (t.length % 2 != 0) throw "input is not even length";
                    if (null == t.match(/^[0-9A-Fa-f]+$/)) throw "input is not hexadecimal";
                    for(var e = new ArrayBuffer(t.length / 2), r = new DataView(e), n = 0; n < t.length / 2; n++)r.setUint8(n, parseInt(t.substr(2 * n, 2), 16));
                    return e;
                }, e.ArrayBuffertohex = function mn(t) {
                    for(var e = "", r = new DataView(t), n = 0; n < t.byteLength; n++)e += ("00" + r.getUint8(n).toString(16)).slice(-2);
                    return e;
                }, e.zulutomsec = Hr, e.zulutosec = Vr, e.zulutodate = function _n(t) {
                    return new Date(Hr(t));
                }, e.datetozulu = function Sn(t, e, r) {
                    var n, i = t.getUTCFullYear();
                    if (e) {
                        if (i < 1950 || 2049 < i) throw "not proper year for UTCTime: " + i;
                        n = ("" + i).slice(-2);
                    } else n = ("000" + i).slice(-4);
                    if (n += ("0" + (t.getUTCMonth() + 1)).slice(-2), n += ("0" + t.getUTCDate()).slice(-2), n += ("0" + t.getUTCHours()).slice(-2), n += ("0" + t.getUTCMinutes()).slice(-2), n += ("0" + t.getUTCSeconds()).slice(-2), r) {
                        var o = t.getUTCMilliseconds();
                        0 !== o && (n += "." + (o = (o = ("00" + o).slice(-3)).replace(/0+$/g, "")));
                    }
                    return n += "Z";
                }, e.uricmptohex = Kr, e.hextouricmp = qr, e.ipv6tohex = Jr, e.hextoipv6 = Wr, e.hextoip = zr, e.iptohex = function bn(t) {
                    var e = "malformed IP address";
                    if (!(t = t.toLowerCase(t)).match(/^[0-9.]+$/)) {
                        if (t.match(/^[0-9a-f:]+$/) && -1 !== t.indexOf(":")) return Jr(t);
                        throw e;
                    }
                    var r = t.split(".");
                    if (4 !== r.length) throw e;
                    var n = "";
                    try {
                        for(var i = 0; i < 4; i++)n += ("0" + parseInt(r[i]).toString(16)).slice(-2);
                        return n;
                    } catch (t) {
                        throw e;
                    }
                }, e.encodeURIComponentAll = Gr, e.newline_toUnix = function wn(t) {
                    return t = t.replace(/\r\n/gm, "\n");
                }, e.newline_toDos = function Fn(t) {
                    return t = (t = t.replace(/\r\n/gm, "\n")).replace(/\n/gm, "\r\n");
                }, e.hextoposhex = $r, e.intarystrtohex = function En(t) {
                    t = (t = (t = t.replace(/^\s*\[\s*/, "")).replace(/\s*\]\s*$/, "")).replace(/\s*/g, "");
                    try {
                        return t.split(/,/).map(function(t, e, r) {
                            var n = parseInt(t);
                            if (n < 0 || 255 < n) throw "integer not in range 0-255";
                            return ("00" + n.toString(16)).slice(-2);
                        }).join("");
                    } catch (t) {
                        throw "malformed integer array string: " + t;
                    }
                }, e.strdiffidx = function t(e, r) {
                    var n = e.length;
                    e.length > r.length && (n = r.length);
                    for(var i = 0; i < n; i++)if (e.charCodeAt(i) != r.charCodeAt(i)) return i;
                    return e.length != r.length ? n : -1;
                }, e.KJUR = Sr;
                var xn = Sr.crypto;
                e.crypto = xn;
                var An = Sr.asn1;
                e.asn1 = An;
                var kn = Sr.jws;
                e.jws = kn;
                var Pn = Sr.lang;
                e.lang = Pn;
            }).call(this, r(28).Buffer);
        },
        function(t, e, r) {
            "use strict";
            (function(t) {
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */ var n = r(30), i = r(31), o = r(32);
                function s() {
                    return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                }
                function a(t, e) {
                    if (s() < e) throw new RangeError("Invalid typed array length");
                    return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t;
                }
                function u(t, e, r) {
                    if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, r);
                    if ("number" == typeof t) {
                        if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");
                        return l(this, t);
                    }
                    return c(this, t, e, r);
                }
                function c(t, e, r, n) {
                    if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
                    return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function i(t, e, r, n) {
                        if (e.byteLength, r < 0 || e.byteLength < r) throw new RangeError("'offset' is out of bounds");
                        if (e.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");
                        e = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n);
                        u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = f(t, e);
                        return t;
                    }(t, e, r, n) : "string" == typeof e ? function s(t, e, r) {
                        "string" == typeof r && "" !== r || (r = "utf8");
                        if (!u.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
                        var n = 0 | d(e, r), i = (t = a(t, n)).write(e, r);
                        i !== n && (t = t.slice(0, i));
                        return t;
                    }(t, e, r) : function c(t, e) {
                        if (u.isBuffer(e)) {
                            var r = 0 | g(e.length);
                            return 0 === (t = a(t, r)).length || e.copy(t, 0, 0, r), t;
                        }
                        if (e) {
                            if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || function n(t) {
                                return t != t;
                            }(e.length) ? a(t, 0) : f(t, e);
                            if ("Buffer" === e.type && o(e.data)) return f(t, e.data);
                        }
                        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                    }(t, e);
                }
                function h(t) {
                    if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
                    if (t < 0) throw new RangeError('"size" argument must not be negative');
                }
                function l(t, e) {
                    if (h(e), t = a(t, e < 0 ? 0 : 0 | g(e)), !u.TYPED_ARRAY_SUPPORT) for(var r = 0; r < e; ++r)t[r] = 0;
                    return t;
                }
                function f(t, e) {
                    var r = e.length < 0 ? 0 : 0 | g(e.length);
                    t = a(t, r);
                    for(var n = 0; n < r; n += 1)t[n] = 255 & e[n];
                    return t;
                }
                function g(t) {
                    if (t >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
                    return 0 | t;
                }
                function d(t, e) {
                    if (u.isBuffer(t)) return t.length;
                    if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
                    "string" != typeof t && (t = "" + t);
                    var r = t.length;
                    if (0 === r) return 0;
                    for(var n = !1;;)switch(e){
                        case "ascii":
                        case "latin1":
                        case "binary":
                            return r;
                        case "utf8":
                        case "utf-8":
                        case void 0:
                            return K(t).length;
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return 2 * r;
                        case "hex":
                            return r >>> 1;
                        case "base64":
                            return q(t).length;
                        default:
                            if (n) return K(t).length;
                            e = ("" + e).toLowerCase(), n = !0;
                    }
                }
                function p(t, e, r) {
                    var n = !1;
                    if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
                    if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
                    if ((r >>>= 0) <= (e >>>= 0)) return "";
                    for(t || (t = "utf8");;)switch(t){
                        case "hex":
                            return I(this, e, r);
                        case "utf8":
                        case "utf-8":
                            return A(this, e, r);
                        case "ascii":
                            return T(this, e, r);
                        case "latin1":
                        case "binary":
                            return R(this, e, r);
                        case "base64":
                            return x(this, e, r);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return D(this, e, r);
                        default:
                            if (n) throw new TypeError("Unknown encoding: " + t);
                            t = (t + "").toLowerCase(), n = !0;
                    }
                }
                function v(t, e, r) {
                    var n = t[e];
                    t[e] = t[r], t[r] = n;
                }
                function y(t, e, r, n, i) {
                    if (0 === t.length) return -1;
                    if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
                        if (i) return -1;
                        r = t.length - 1;
                    } else if (r < 0) {
                        if (!i) return -1;
                        r = 0;
                    }
                    if ("string" == typeof e && (e = u.from(e, n)), u.isBuffer(e)) return 0 === e.length ? -1 : m(t, e, r, n, i);
                    if ("number" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : m(t, [
                        e
                    ], r, n, i);
                    throw new TypeError("val must be string, number or Buffer");
                }
                function m(t, e, r, n, i) {
                    var o, s = 1, a = t.length, u = e.length;
                    if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                        if (t.length < 2 || e.length < 2) return -1;
                        s = 2, a /= 2, u /= 2, r /= 2;
                    }
                    function c(t, e) {
                        return 1 === s ? t[e] : t.readUInt16BE(e * s);
                    }
                    if (i) {
                        var h = -1;
                        for(o = r; o < a; o++)if (c(t, o) === c(e, -1 === h ? 0 : o - h)) {
                            if (-1 === h && (h = o), o - h + 1 === u) return h * s;
                        } else -1 !== h && (o -= o - h), h = -1;
                    } else for(r + u > a && (r = a - u), o = r; o >= 0; o--){
                        for(var l = !0, f = 0; f < u; f++)if (c(t, o + f) !== c(e, f)) {
                            l = !1;
                            break;
                        }
                        if (l) return o;
                    }
                    return -1;
                }
                function _(t, e, r, n) {
                    r = Number(r) || 0;
                    var i = t.length - r;
                    n ? (n = Number(n)) > i && (n = i) : n = i;
                    var o = e.length;
                    if (o % 2 != 0) throw new TypeError("Invalid hex string");
                    n > o / 2 && (n = o / 2);
                    for(var s = 0; s < n; ++s){
                        var a = parseInt(e.substr(2 * s, 2), 16);
                        if (isNaN(a)) return s;
                        t[r + s] = a;
                    }
                    return s;
                }
                function S(t, e, r, n) {
                    return J(K(e, t.length - r), t, r, n);
                }
                function b(t, e, r, n) {
                    return J(function i(t) {
                        for(var e = [], r = 0; r < t.length; ++r)e.push(255 & t.charCodeAt(r));
                        return e;
                    }(e), t, r, n);
                }
                function w(t, e, r, n) {
                    return b(t, e, r, n);
                }
                function F(t, e, r, n) {
                    return J(q(e), t, r, n);
                }
                function E(t, e, r, n) {
                    return J(function i(t, e) {
                        for(var r, n, i, o = [], s = 0; s < t.length && !((e -= 2) < 0); ++s)n = (r = t.charCodeAt(s)) >> 8, i = r % 256, o.push(i), o.push(n);
                        return o;
                    }(e, t.length - r), t, r, n);
                }
                function x(t, e, r) {
                    return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));
                }
                function A(t, e, r) {
                    r = Math.min(t.length, r);
                    for(var n = [], i = e; i < r;){
                        var o, s, a, u, c = t[i], h = null, l = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
                        if (i + l <= r) switch(l){
                            case 1:
                                c < 128 && (h = c);
                                break;
                            case 2:
                                128 == (192 & (o = t[i + 1])) && (u = (31 & c) << 6 | 63 & o) > 127 && (h = u);
                                break;
                            case 3:
                                o = t[i + 1], s = t[i + 2], 128 == (192 & o) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (h = u);
                                break;
                            case 4:
                                o = t[i + 1], s = t[i + 2], a = t[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (h = u);
                        }
                        null === h ? (h = 65533, l = 1) : h > 65535 && (h -= 65536, n.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), n.push(h), i += l;
                    }
                    return function f(t) {
                        var e = t.length;
                        if (e <= C) return String.fromCharCode.apply(String, t);
                        var r = "", n = 0;
                        for(; n < e;)r += String.fromCharCode.apply(String, t.slice(n, n += C));
                        return r;
                    }(n);
                }
                e.Buffer = u, e.SlowBuffer = function k(t) {
                    +t != t && (t = 0);
                    return u.alloc(+t);
                }, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function P() {
                    try {
                        var t = new Uint8Array(1);
                        return t.__proto__ = {
                            __proto__: Uint8Array.prototype,
                            foo: function() {
                                return 42;
                            }
                        }, 42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength;
                    } catch (t) {
                        return !1;
                    }
                }(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function(t) {
                    return t.__proto__ = u.prototype, t;
                }, u.from = function(t, e, r) {
                    return c(null, t, e, r);
                }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, {
                    value: null,
                    configurable: !0
                })), u.alloc = function(t, e, r) {
                    return function n(t, e, r, i) {
                        return h(e), e <= 0 ? a(t, e) : void 0 !== r ? "string" == typeof i ? a(t, e).fill(r, i) : a(t, e).fill(r) : a(t, e);
                    }(null, t, e, r);
                }, u.allocUnsafe = function(t) {
                    return l(null, t);
                }, u.allocUnsafeSlow = function(t) {
                    return l(null, t);
                }, u.isBuffer = function t(e) {
                    return !(null == e || !e._isBuffer);
                }, u.compare = function t(e, r) {
                    if (!u.isBuffer(e) || !u.isBuffer(r)) throw new TypeError("Arguments must be Buffers");
                    if (e === r) return 0;
                    for(var n = e.length, i = r.length, o = 0, s = Math.min(n, i); o < s; ++o)if (e[o] !== r[o]) {
                        n = e[o], i = r[o];
                        break;
                    }
                    return n < i ? -1 : i < n ? 1 : 0;
                }, u.isEncoding = function t(e) {
                    switch(String(e).toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "latin1":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return !0;
                        default:
                            return !1;
                    }
                }, u.concat = function t(e, r) {
                    if (!o(e)) throw new TypeError('"list" argument must be an Array of Buffers');
                    if (0 === e.length) return u.alloc(0);
                    var n;
                    if (void 0 === r) for(r = 0, n = 0; n < e.length; ++n)r += e[n].length;
                    var i = u.allocUnsafe(r), s = 0;
                    for(n = 0; n < e.length; ++n){
                        var a = e[n];
                        if (!u.isBuffer(a)) throw new TypeError('"list" argument must be an Array of Buffers');
                        a.copy(i, s), s += a.length;
                    }
                    return i;
                }, u.byteLength = d, u.prototype._isBuffer = !0, u.prototype.swap16 = function t() {
                    var e = this.length;
                    if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                    for(var r = 0; r < e; r += 2)v(this, r, r + 1);
                    return this;
                }, u.prototype.swap32 = function t() {
                    var e = this.length;
                    if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                    for(var r = 0; r < e; r += 4)v(this, r, r + 3), v(this, r + 1, r + 2);
                    return this;
                }, u.prototype.swap64 = function t() {
                    var e = this.length;
                    if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                    for(var r = 0; r < e; r += 8)v(this, r, r + 7), v(this, r + 1, r + 6), v(this, r + 2, r + 5), v(this, r + 3, r + 4);
                    return this;
                }, u.prototype.toString = function t() {
                    var e = 0 | this.length;
                    return 0 === e ? "" : 0 === arguments.length ? A(this, 0, e) : p.apply(this, arguments);
                }, u.prototype.equals = function t(e) {
                    if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                    return this === e || 0 === u.compare(this, e);
                }, u.prototype.inspect = function t() {
                    var r = "", n = e.INSPECT_MAX_BYTES;
                    return this.length > 0 && (r = this.toString("hex", 0, n).match(/.{2}/g).join(" "), this.length > n && (r += " ... ")), "<Buffer " + r + ">";
                }, u.prototype.compare = function t(e, r, n, i, o) {
                    if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                    if (void 0 === r && (r = 0), void 0 === n && (n = e ? e.length : 0), void 0 === i && (i = 0), void 0 === o && (o = this.length), r < 0 || n > e.length || i < 0 || o > this.length) throw new RangeError("out of range index");
                    if (i >= o && r >= n) return 0;
                    if (i >= o) return -1;
                    if (r >= n) return 1;
                    if (this === e) return 0;
                    for(var s = (o >>>= 0) - (i >>>= 0), a = (n >>>= 0) - (r >>>= 0), c = Math.min(s, a), h = this.slice(i, o), l = e.slice(r, n), f = 0; f < c; ++f)if (h[f] !== l[f]) {
                        s = h[f], a = l[f];
                        break;
                    }
                    return s < a ? -1 : a < s ? 1 : 0;
                }, u.prototype.includes = function t(e, r, n) {
                    return -1 !== this.indexOf(e, r, n);
                }, u.prototype.indexOf = function t(e, r, n) {
                    return y(this, e, r, n, !0);
                }, u.prototype.lastIndexOf = function t(e, r, n) {
                    return y(this, e, r, n, !1);
                }, u.prototype.write = function t(e, r, n, i) {
                    if (void 0 === r) i = "utf8", n = this.length, r = 0;
                    else if (void 0 === n && "string" == typeof r) i = r, n = this.length, r = 0;
                    else {
                        if (!isFinite(r)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                        r |= 0, isFinite(n) ? (n |= 0, void 0 === i && (i = "utf8")) : (i = n, n = void 0);
                    }
                    var o = this.length - r;
                    if ((void 0 === n || n > o) && (n = o), e.length > 0 && (n < 0 || r < 0) || r > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                    i || (i = "utf8");
                    for(var s = !1;;)switch(i){
                        case "hex":
                            return _(this, e, r, n);
                        case "utf8":
                        case "utf-8":
                            return S(this, e, r, n);
                        case "ascii":
                            return b(this, e, r, n);
                        case "latin1":
                        case "binary":
                            return w(this, e, r, n);
                        case "base64":
                            return F(this, e, r, n);
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return E(this, e, r, n);
                        default:
                            if (s) throw new TypeError("Unknown encoding: " + i);
                            i = ("" + i).toLowerCase(), s = !0;
                    }
                }, u.prototype.toJSON = function t() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                var C = 4096;
                function T(t, e, r) {
                    var n = "";
                    r = Math.min(t.length, r);
                    for(var i = e; i < r; ++i)n += String.fromCharCode(127 & t[i]);
                    return n;
                }
                function R(t, e, r) {
                    var n = "";
                    r = Math.min(t.length, r);
                    for(var i = e; i < r; ++i)n += String.fromCharCode(t[i]);
                    return n;
                }
                function I(t, e, r) {
                    var n = t.length;
                    (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
                    for(var i = "", o = e; o < r; ++o)i += V(t[o]);
                    return i;
                }
                function D(t, e, r) {
                    for(var n = t.slice(e, r), i = "", o = 0; o < n.length; o += 2)i += String.fromCharCode(n[o] + 256 * n[o + 1]);
                    return i;
                }
                function L(t, e, r) {
                    if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
                    if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
                }
                function N(t, e, r, n, i, o) {
                    if (!u.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
                    if (r + n > t.length) throw new RangeError("Index out of range");
                }
                function U(t, e, r, n) {
                    e < 0 && (e = 65535 + e + 1);
                    for(var i = 0, o = Math.min(t.length - r, 2); i < o; ++i)t[r + i] = (e & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
                }
                function B(t, e, r, n) {
                    e < 0 && (e = 4294967295 + e + 1);
                    for(var i = 0, o = Math.min(t.length - r, 4); i < o; ++i)t[r + i] = e >>> 8 * (n ? i : 3 - i) & 255;
                }
                function O(t, e, r, n, i, o) {
                    if (r + n > t.length) throw new RangeError("Index out of range");
                    if (r < 0) throw new RangeError("Index out of range");
                }
                function j(t, e, r, n, o) {
                    return o || O(t, 0, r, 4), i.write(t, e, r, n, 23, 4), r + 4;
                }
                function M(t, e, r, n, o) {
                    return o || O(t, 0, r, 8), i.write(t, e, r, n, 52, 8), r + 8;
                }
                u.prototype.slice = function t(e, r) {
                    var n, i = this.length;
                    if ((e = ~~e) < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i), (r = void 0 === r ? i : ~~r) < 0 ? (r += i) < 0 && (r = 0) : r > i && (r = i), r < e && (r = e), u.TYPED_ARRAY_SUPPORT) (n = this.subarray(e, r)).__proto__ = u.prototype;
                    else {
                        var o = r - e;
                        n = new u(o, void 0);
                        for(var s = 0; s < o; ++s)n[s] = this[s + e];
                    }
                    return n;
                }, u.prototype.readUIntLE = function t(e, r, n) {
                    e |= 0, r |= 0, n || L(e, r, this.length);
                    for(var i = this[e], o = 1, s = 0; ++s < r && (o *= 256);)i += this[e + s] * o;
                    return i;
                }, u.prototype.readUIntBE = function t(e, r, n) {
                    e |= 0, r |= 0, n || L(e, r, this.length);
                    for(var i = this[e + --r], o = 1; r > 0 && (o *= 256);)i += this[e + --r] * o;
                    return i;
                }, u.prototype.readUInt8 = function t(e, r) {
                    return r || L(e, 1, this.length), this[e];
                }, u.prototype.readUInt16LE = function t(e, r) {
                    return r || L(e, 2, this.length), this[e] | this[e + 1] << 8;
                }, u.prototype.readUInt16BE = function t(e, r) {
                    return r || L(e, 2, this.length), this[e] << 8 | this[e + 1];
                }, u.prototype.readUInt32LE = function t(e, r) {
                    return r || L(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
                }, u.prototype.readUInt32BE = function t(e, r) {
                    return r || L(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
                }, u.prototype.readIntLE = function t(e, r, n) {
                    e |= 0, r |= 0, n || L(e, r, this.length);
                    for(var i = this[e], o = 1, s = 0; ++s < r && (o *= 256);)i += this[e + s] * o;
                    return i >= (o *= 128) && (i -= Math.pow(2, 8 * r)), i;
                }, u.prototype.readIntBE = function t(e, r, n) {
                    e |= 0, r |= 0, n || L(e, r, this.length);
                    for(var i = r, o = 1, s = this[e + --i]; i > 0 && (o *= 256);)s += this[e + --i] * o;
                    return s >= (o *= 128) && (s -= Math.pow(2, 8 * r)), s;
                }, u.prototype.readInt8 = function t(e, r) {
                    return r || L(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
                }, u.prototype.readInt16LE = function t(e, r) {
                    r || L(e, 2, this.length);
                    var n = this[e] | this[e + 1] << 8;
                    return 32768 & n ? 4294901760 | n : n;
                }, u.prototype.readInt16BE = function t(e, r) {
                    r || L(e, 2, this.length);
                    var n = this[e + 1] | this[e] << 8;
                    return 32768 & n ? 4294901760 | n : n;
                }, u.prototype.readInt32LE = function t(e, r) {
                    return r || L(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
                }, u.prototype.readInt32BE = function t(e, r) {
                    return r || L(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
                }, u.prototype.readFloatLE = function t(e, r) {
                    return r || L(e, 4, this.length), i.read(this, e, !0, 23, 4);
                }, u.prototype.readFloatBE = function t(e, r) {
                    return r || L(e, 4, this.length), i.read(this, e, !1, 23, 4);
                }, u.prototype.readDoubleLE = function t(e, r) {
                    return r || L(e, 8, this.length), i.read(this, e, !0, 52, 8);
                }, u.prototype.readDoubleBE = function t(e, r) {
                    return r || L(e, 8, this.length), i.read(this, e, !1, 52, 8);
                }, u.prototype.writeUIntLE = function t(e, r, n, i) {
                    (e = +e, r |= 0, n |= 0, i) || N(this, e, r, n, Math.pow(2, 8 * n) - 1, 0);
                    var o = 1, s = 0;
                    for(this[r] = 255 & e; ++s < n && (o *= 256);)this[r + s] = e / o & 255;
                    return r + n;
                }, u.prototype.writeUIntBE = function t(e, r, n, i) {
                    (e = +e, r |= 0, n |= 0, i) || N(this, e, r, n, Math.pow(2, 8 * n) - 1, 0);
                    var o = n - 1, s = 1;
                    for(this[r + o] = 255 & e; --o >= 0 && (s *= 256);)this[r + o] = e / s & 255;
                    return r + n;
                }, u.prototype.writeUInt8 = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[r] = 255 & e, r + 1;
                }, u.prototype.writeUInt16LE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8) : U(this, e, r, !0), r + 2;
                }, u.prototype.writeUInt16BE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = 255 & e) : U(this, e, r, !1), r + 2;
                }, u.prototype.writeUInt32LE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = 255 & e) : B(this, e, r, !0), r + 4;
                }, u.prototype.writeUInt32BE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = 255 & e) : B(this, e, r, !1), r + 4;
                }, u.prototype.writeIntLE = function t(e, r, n, i) {
                    if (e = +e, r |= 0, !i) {
                        var o = Math.pow(2, 8 * n - 1);
                        N(this, e, r, n, o - 1, -o);
                    }
                    var s = 0, a = 1, u = 0;
                    for(this[r] = 255 & e; ++s < n && (a *= 256);)e < 0 && 0 === u && 0 !== this[r + s - 1] && (u = 1), this[r + s] = (e / a >> 0) - u & 255;
                    return r + n;
                }, u.prototype.writeIntBE = function t(e, r, n, i) {
                    if (e = +e, r |= 0, !i) {
                        var o = Math.pow(2, 8 * n - 1);
                        N(this, e, r, n, o - 1, -o);
                    }
                    var s = n - 1, a = 1, u = 0;
                    for(this[r + s] = 255 & e; --s >= 0 && (a *= 256);)e < 0 && 0 === u && 0 !== this[r + s + 1] && (u = 1), this[r + s] = (e / a >> 0) - u & 255;
                    return r + n;
                }, u.prototype.writeInt8 = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[r] = 255 & e, r + 1;
                }, u.prototype.writeInt16LE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8) : U(this, e, r, !0), r + 2;
                }, u.prototype.writeInt16BE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = 255 & e) : U(this, e, r, !1), r + 2;
                }, u.prototype.writeInt32LE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[r] = 255 & e, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24) : B(this, e, r, !0), r + 4;
                }, u.prototype.writeInt32BE = function t(e, r, n) {
                    return e = +e, r |= 0, n || N(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), u.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = 255 & e) : B(this, e, r, !1), r + 4;
                }, u.prototype.writeFloatLE = function t(e, r, n) {
                    return j(this, e, r, !0, n);
                }, u.prototype.writeFloatBE = function t(e, r, n) {
                    return j(this, e, r, !1, n);
                }, u.prototype.writeDoubleLE = function t(e, r, n) {
                    return M(this, e, r, !0, n);
                }, u.prototype.writeDoubleBE = function t(e, r, n) {
                    return M(this, e, r, !1, n);
                }, u.prototype.copy = function t(e, r, n, i) {
                    if (n || (n = 0), i || 0 === i || (i = this.length), r >= e.length && (r = e.length), r || (r = 0), i > 0 && i < n && (i = n), i === n) return 0;
                    if (0 === e.length || 0 === this.length) return 0;
                    if (r < 0) throw new RangeError("targetStart out of bounds");
                    if (n < 0 || n >= this.length) throw new RangeError("sourceStart out of bounds");
                    if (i < 0) throw new RangeError("sourceEnd out of bounds");
                    i > this.length && (i = this.length), e.length - r < i - n && (i = e.length - r + n);
                    var o, s = i - n;
                    if (this === e && n < r && r < i) for(o = s - 1; o >= 0; --o)e[o + r] = this[o + n];
                    else if (s < 1e3 || !u.TYPED_ARRAY_SUPPORT) for(o = 0; o < s; ++o)e[o + r] = this[o + n];
                    else Uint8Array.prototype.set.call(e, this.subarray(n, n + s), r);
                    return s;
                }, u.prototype.fill = function t(e, r, n, i) {
                    if ("string" == typeof e) {
                        if ("string" == typeof r ? (i = r, r = 0, n = this.length) : "string" == typeof n && (i = n, n = this.length), 1 === e.length) {
                            var o = e.charCodeAt(0);
                            o < 256 && (e = o);
                        }
                        if (void 0 !== i && "string" != typeof i) throw new TypeError("encoding must be a string");
                        if ("string" == typeof i && !u.isEncoding(i)) throw new TypeError("Unknown encoding: " + i);
                    } else "number" == typeof e && (e &= 255);
                    if (r < 0 || this.length < r || this.length < n) throw new RangeError("Out of range index");
                    if (n <= r) return this;
                    var s;
                    if (r >>>= 0, n = void 0 === n ? this.length : n >>> 0, e || (e = 0), "number" == typeof e) for(s = r; s < n; ++s)this[s] = e;
                    else {
                        var a = u.isBuffer(e) ? e : K(new u(e, i).toString()), c = a.length;
                        for(s = 0; s < n - r; ++s)this[s + r] = a[s % c];
                    }
                    return this;
                };
                var H = /[^+\/0-9A-Za-z-_]/g;
                function V(t) {
                    return t < 16 ? "0" + t.toString(16) : t.toString(16);
                }
                function K(t, e) {
                    var r;
                    e = e || 1 / 0;
                    for(var n = t.length, i = null, o = [], s = 0; s < n; ++s){
                        if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {
                            if (!i) {
                                if (r > 56319) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                if (s + 1 === n) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                i = r;
                                continue;
                            }
                            if (r < 56320) {
                                (e -= 3) > -1 && o.push(239, 191, 189), i = r;
                                continue;
                            }
                            r = 65536 + (i - 55296 << 10 | r - 56320);
                        } else i && (e -= 3) > -1 && o.push(239, 191, 189);
                        if (i = null, r < 128) {
                            if ((e -= 1) < 0) break;
                            o.push(r);
                        } else if (r < 2048) {
                            if ((e -= 2) < 0) break;
                            o.push(r >> 6 | 192, 63 & r | 128);
                        } else if (r < 65536) {
                            if ((e -= 3) < 0) break;
                            o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
                        } else {
                            if (!(r < 1114112)) throw new Error("Invalid code point");
                            if ((e -= 4) < 0) break;
                            o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
                        }
                    }
                    return o;
                }
                function q(t) {
                    return n.toByteArray(function e(t) {
                        if ((t = (function e(t) {
                            return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
                        })(t).replace(H, "")).length < 2) return "";
                        for(; t.length % 4 != 0;)t += "=";
                        return t;
                    }(t));
                }
                function J(t, e, r, n) {
                    for(var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i)e[i + r] = t[i];
                    return i;
                }
            }).call(this, r(29));
        },
        function(t, e) {
            var r;
            r = function() {
                return this;
            }();
            try {
                r = r || new Function("return this")();
            } catch (t) {
                "object" == typeof window && (r = window);
            }
            t.exports = r;
        },
        function(t, e, r) {
            "use strict";
            e.byteLength = function n(t) {
                var e = f(t), r = e[0], n = e[1];
                return 3 * (r + n) / 4 - n;
            }, e.toByteArray = function i(t) {
                var e, r, n = f(t), i = n[0], o = n[1], s = new u(function c(t, e, r) {
                    return 3 * (e + r) / 4 - r;
                }(0, i, o)), h = 0, l = o > 0 ? i - 4 : i;
                for(r = 0; r < l; r += 4)e = a[t.charCodeAt(r)] << 18 | a[t.charCodeAt(r + 1)] << 12 | a[t.charCodeAt(r + 2)] << 6 | a[t.charCodeAt(r + 3)], s[h++] = e >> 16 & 255, s[h++] = e >> 8 & 255, s[h++] = 255 & e;
                2 === o && (e = a[t.charCodeAt(r)] << 2 | a[t.charCodeAt(r + 1)] >> 4, s[h++] = 255 & e);
                1 === o && (e = a[t.charCodeAt(r)] << 10 | a[t.charCodeAt(r + 1)] << 4 | a[t.charCodeAt(r + 2)] >> 2, s[h++] = e >> 8 & 255, s[h++] = 255 & e);
                return s;
            }, e.fromByteArray = function o(t) {
                for(var e, r = t.length, n = r % 3, i = [], o = 16383, a = 0, u = r - n; a < u; a += o)i.push(g(t, a, a + o > u ? u : a + o));
                1 === n ? (e = t[r - 1], i.push(s[e >> 2] + s[e << 4 & 63] + "==")) : 2 === n && (e = (t[r - 2] << 8) + t[r - 1], i.push(s[e >> 10] + s[e >> 4 & 63] + s[e << 2 & 63] + "="));
                return i.join("");
            };
            for(var s = [], a = [], u = "undefined" != typeof Uint8Array ? Uint8Array : Array, c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", h = 0, l = c.length; h < l; ++h)s[h] = c[h], a[c.charCodeAt(h)] = h;
            function f(t) {
                var e = t.length;
                if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                var r = t.indexOf("=");
                return -1 === r && (r = e), [
                    r,
                    r === e ? 0 : 4 - r % 4
                ];
            }
            function g(t, e, r) {
                for(var n, i, o = [], a = e; a < r; a += 3)n = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), o.push(s[(i = n) >> 18 & 63] + s[i >> 12 & 63] + s[i >> 6 & 63] + s[63 & i]);
                return o.join("");
            }
            a["-".charCodeAt(0)] = 62, a["_".charCodeAt(0)] = 63;
        },
        function(t, e) {
            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ e.read = function(t, e, r, n, i) {
                var o, s, a = 8 * i - n - 1, u = (1 << a) - 1, c = u >> 1, h = -7, l = r ? i - 1 : 0, f = r ? -1 : 1, g = t[e + l];
                for(l += f, o = g & (1 << -h) - 1, g >>= -h, h += a; h > 0; o = 256 * o + t[e + l], l += f, h -= 8);
                for(s = o & (1 << -h) - 1, o >>= -h, h += n; h > 0; s = 256 * s + t[e + l], l += f, h -= 8);
                if (0 === o) o = 1 - c;
                else {
                    if (o === u) return s ? NaN : 1 / 0 * (g ? -1 : 1);
                    s += Math.pow(2, n), o -= c;
                }
                return (g ? -1 : 1) * s * Math.pow(2, o - n);
            }, e.write = function(t, e, r, n, i, o) {
                var s, a, u, c = 8 * o - i - 1, h = (1 << c) - 1, l = h >> 1, f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, g = n ? 0 : o - 1, d = n ? 1 : -1, p = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
                for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = h) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + l >= 1 ? f / u : f * Math.pow(2, 1 - l)) * u >= 2 && (s++, u /= 2), s + l >= h ? (a = 0, s = h) : s + l >= 1 ? (a = (e * u - 1) * Math.pow(2, i), s += l) : (a = e * Math.pow(2, l - 1) * Math.pow(2, i), s = 0)); i >= 8; t[r + g] = 255 & a, g += d, a /= 256, i -= 8);
                for(s = s << i | a, c += i; c > 0; t[r + g] = 255 & s, g += d, s /= 256, c -= 8);
                t[r + g - d] |= 128 * p;
            };
        },
        function(t, e) {
            var r = {}.toString;
            t.exports = Array.isArray || function(t) {
                return "[object Array]" == r.call(t);
            };
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = function n(t) {
                var e = t.jws, r = t.KeyUtil, n = t.X509, o = t.crypto, s = t.hextob64u, a = t.b64tohex, u = t.AllowedSigningAlgs;
                return function() {
                    function t() {
                        !function e(t, r) {
                            if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                        }(this, t);
                    }
                    return t.parseJwt = function t(r) {
                        i.Log.debug("JoseUtil.parseJwt");
                        try {
                            var n = e.JWS.parse(r);
                            return {
                                header: n.headerObj,
                                payload: n.payloadObj
                            };
                        } catch (t) {
                            i.Log.error(t);
                        }
                    }, t.validateJwt = function e(o, s, u, c, h, l, f) {
                        i.Log.debug("JoseUtil.validateJwt");
                        try {
                            if ("RSA" === s.kty) {
                                if (s.e && s.n) s = r.getKey(s);
                                else {
                                    if (!s.x5c || !s.x5c.length) return i.Log.error("JoseUtil.validateJwt: RSA key missing key material", s), Promise.reject(new Error("RSA key missing key material"));
                                    var g = a(s.x5c[0]);
                                    s = n.getPublicKeyFromCertHex(g);
                                }
                            } else {
                                if ("EC" !== s.kty) return i.Log.error("JoseUtil.validateJwt: Unsupported key type", s && s.kty), Promise.reject(new Error(s.kty));
                                if (!(s.crv && s.x && s.y)) return i.Log.error("JoseUtil.validateJwt: EC key missing key material", s), Promise.reject(new Error("EC key missing key material"));
                                s = r.getKey(s);
                            }
                            return t._validateJwt(o, s, u, c, h, l, f);
                        } catch (t) {
                            return i.Log.error(t && t.message || t), Promise.reject("JWT validation failed");
                        }
                    }, t.validateJwtAttributes = function e(r, n, o, s, a, u) {
                        s || (s = 0), a || (a = parseInt(Date.now() / 1e3));
                        var c = t.parseJwt(r).payload;
                        if (!c.iss) return i.Log.error("JoseUtil._validateJwt: issuer was not provided"), Promise.reject(new Error("issuer was not provided"));
                        if (c.iss !== n) return i.Log.error("JoseUtil._validateJwt: Invalid issuer in token", c.iss), Promise.reject(new Error("Invalid issuer in token: " + c.iss));
                        if (!c.aud) return i.Log.error("JoseUtil._validateJwt: aud was not provided"), Promise.reject(new Error("aud was not provided"));
                        if (!(c.aud === o || Array.isArray(c.aud) && c.aud.indexOf(o) >= 0)) return i.Log.error("JoseUtil._validateJwt: Invalid audience in token", c.aud), Promise.reject(new Error("Invalid audience in token: " + c.aud));
                        if (c.azp && c.azp !== o) return i.Log.error("JoseUtil._validateJwt: Invalid azp in token", c.azp), Promise.reject(new Error("Invalid azp in token: " + c.azp));
                        if (!u) {
                            var h = a + s, l = a - s;
                            if (!c.iat) return i.Log.error("JoseUtil._validateJwt: iat was not provided"), Promise.reject(new Error("iat was not provided"));
                            if (h < c.iat) return i.Log.error("JoseUtil._validateJwt: iat is in the future", c.iat), Promise.reject(new Error("iat is in the future: " + c.iat));
                            if (c.nbf && h < c.nbf) return i.Log.error("JoseUtil._validateJwt: nbf is in the future", c.nbf), Promise.reject(new Error("nbf is in the future: " + c.nbf));
                            if (!c.exp) return i.Log.error("JoseUtil._validateJwt: exp was not provided"), Promise.reject(new Error("exp was not provided"));
                            if (c.exp < l) return i.Log.error("JoseUtil._validateJwt: exp is in the past", c.exp), Promise.reject(new Error("exp is in the past:" + c.exp));
                        }
                        return Promise.resolve(c);
                    }, t._validateJwt = function r(n, o, s, a, c, h, l) {
                        return t.validateJwtAttributes(n, s, a, c, h, l).then(function(t) {
                            try {
                                return e.JWS.verify(n, o, u) ? t : (i.Log.error("JoseUtil._validateJwt: signature validation failed"), Promise.reject(new Error("signature validation failed")));
                            } catch (t) {
                                return i.Log.error(t && t.message || t), Promise.reject(new Error("signature validation failed"));
                            }
                        });
                    }, t.hashString = function t(e, r) {
                        try {
                            return o.Util.hashString(e, r);
                        } catch (t) {
                            i.Log.error(t);
                        }
                    }, t.hexToBase64Url = function t(e) {
                        try {
                            return s(e);
                        } catch (t) {
                            i.Log.error(t);
                        }
                    }, t;
                }();
            };
            var i = r(0);
            t.exports = e.default;
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SigninResponse = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(3);
            function o(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            e.SigninResponse = function() {
                function t(e) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#";
                    o(this, t);
                    var n = i.UrlUtility.parseUrlFragment(e, r);
                    this.error = n.error, this.error_description = n.error_description, this.error_uri = n.error_uri, this.code = n.code, this.state = n.state, this.id_token = n.id_token, this.session_state = n.session_state, this.access_token = n.access_token, this.token_type = n.token_type, this.scope = n.scope, this.profile = void 0, this.expires_in = n.expires_in;
                }
                return n(t, [
                    {
                        key: "expires_in",
                        get: function t() {
                            if (this.expires_at) {
                                var e = parseInt(Date.now() / 1e3);
                                return this.expires_at - e;
                            }
                        },
                        set: function t(e) {
                            var r = parseInt(e);
                            if ("number" == typeof r && r > 0) {
                                var n = parseInt(Date.now() / 1e3);
                                this.expires_at = n + r;
                            }
                        }
                    },
                    {
                        key: "expired",
                        get: function t() {
                            var e = this.expires_in;
                            if (void 0 !== e) return e <= 0;
                        }
                    },
                    {
                        key: "scopes",
                        get: function t() {
                            return (this.scope || "").split(" ");
                        }
                    },
                    {
                        key: "isOpenIdConnect",
                        get: function t() {
                            return this.scopes.indexOf("openid") >= 0 || !!this.id_token;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SignoutRequest = void 0;
            var n = r(0), i = r(3), o = r(9);
            e.SignoutRequest = function t(e) {
                var r = e.url, s = e.id_token_hint, a = e.post_logout_redirect_uri, u = e.data, c = e.extraQueryParams, h = e.request_type;
                if (function l(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t), !r) throw n.Log.error("SignoutRequest.ctor: No url passed"), new Error("url");
                for(var f in s && (r = i.UrlUtility.addQueryParam(r, "id_token_hint", s)), a && (r = i.UrlUtility.addQueryParam(r, "post_logout_redirect_uri", a), u && (this.state = new o.State({
                    data: u,
                    request_type: h
                }), r = i.UrlUtility.addQueryParam(r, "state", this.state.id))), c)r = i.UrlUtility.addQueryParam(r, f, c[f]);
                this.url = r;
            };
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SignoutResponse = void 0;
            var n = r(3);
            e.SignoutResponse = function t(e) {
                !function r(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }(this, t);
                var i = n.UrlUtility.parseUrlFragment(e, "?");
                this.error = i.error, this.error_description = i.error_description, this.error_uri = i.error_uri, this.state = i.state;
            };
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.InMemoryWebStorage = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0);
            e.InMemoryWebStorage = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._data = {};
                }
                return t.prototype.getItem = function t(e) {
                    return i.Log.debug("InMemoryWebStorage.getItem", e), this._data[e];
                }, t.prototype.setItem = function t(e, r) {
                    i.Log.debug("InMemoryWebStorage.setItem", e), this._data[e] = r;
                }, t.prototype.removeItem = function t(e) {
                    i.Log.debug("InMemoryWebStorage.removeItem", e), delete this._data[e];
                }, t.prototype.key = function t(e) {
                    return Object.getOwnPropertyNames(this._data)[e];
                }, n(t, [
                    {
                        key: "length",
                        get: function t() {
                            return Object.getOwnPropertyNames(this._data).length;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.UserManager = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(10), s = r(39), a = r(15), u = r(45), c = r(47), h = r(18), l = r(8), f = r(20), g = r(11), d = r(4);
            function p(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            function v(t, e) {
                if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" != typeof e && "function" != typeof e ? t : e;
            }
            e.UserManager = function(t) {
                function e() {
                    var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : c.SilentRenewService, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : h.SessionMonitor, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : f.TokenRevocationClient, l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : g.TokenClient, y = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : d.JoseUtil;
                    p(this, e), r instanceof s.UserManagerSettings || (r = new s.UserManagerSettings(r));
                    var m = v(this, t.call(this, r));
                    return m._events = new u.UserManagerEvents(r), m._silentRenewService = new n(m), m.settings.automaticSilentRenew && (i.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew"), m.startSilentRenew()), m.settings.monitorSession && (i.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor"), m._sessionMonitor = new o(m)), m._tokenRevocationClient = new a(m._settings), m._tokenClient = new l(m._settings), m._joseUtil = y, m;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), e.prototype.getUser = function t() {
                    var e = this;
                    return this._loadUser().then(function(t) {
                        return t ? (i.Log.info("UserManager.getUser: user loaded"), e._events.load(t, !1), t) : (i.Log.info("UserManager.getUser: user not found in storage"), null);
                    });
                }, e.prototype.removeUser = function t() {
                    var e = this;
                    return this.storeUser(null).then(function() {
                        i.Log.info("UserManager.removeUser: user removed from storage"), e._events.unload();
                    });
                }, e.prototype.signinRedirect = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (e = Object.assign({}, e)).request_type = "si:r";
                    var r = {
                        useReplaceToNavigate: e.useReplaceToNavigate
                    };
                    return this._signinStart(e, this._redirectNavigator, r).then(function() {
                        i.Log.info("UserManager.signinRedirect: successful");
                    });
                }, e.prototype.signinRedirectCallback = function t(e) {
                    return this._signinEnd(e || this._redirectNavigator.url).then(function(t) {
                        return t.profile && t.profile.sub ? i.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinRedirectCallback: no sub"), t;
                    });
                }, e.prototype.signinPopup = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (e = Object.assign({}, e)).request_type = "si:p";
                    var r = e.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
                    return r ? (e.redirect_uri = r, e.display = "popup", this._signin(e, this._popupNavigator, {
                        startUrl: r,
                        popupWindowFeatures: e.popupWindowFeatures || this.settings.popupWindowFeatures,
                        popupWindowTarget: e.popupWindowTarget || this.settings.popupWindowTarget
                    }).then(function(t) {
                        return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinPopup: no sub")), t;
                    })) : (i.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured"), Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured")));
                }, e.prototype.signinPopupCallback = function t(e) {
                    return this._signinCallback(e, this._popupNavigator).then(function(t) {
                        return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinPopupCallback: no sub")), t;
                    }).catch(function(t) {
                        i.Log.error(t.message);
                    });
                }, e.prototype.signinSilent = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return r = Object.assign({}, r), this._loadUser().then(function(t) {
                        return t && t.refresh_token ? (r.refresh_token = t.refresh_token, e._useRefreshToken(r)) : (r.request_type = "si:s", r.id_token_hint = r.id_token_hint || e.settings.includeIdTokenInSilentRenew && t && t.id_token, t && e._settings.validateSubOnSilentRenew && (i.Log.debug("UserManager.signinSilent, subject prior to silent renew: ", t.profile.sub), r.current_sub = t.profile.sub), e._signinSilentIframe(r));
                    });
                }, e.prototype._useRefreshToken = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return this._tokenClient.exchangeRefreshToken(r).then(function(t) {
                        return t ? t.access_token ? e._loadUser().then(function(r) {
                            if (r) {
                                var n = Promise.resolve();
                                return t.id_token && (n = e._validateIdTokenFromTokenRefreshToken(r.profile, t.id_token)), n.then(function() {
                                    return i.Log.debug("UserManager._useRefreshToken: refresh token response success"), r.id_token = t.id_token || r.id_token, r.access_token = t.access_token, r.refresh_token = t.refresh_token || r.refresh_token, r.expires_in = t.expires_in, e.storeUser(r).then(function() {
                                        return e._events.load(r), r;
                                    });
                                });
                            }
                            return null;
                        }) : (i.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint"), Promise.reject("No access token returned from token endpoint")) : (i.Log.error("UserManager._useRefreshToken: No response returned from token endpoint"), Promise.reject("No response returned from token endpoint"));
                    });
                }, e.prototype._validateIdTokenFromTokenRefreshToken = function t(e, r) {
                    var n = this;
                    return this._metadataService.getIssuer().then(function(t) {
                        return n.settings.getEpochTime().then(function(o) {
                            return n._joseUtil.validateJwtAttributes(r, t, n._settings.client_id, n._settings.clockSkew, o).then(function(t) {
                                return t ? t.sub !== e.sub ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub"), Promise.reject(new Error("sub in id_token does not match current sub"))) : t.auth_time && t.auth_time !== e.auth_time ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time"), Promise.reject(new Error("auth_time in id_token does not match original auth_time"))) : t.azp && t.azp !== e.azp ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp"), Promise.reject(new Error("azp in id_token does not match original azp"))) : !t.azp && e.azp ? (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token"), Promise.reject(new Error("azp not in id_token, but present in original id_token"))) : void 0 : (i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token"), Promise.reject(new Error("Failed to validate id_token")));
                            });
                        });
                    });
                }, e.prototype._signinSilentIframe = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = e.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
                    return r ? (e.redirect_uri = r, e.prompt = e.prompt || "none", this._signin(e, this._iframeNavigator, {
                        startUrl: r,
                        silentRequestTimeout: e.silentRequestTimeout || this.settings.silentRequestTimeout
                    }).then(function(t) {
                        return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinSilent: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinSilent: no sub")), t;
                    })) : (i.Log.error("UserManager.signinSilent: No silent_redirect_uri configured"), Promise.reject(new Error("No silent_redirect_uri configured")));
                }, e.prototype.signinSilentCallback = function t(e) {
                    return this._signinCallback(e, this._iframeNavigator).then(function(t) {
                        return t && (t.profile && t.profile.sub ? i.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", t.profile.sub) : i.Log.info("UserManager.signinSilentCallback: no sub")), t;
                    });
                }, e.prototype.signinCallback = function t(e) {
                    var r = this;
                    return this.readSigninResponseState(e).then(function(t) {
                        var n = t.state;
                        t.response;
                        return "si:r" === n.request_type ? r.signinRedirectCallback(e) : "si:p" === n.request_type ? r.signinPopupCallback(e) : "si:s" === n.request_type ? r.signinSilentCallback(e) : Promise.reject(new Error("invalid response_type in state"));
                    });
                }, e.prototype.signoutCallback = function t(e, r) {
                    var n = this;
                    return this.readSignoutResponseState(e).then(function(t) {
                        var i = t.state, o = t.response;
                        return i ? "so:r" === i.request_type ? n.signoutRedirectCallback(e) : "so:p" === i.request_type ? n.signoutPopupCallback(e, r) : Promise.reject(new Error("invalid response_type in state")) : o;
                    });
                }, e.prototype.querySessionStatus = function t() {
                    var e = this, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (r = Object.assign({}, r)).request_type = "si:s";
                    var n = r.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
                    return n ? (r.redirect_uri = n, r.prompt = "none", r.response_type = r.response_type || this.settings.query_status_response_type, r.scope = r.scope || "openid", r.skipUserInfo = !0, this._signinStart(r, this._iframeNavigator, {
                        startUrl: n,
                        silentRequestTimeout: r.silentRequestTimeout || this.settings.silentRequestTimeout
                    }).then(function(t) {
                        return e.processSigninResponse(t.url).then(function(t) {
                            if (i.Log.debug("UserManager.querySessionStatus: got signin response"), t.session_state && t.profile.sub) return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", t.profile.sub), {
                                session_state: t.session_state,
                                sub: t.profile.sub,
                                sid: t.profile.sid
                            };
                            i.Log.info("querySessionStatus successful, user not authenticated");
                        }).catch(function(t) {
                            if (t.session_state && e.settings.monitorAnonymousSession && ("login_required" == t.message || "consent_required" == t.message || "interaction_required" == t.message || "account_selection_required" == t.message)) return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user"), {
                                session_state: t.session_state
                            };
                            throw t;
                        });
                    })) : (i.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured"), Promise.reject(new Error("No silent_redirect_uri configured")));
                }, e.prototype._signin = function t(e, r) {
                    var n = this, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return this._signinStart(e, r, i).then(function(t) {
                        return n._signinEnd(t.url, e);
                    });
                }, e.prototype._signinStart = function t(e, r) {
                    var n = this, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return r.prepare(o).then(function(t) {
                        return i.Log.debug("UserManager._signinStart: got navigator window handle"), n.createSigninRequest(e).then(function(e) {
                            return i.Log.debug("UserManager._signinStart: got signin request"), o.url = e.url, o.id = e.state.id, t.navigate(o);
                        }).catch(function(e) {
                            throw t.close && (i.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window"), t.close()), e;
                        });
                    });
                }, e.prototype._signinEnd = function t(e) {
                    var r = this, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    return this.processSigninResponse(e).then(function(t) {
                        i.Log.debug("UserManager._signinEnd: got signin response");
                        var e = new a.User(t);
                        if (n.current_sub) {
                            if (n.current_sub !== e.profile.sub) return i.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ", e.profile.sub), Promise.reject(new Error("login_required"));
                            i.Log.debug("UserManager._signinEnd: current user matches user returned from signin");
                        }
                        return r.storeUser(e).then(function() {
                            return i.Log.debug("UserManager._signinEnd: user stored"), r._events.load(e), e;
                        });
                    });
                }, e.prototype._signinCallback = function t(e, r) {
                    i.Log.debug("UserManager._signinCallback");
                    var n = "query" === this._settings.response_mode || !this._settings.response_mode && l.SigninRequest.isCode(this._settings.response_type) ? "?" : "#";
                    return r.callback(e, void 0, n);
                }, e.prototype.signoutRedirect = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (e = Object.assign({}, e)).request_type = "so:r";
                    var r = e.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
                    r && (e.post_logout_redirect_uri = r);
                    var n = {
                        useReplaceToNavigate: e.useReplaceToNavigate
                    };
                    return this._signoutStart(e, this._redirectNavigator, n).then(function() {
                        i.Log.info("UserManager.signoutRedirect: successful");
                    });
                }, e.prototype.signoutRedirectCallback = function t(e) {
                    return this._signoutEnd(e || this._redirectNavigator.url).then(function(t) {
                        return i.Log.info("UserManager.signoutRedirectCallback: successful"), t;
                    });
                }, e.prototype.signoutPopup = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    (e = Object.assign({}, e)).request_type = "so:p";
                    var r = e.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
                    return e.post_logout_redirect_uri = r, e.display = "popup", e.post_logout_redirect_uri && (e.state = e.state || {}), this._signout(e, this._popupNavigator, {
                        startUrl: r,
                        popupWindowFeatures: e.popupWindowFeatures || this.settings.popupWindowFeatures,
                        popupWindowTarget: e.popupWindowTarget || this.settings.popupWindowTarget
                    }).then(function() {
                        i.Log.info("UserManager.signoutPopup: successful");
                    });
                }, e.prototype.signoutPopupCallback = function t(e, r) {
                    void 0 === r && "boolean" == typeof e && (r = e, e = null);
                    return this._popupNavigator.callback(e, r, "?").then(function() {
                        i.Log.info("UserManager.signoutPopupCallback: successful");
                    });
                }, e.prototype._signout = function t(e, r) {
                    var n = this, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return this._signoutStart(e, r, i).then(function(t) {
                        return n._signoutEnd(t.url);
                    });
                }, e.prototype._signoutStart = function t() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = this, n = arguments[1], o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return n.prepare(o).then(function(t) {
                        return i.Log.debug("UserManager._signoutStart: got navigator window handle"), r._loadUser().then(function(n) {
                            return i.Log.debug("UserManager._signoutStart: loaded current user from storage"), (r._settings.revokeAccessTokenOnSignout ? r._revokeInternal(n) : Promise.resolve()).then(function() {
                                var s = e.id_token_hint || n && n.id_token;
                                return s && (i.Log.debug("UserManager._signoutStart: Setting id_token into signout request"), e.id_token_hint = s), r.removeUser().then(function() {
                                    return i.Log.debug("UserManager._signoutStart: user removed, creating signout request"), r.createSignoutRequest(e).then(function(e) {
                                        return i.Log.debug("UserManager._signoutStart: got signout request"), o.url = e.url, e.state && (o.id = e.state.id), t.navigate(o);
                                    });
                                });
                            });
                        }).catch(function(e) {
                            throw t.close && (i.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window"), t.close()), e;
                        });
                    });
                }, e.prototype._signoutEnd = function t(e) {
                    return this.processSignoutResponse(e).then(function(t) {
                        return i.Log.debug("UserManager._signoutEnd: got signout response"), t;
                    });
                }, e.prototype.revokeAccessToken = function t() {
                    var e = this;
                    return this._loadUser().then(function(t) {
                        return e._revokeInternal(t, !0).then(function(r) {
                            if (r) return i.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing"), t.access_token = null, t.refresh_token = null, t.expires_at = null, t.token_type = null, e.storeUser(t).then(function() {
                                i.Log.debug("UserManager.revokeAccessToken: user stored"), e._events.load(t);
                            });
                        });
                    }).then(function() {
                        i.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
                    });
                }, e.prototype._revokeInternal = function t(e, r) {
                    var n = this;
                    if (e) {
                        var o = e.access_token, s = e.refresh_token;
                        return this._revokeAccessTokenInternal(o, r).then(function(t) {
                            return n._revokeRefreshTokenInternal(s, r).then(function(e) {
                                return t || e || i.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format"), t || e;
                            });
                        });
                    }
                    return Promise.resolve(!1);
                }, e.prototype._revokeAccessTokenInternal = function t(e, r) {
                    return !e || e.indexOf(".") >= 0 ? Promise.resolve(!1) : this._tokenRevocationClient.revoke(e, r).then(function() {
                        return !0;
                    });
                }, e.prototype._revokeRefreshTokenInternal = function t(e, r) {
                    return e ? this._tokenRevocationClient.revoke(e, r, "refresh_token").then(function() {
                        return !0;
                    }) : Promise.resolve(!1);
                }, e.prototype.startSilentRenew = function t() {
                    this._silentRenewService.start();
                }, e.prototype.stopSilentRenew = function t() {
                    this._silentRenewService.stop();
                }, e.prototype._loadUser = function t() {
                    return this._userStore.get(this._userStoreKey).then(function(t) {
                        return t ? (i.Log.debug("UserManager._loadUser: user storageString loaded"), a.User.fromStorageString(t)) : (i.Log.debug("UserManager._loadUser: no user storageString"), null);
                    });
                }, e.prototype.storeUser = function t(e) {
                    if (e) {
                        i.Log.debug("UserManager.storeUser: storing user");
                        var r = e.toStorageString();
                        return this._userStore.set(this._userStoreKey, r);
                    }
                    return i.Log.debug("storeUser.storeUser: removing user"), this._userStore.remove(this._userStoreKey);
                }, n(e, [
                    {
                        key: "_redirectNavigator",
                        get: function t() {
                            return this.settings.redirectNavigator;
                        }
                    },
                    {
                        key: "_popupNavigator",
                        get: function t() {
                            return this.settings.popupNavigator;
                        }
                    },
                    {
                        key: "_iframeNavigator",
                        get: function t() {
                            return this.settings.iframeNavigator;
                        }
                    },
                    {
                        key: "_userStore",
                        get: function t() {
                            return this.settings.userStore;
                        }
                    },
                    {
                        key: "events",
                        get: function t() {
                            return this._events;
                        }
                    },
                    {
                        key: "_userStoreKey",
                        get: function t() {
                            return "user:" + this.settings.authority + ":" + this.settings.client_id;
                        }
                    }
                ]), e;
            }(o.OidcClient);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.UserManagerSettings = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = (r(0), r(5)), o = r(40), s = r(41), a = r(43), u = r(6), c = r(1), h = r(8);
            function l(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            function f(t, e) {
                if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" != typeof e && "function" != typeof e ? t : e;
            }
            e.UserManagerSettings = function(t) {
                function e() {
                    var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = r.popup_redirect_uri, i = r.popup_post_logout_redirect_uri, g = r.popupWindowFeatures, d = r.popupWindowTarget, p = r.silent_redirect_uri, v = r.silentRequestTimeout, y = r.automaticSilentRenew, m = void 0 !== y && y, _ = r.validateSubOnSilentRenew, S = void 0 !== _ && _, b = r.includeIdTokenInSilentRenew, w = void 0 === b || b, F = r.monitorSession, E = void 0 === F || F, x = r.monitorAnonymousSession, A = void 0 !== x && x, k = r.checkSessionInterval, P = void 0 === k ? 2e3 : k, C = r.stopCheckSessionOnError, T = void 0 === C || C, R = r.query_status_response_type, I = r.revokeAccessTokenOnSignout, D = void 0 !== I && I, L = r.accessTokenExpiringNotificationTime, N = void 0 === L ? 60 : L, U = r.redirectNavigator, B = void 0 === U ? new o.RedirectNavigator : U, O = r.popupNavigator, j = void 0 === O ? new s.PopupNavigator : O, M = r.iframeNavigator, H = void 0 === M ? new a.IFrameNavigator : M, V = r.userStore, K = void 0 === V ? new u.WebStorageStateStore({
                        store: c.Global.sessionStorage
                    }) : V;
                    l(this, e);
                    var q = f(this, t.call(this, arguments[0]));
                    return q._popup_redirect_uri = n, q._popup_post_logout_redirect_uri = i, q._popupWindowFeatures = g, q._popupWindowTarget = d, q._silent_redirect_uri = p, q._silentRequestTimeout = v, q._automaticSilentRenew = m, q._validateSubOnSilentRenew = S, q._includeIdTokenInSilentRenew = w, q._accessTokenExpiringNotificationTime = N, q._monitorSession = E, q._monitorAnonymousSession = A, q._checkSessionInterval = P, q._stopCheckSessionOnError = T, R ? q._query_status_response_type = R : arguments[0] && arguments[0].response_type ? q._query_status_response_type = h.SigninRequest.isOidc(arguments[0].response_type) ? "id_token" : "code" : q._query_status_response_type = "id_token", q._revokeAccessTokenOnSignout = D, q._redirectNavigator = B, q._popupNavigator = j, q._iframeNavigator = H, q._userStore = K, q;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), n(e, [
                    {
                        key: "popup_redirect_uri",
                        get: function t() {
                            return this._popup_redirect_uri;
                        }
                    },
                    {
                        key: "popup_post_logout_redirect_uri",
                        get: function t() {
                            return this._popup_post_logout_redirect_uri;
                        }
                    },
                    {
                        key: "popupWindowFeatures",
                        get: function t() {
                            return this._popupWindowFeatures;
                        }
                    },
                    {
                        key: "popupWindowTarget",
                        get: function t() {
                            return this._popupWindowTarget;
                        }
                    },
                    {
                        key: "silent_redirect_uri",
                        get: function t() {
                            return this._silent_redirect_uri;
                        }
                    },
                    {
                        key: "silentRequestTimeout",
                        get: function t() {
                            return this._silentRequestTimeout;
                        }
                    },
                    {
                        key: "automaticSilentRenew",
                        get: function t() {
                            return this._automaticSilentRenew;
                        }
                    },
                    {
                        key: "validateSubOnSilentRenew",
                        get: function t() {
                            return this._validateSubOnSilentRenew;
                        }
                    },
                    {
                        key: "includeIdTokenInSilentRenew",
                        get: function t() {
                            return this._includeIdTokenInSilentRenew;
                        }
                    },
                    {
                        key: "accessTokenExpiringNotificationTime",
                        get: function t() {
                            return this._accessTokenExpiringNotificationTime;
                        }
                    },
                    {
                        key: "monitorSession",
                        get: function t() {
                            return this._monitorSession;
                        }
                    },
                    {
                        key: "monitorAnonymousSession",
                        get: function t() {
                            return this._monitorAnonymousSession;
                        }
                    },
                    {
                        key: "checkSessionInterval",
                        get: function t() {
                            return this._checkSessionInterval;
                        }
                    },
                    {
                        key: "stopCheckSessionOnError",
                        get: function t() {
                            return this._stopCheckSessionOnError;
                        }
                    },
                    {
                        key: "query_status_response_type",
                        get: function t() {
                            return this._query_status_response_type;
                        }
                    },
                    {
                        key: "revokeAccessTokenOnSignout",
                        get: function t() {
                            return this._revokeAccessTokenOnSignout;
                        }
                    },
                    {
                        key: "redirectNavigator",
                        get: function t() {
                            return this._redirectNavigator;
                        }
                    },
                    {
                        key: "popupNavigator",
                        get: function t() {
                            return this._popupNavigator;
                        }
                    },
                    {
                        key: "iframeNavigator",
                        get: function t() {
                            return this._iframeNavigator;
                        }
                    },
                    {
                        key: "userStore",
                        get: function t() {
                            return this._userStore;
                        }
                    }
                ]), e;
            }(i.OidcClientSettings);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.RedirectNavigator = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0);
            e.RedirectNavigator = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.prepare = function t() {
                    return Promise.resolve(this);
                }, t.prototype.navigate = function t(e) {
                    return e && e.url ? (e.useReplaceToNavigate ? window.location.replace(e.url) : window.location = e.url, Promise.resolve()) : (i.Log.error("RedirectNavigator.navigate: No url provided"), Promise.reject(new Error("No url provided")));
                }, n(t, [
                    {
                        key: "url",
                        get: function t() {
                            return window.location.href;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.PopupNavigator = void 0;
            var n = r(0), i = r(42);
            e.PopupNavigator = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.prepare = function t(e) {
                    var r = new i.PopupWindow(e);
                    return Promise.resolve(r);
                }, t.prototype.callback = function t(e, r, o) {
                    n.Log.debug("PopupNavigator.callback");
                    try {
                        return i.PopupWindow.notifyOpener(e, r, o), Promise.resolve();
                    } catch (t) {
                        return Promise.reject(t);
                    }
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.PopupWindow = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(3);
            e.PopupWindow = function() {
                function t(e) {
                    var r = this;
                    !function n(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._promise = new Promise(function(t, e) {
                        r._resolve = t, r._reject = e;
                    });
                    var o = e.popupWindowTarget || "_blank", s = e.popupWindowFeatures || "location=no,toolbar=no,width=500,height=500,left=100,top=100;";
                    this._popup = window.open("", o, s), this._popup && (i.Log.debug("PopupWindow.ctor: popup successfully created"), this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), 500));
                }
                return t.prototype.navigate = function t(e) {
                    return this._popup ? e && e.url ? (i.Log.debug("PopupWindow.navigate: Setting URL in popup"), this._id = e.id, this._id && (window["popupCallback_" + e.id] = this._callback.bind(this)), this._popup.focus(), this._popup.window.location = e.url) : (this._error("PopupWindow.navigate: no url provided"), this._error("No url provided")) : this._error("PopupWindow.navigate: Error opening popup window"), this.promise;
                }, t.prototype._success = function t(e) {
                    i.Log.debug("PopupWindow.callback: Successful response from popup window"), this._cleanup(), this._resolve(e);
                }, t.prototype._error = function t(e) {
                    i.Log.error("PopupWindow.error: ", e), this._cleanup(), this._reject(new Error(e));
                }, t.prototype.close = function t() {
                    this._cleanup(!1);
                }, t.prototype._cleanup = function t(e) {
                    i.Log.debug("PopupWindow.cleanup"), window.clearInterval(this._checkForPopupClosedTimer), this._checkForPopupClosedTimer = null, delete window["popupCallback_" + this._id], this._popup && !e && this._popup.close(), this._popup = null;
                }, t.prototype._checkForPopupClosed = function t() {
                    this._popup && !this._popup.closed || this._error("Popup window closed");
                }, t.prototype._callback = function t(e, r) {
                    this._cleanup(r), e ? (i.Log.debug("PopupWindow.callback success"), this._success({
                        url: e
                    })) : (i.Log.debug("PopupWindow.callback: Invalid response from popup"), this._error("Invalid response from popup"));
                }, t.notifyOpener = function t(e, r, n) {
                    if (window.opener) {
                        if (e = e || window.location.href) {
                            var s = o.UrlUtility.parseUrlFragment(e, n);
                            if (s.state) {
                                var a = "popupCallback_" + s.state, u = window.opener[a];
                                u ? (i.Log.debug("PopupWindow.notifyOpener: passing url message to opener"), u(e, r)) : i.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
                            } else i.Log.warn("PopupWindow.notifyOpener: no state found in response url");
                        }
                    } else i.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
                }, n(t, [
                    {
                        key: "promise",
                        get: function t() {
                            return this._promise;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.IFrameNavigator = void 0;
            var n = r(0), i = r(44);
            e.IFrameNavigator = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.prepare = function t(e) {
                    var r = new i.IFrameWindow(e);
                    return Promise.resolve(r);
                }, t.prototype.callback = function t(e) {
                    n.Log.debug("IFrameNavigator.callback");
                    try {
                        return i.IFrameWindow.notifyParent(e), Promise.resolve();
                    } catch (t) {
                        return Promise.reject(t);
                    }
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.IFrameWindow = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0);
            e.IFrameWindow = function() {
                function t(e) {
                    var r = this;
                    !function n(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._promise = new Promise(function(t, e) {
                        r._resolve = t, r._reject = e;
                    }), this._boundMessageEvent = this._message.bind(this), window.addEventListener("message", this._boundMessageEvent, !1), this._frame = window.document.createElement("iframe"), this._frame.style.visibility = "hidden", this._frame.style.position = "absolute", this._frame.width = 0, this._frame.height = 0, window.document.body.appendChild(this._frame);
                }
                return t.prototype.navigate = function t(e) {
                    if (e && e.url) {
                        var r = e.silentRequestTimeout || 1e4;
                        i.Log.debug("IFrameWindow.navigate: Using timeout of:", r), this._timer = window.setTimeout(this._timeout.bind(this), r), this._frame.src = e.url;
                    } else this._error("No url provided");
                    return this.promise;
                }, t.prototype._success = function t(e) {
                    this._cleanup(), i.Log.debug("IFrameWindow: Successful response from frame window"), this._resolve(e);
                }, t.prototype._error = function t(e) {
                    this._cleanup(), i.Log.error(e), this._reject(new Error(e));
                }, t.prototype.close = function t() {
                    this._cleanup();
                }, t.prototype._cleanup = function t() {
                    this._frame && (i.Log.debug("IFrameWindow: cleanup"), window.removeEventListener("message", this._boundMessageEvent, !1), window.clearTimeout(this._timer), window.document.body.removeChild(this._frame), this._timer = null, this._frame = null, this._boundMessageEvent = null);
                }, t.prototype._timeout = function t() {
                    i.Log.debug("IFrameWindow.timeout"), this._error("Frame window timed out");
                }, t.prototype._message = function t(e) {
                    if (i.Log.debug("IFrameWindow.message"), this._timer && e.origin === this._origin && e.source === this._frame.contentWindow && "string" == typeof e.data && (e.data.startsWith("http://") || e.data.startsWith("https://"))) {
                        var r = e.data;
                        r ? this._success({
                            url: r
                        }) : this._error("Invalid response from frame");
                    }
                }, t.notifyParent = function t(e) {
                    i.Log.debug("IFrameWindow.notifyParent"), (e = e || window.location.href) && (i.Log.debug("IFrameWindow.notifyParent: posting url message to parent"), window.parent.postMessage(e, location.protocol + "//" + location.host));
                }, n(t, [
                    {
                        key: "promise",
                        get: function t() {
                            return this._promise;
                        }
                    },
                    {
                        key: "_origin",
                        get: function t() {
                            return location.protocol + "//" + location.host;
                        }
                    }
                ]), t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.UserManagerEvents = void 0;
            var n = r(0), i = r(16), o = r(17);
            e.UserManagerEvents = function(t) {
                function e(r) {
                    !function n(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, e);
                    var i = function s(t, e) {
                        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return !e || "object" != typeof e && "function" != typeof e ? t : e;
                    }(this, t.call(this, r));
                    return i._userLoaded = new o.Event("User loaded"), i._userUnloaded = new o.Event("User unloaded"), i._silentRenewError = new o.Event("Silent renew error"), i._userSignedIn = new o.Event("User signed in"), i._userSignedOut = new o.Event("User signed out"), i._userSessionChanged = new o.Event("User session changed"), i;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), e.prototype.load = function e(r) {
                    var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    n.Log.debug("UserManagerEvents.load"), t.prototype.load.call(this, r), i && this._userLoaded.raise(r);
                }, e.prototype.unload = function e() {
                    n.Log.debug("UserManagerEvents.unload"), t.prototype.unload.call(this), this._userUnloaded.raise();
                }, e.prototype.addUserLoaded = function t(e) {
                    this._userLoaded.addHandler(e);
                }, e.prototype.removeUserLoaded = function t(e) {
                    this._userLoaded.removeHandler(e);
                }, e.prototype.addUserUnloaded = function t(e) {
                    this._userUnloaded.addHandler(e);
                }, e.prototype.removeUserUnloaded = function t(e) {
                    this._userUnloaded.removeHandler(e);
                }, e.prototype.addSilentRenewError = function t(e) {
                    this._silentRenewError.addHandler(e);
                }, e.prototype.removeSilentRenewError = function t(e) {
                    this._silentRenewError.removeHandler(e);
                }, e.prototype._raiseSilentRenewError = function t(e) {
                    n.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message), this._silentRenewError.raise(e);
                }, e.prototype.addUserSignedIn = function t(e) {
                    this._userSignedIn.addHandler(e);
                }, e.prototype.removeUserSignedIn = function t(e) {
                    this._userSignedIn.removeHandler(e);
                }, e.prototype._raiseUserSignedIn = function t() {
                    n.Log.debug("UserManagerEvents._raiseUserSignedIn"), this._userSignedIn.raise();
                }, e.prototype.addUserSignedOut = function t(e) {
                    this._userSignedOut.addHandler(e);
                }, e.prototype.removeUserSignedOut = function t(e) {
                    this._userSignedOut.removeHandler(e);
                }, e.prototype._raiseUserSignedOut = function t() {
                    n.Log.debug("UserManagerEvents._raiseUserSignedOut"), this._userSignedOut.raise();
                }, e.prototype.addUserSessionChanged = function t(e) {
                    this._userSessionChanged.addHandler(e);
                }, e.prototype.removeUserSessionChanged = function t(e) {
                    this._userSessionChanged.removeHandler(e);
                }, e.prototype._raiseUserSessionChanged = function t() {
                    n.Log.debug("UserManagerEvents._raiseUserSessionChanged"), this._userSessionChanged.raise();
                }, e;
            }(i.AccessTokenEvents);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Timer = void 0;
            var n = function() {
                function t(t, e) {
                    for(var r = 0; r < e.length; r++){
                        var n = e[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
                    }
                }
                return function(e, r, n) {
                    return r && t(e.prototype, r), n && t(e, n), e;
                };
            }(), i = r(0), o = r(1), s = r(17);
            function a(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            function u(t, e) {
                if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !e || "object" != typeof e && "function" != typeof e ? t : e;
            }
            e.Timer = function(t) {
                function e(r) {
                    var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.Global.timer, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    a(this, e);
                    var s = u(this, t.call(this, r));
                    return s._timer = n, s._nowFunc = i || function() {
                        return Date.now() / 1e3;
                    }, s;
                }
                return function r(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
                }(e, t), e.prototype.init = function t(e) {
                    e <= 0 && (e = 1), e = parseInt(e);
                    var r = this.now + e;
                    if (this.expiration === r && this._timerHandle) i.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
                    else {
                        this.cancel(), i.Log.debug("Timer.init timer " + this._name + " for duration:", e), this._expiration = r;
                        var n = 5;
                        e < n && (n = e), this._timerHandle = this._timer.setInterval(this._callback.bind(this), 1e3 * n);
                    }
                }, e.prototype.cancel = function t() {
                    this._timerHandle && (i.Log.debug("Timer.cancel: ", this._name), this._timer.clearInterval(this._timerHandle), this._timerHandle = null);
                }, e.prototype._callback = function e() {
                    var r = this._expiration - this.now;
                    i.Log.debug("Timer.callback; " + this._name + " timer expires in:", r), this._expiration <= this.now && (this.cancel(), t.prototype.raise.call(this));
                }, n(e, [
                    {
                        key: "now",
                        get: function t() {
                            return parseInt(this._nowFunc());
                        }
                    },
                    {
                        key: "expiration",
                        get: function t() {
                            return this._expiration;
                        }
                    }
                ]), e;
            }(s.Event);
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SilentRenewService = void 0;
            var n = r(0);
            e.SilentRenewService = function() {
                function t(e) {
                    !function r(t, e) {
                        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                    }(this, t), this._userManager = e;
                }
                return t.prototype.start = function t() {
                    this._callback || (this._callback = this._tokenExpiring.bind(this), this._userManager.events.addAccessTokenExpiring(this._callback), this._userManager.getUser().then(function(t) {}).catch(function(t) {
                        n.Log.error("SilentRenewService.start: Error from getUser:", t.message);
                    }));
                }, t.prototype.stop = function t() {
                    this._callback && (this._userManager.events.removeAccessTokenExpiring(this._callback), delete this._callback);
                }, t.prototype._tokenExpiring = function t() {
                    var e = this;
                    this._userManager.signinSilent().then(function(t) {
                        n.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
                    }, function(t) {
                        n.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", t.message), e._userManager.events._raiseSilentRenewError(t);
                    });
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.CordovaPopupNavigator = void 0;
            var n = r(21);
            e.CordovaPopupNavigator = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.prepare = function t(e) {
                    var r = new n.CordovaPopupWindow(e);
                    return Promise.resolve(r);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.CordovaIFrameNavigator = void 0;
            var n = r(21);
            e.CordovaIFrameNavigator = function() {
                function t() {
                    !function e(t, r) {
                        if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function");
                    }(this, t);
                }
                return t.prototype.prepare = function t(e) {
                    e.popupWindowFeatures = "hidden=yes";
                    var r = new n.CordovaPopupWindow(e);
                    return Promise.resolve(r);
                }, t;
            }();
        },
        function(t, e, r) {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            e.Version = "1.11.6";
        }
    ]);
});

},{}],"8X2Ta":[function(require,module,exports) {
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Web Access Control Vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACL", ()=>ACL);
parcelHelpers.export(exports, "ALTR", ()=>ALTR);
parcelHelpers.export(exports, "AS", ()=>AS);
parcelHelpers.export(exports, "BOOKMARK", ()=>BOOKMARK);
parcelHelpers.export(exports, "CRED", ()=>CRED);
parcelHelpers.export(exports, "DCAT", ()=>DCAT);
parcelHelpers.export(exports, "DCTERMS", ()=>DCTERMS);
parcelHelpers.export(exports, "DOAP", ()=>DOAP);
parcelHelpers.export(exports, "EARL", ()=>EARL);
parcelHelpers.export(exports, "FOAF", ()=>FOAF);
parcelHelpers.export(exports, "HTTP", ()=>HTTP);
parcelHelpers.export(exports, "HTTPH_INRUPT", ()=>HTTPH_INRUPT);
parcelHelpers.export(exports, "HYDRA", ()=>HYDRA);
parcelHelpers.export(exports, "ICAL", ()=>ICAL);
parcelHelpers.export(exports, "JSONLD", ()=>JSONLD);
parcelHelpers.export(exports, "LDP", ()=>LDP);
parcelHelpers.export(exports, "ODRL", ()=>ODRL);
parcelHelpers.export(exports, "OLO", ()=>OLO);
parcelHelpers.export(exports, "OWL", ()=>OWL);
parcelHelpers.export(exports, "POSIX", ()=>POSIX);
parcelHelpers.export(exports, "PROV_O", ()=>PROV_O);
parcelHelpers.export(exports, "QB", ()=>QB);
parcelHelpers.export(exports, "RDF", ()=>RDF);
parcelHelpers.export(exports, "RDFS", ()=>RDFS);
parcelHelpers.export(exports, "RLOG", ()=>RLOG);
parcelHelpers.export(exports, "SCHEMA_INRUPT", ()=>SCHEMA_INRUPT);
parcelHelpers.export(exports, "SD", ()=>SD);
parcelHelpers.export(exports, "SDMX_DIMENSION", ()=>SDMX_DIMENSION);
parcelHelpers.export(exports, "SEC", ()=>SEC);
parcelHelpers.export(exports, "SHEX", ()=>SHEX);
parcelHelpers.export(exports, "SIOC", ()=>SIOC);
parcelHelpers.export(exports, "SKOS", ()=>SKOS);
parcelHelpers.export(exports, "SKOS_XL", ()=>SKOS_XL);
parcelHelpers.export(exports, "UI", ()=>UI);
parcelHelpers.export(exports, "UI_INRUPT", ()=>UI_INRUPT);
parcelHelpers.export(exports, "VANN", ()=>VANN);
parcelHelpers.export(exports, "VCARD", ()=>VCARD);
parcelHelpers.export(exports, "VOID", ()=>VOID);
parcelHelpers.export(exports, "VS", ()=>VS);
parcelHelpers.export(exports, "XSD", ()=>XSD);
var _NAMESPACE$D = "http://www.w3.org/ns/auth/acl#";
function _NS$D(localName) {
    return _NAMESPACE$D + localName;
}
/**
 * [Generator provided] - Web Access Control Vocabulary
 */ var ACL = {
    PREFIX: "acl",
    NAMESPACE: _NAMESPACE$D,
    PREFIX_AND_NAMESPACE: {
        "acl": "http://www.w3.org/ns/auth/acl#"
    },
    NS: _NS$D,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Any kind of access to a resource. Don't use this, use R W and RW
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
     */ Access: _NS$D("Access"),
    /**
     * Append accesses are specific write access which only add information, and do not remove information.
      For text files, for example, append access allows bytes to be added onto the end of the file.
      For RDF graphs, Append access allows adds triples to the graph but does not remove any.
      Append access is useful for dropbox functionality.
      Dropbox can be used for link notification, which the information added is a notification
      that a some link has been made elsewhere relevant to the given resource.
      
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Append: _NS$D("Append"),
    /**
     * write
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ Write: _NS$D("Write"),
    /**
     * A class of agents who have been authenticated.
  In other words, anyone can access this resource, but not anonymously.
  The social expectation is that the authentication process will provide an
  identify and a name, or pseudonym.
  (A new ID should not be minted for every access: the intent is that the user
  is able to continue to use the ID for continues interactions with peers,
  and for example to develop a reputation)
  
     *
     * This term provides descriptions only with no explicit locale.
     */ AuthenticatedAgent: _NS$D("AuthenticatedAgent"),
    /**
     * An element of access control,
      allowing agent to agents access of some kind to resources or classes of resources
     *
     * This term provides descriptions only with no explicit locale.
     */ Authorization: _NS$D("Authorization"),
    /**
     * Allows read/write access to the ACL for the resource(s)
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Control: _NS$D("Control"),
    /**
     * An Origin is basically a web site
          (Note WITHOUT the trailing slash after the domain name and port in its URI)
          and is the basis for controlling access to data by web apps
          in the Same Origin Model of web security.
          All scripts from the same origin are given the same right.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
     */ Origin: _NS$D("Origin"),
    /**
     * The class of read operations
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Read: _NS$D("Read"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The Access Control file for this information resource.
          This may of course be a virtual resource implemented by the access control system.
          Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
     *
     * This term provides descriptions only with no explicit locale.
     */ accessControl: _NS$D("accessControl"),
    /**
     * The information resource to which access is being granted.
     *
     * This term provides descriptions only with no explicit locale.
     */ accessTo: _NS$D("accessTo"),
    /**
     * A class of information resources to which access is being granted.
     *
     * This term provides descriptions only with no explicit locale.
     */ accessToClass: _NS$D("accessToClass"),
    /**
     * A person or social entity to being given the right
     *
     * This term provides descriptions only with no explicit locale.
     */ agent: _NS$D("agent"),
    /**
     * A class of persons or social entities to being given the right
     *
     * This term provides descriptions only with no explicit locale.
     */ agentClass: _NS$D("agentClass"),
    /**
     * A group of persons or social entities to being given the right.
            The right is given to any entity which is a vcard:member of the group,
            as defined by the document received when the Group is dereferenced.
     *
     * This term provides descriptions only with no explicit locale.
     */ agentGroup: _NS$D("agentGroup"),
    /**
     * If a resource has no ACL file (it is 404),
          then access to the resource if given by the ACL of the immediately
          containing directory, or failing that (404) the ACL of the recursively next
          containing directory which has an ACL file.
          Within that ACL file,
          any Authentication which has that directory as its acl:default applies to the
          resource. (The highest directory must have an ACL file.)
  
     *
     * This term provides descriptions only with no explicit locale.
     */ default: _NS$D("default"),
    /**
     * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
          Was: A directory for which this authorization is used for new files in the directory.
     *
     * This term provides descriptions only with no explicit locale.
     */ defaultForNew: _NS$D("defaultForNew"),
    /**
     * Delegates a person or another agent to act on behalf of the agent.
      For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ delegates: _NS$D("delegates"),
    /**
     * A mode of access such as read or write.
     *
     * This term provides descriptions only with no explicit locale.
     */ mode: _NS$D("mode"),
    /**
     * A web application, identified by its Origin, such as
          <https://scripts.example.com>, being given the right.
          When a user of the web application at a certain origin accesses the server,
          then the browser sets the Origin: header to warn that a possibly untrusted webapp
          is being used.
          Then, BOTH the user AND the origin must have the required access.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
     */ origin: _NS$D("origin"),
    /**
     * The person or other agent which owns this.
      For example, the owner of a file in a filesystem.
      There is a sense of right to control.   Typically defaults to the agent who craeted
      something but can be changed.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ owner: _NS$D("owner")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This ontology allows for the description of representations of Internet resources.

Representations may conform to prof:Profile instances and may have the format of a particular dct:MediaType.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$C = "http://www.w3.org/ns/dx/conneg/altr#";
function _NS$C(localName) {
    return _NAMESPACE$C + localName;
}
/**
 * This ontology allows for the description of representations of Internet resources.

Representations may conform to prof:Profile instances and may have the format of a particular dct:MediaType.
 */ var ALTR = {
    PREFIX: "altr",
    NAMESPACE: _NAMESPACE$C,
    PREFIX_AND_NAMESPACE: {
        "altr": "http://www.w3.org/ns/dx/conneg/altr#"
    },
    NS: _NS$C,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An abstraction of the current or desired state of a thing in HTTP communications.
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/dx/connegp/altp
     */ Representation: _NS$C("Representation"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates a Representation of a Resource.
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ hasRepresentation: _NS$C("hasRepresentation"),
    /**
     * Indicates the default Representation of a Resource.
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ hasDefaultRepresentation: _NS$C("hasDefaultRepresentation")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Extended Activity Streams 2.0 Vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$B = "https://www.w3.org/ns/activitystreams#";
function _NS$B(localName) {
    return _NAMESPACE$B + localName;
}
/**
 * Extended Activity Streams 2.0 Vocabulary
 */ var AS = {
    PREFIX: "as",
    NAMESPACE: _NAMESPACE$B,
    PREFIX_AND_NAMESPACE: {
        "as": "https://www.w3.org/ns/activitystreams#"
    },
    NS: _NS$B,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An Object representing some form of Action that has been taken
     *
     * This term provides descriptions only in English.
     */ Activity: _NS$B("Activity"),
    /**
     * Object
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ Object: _NS$B("Object"),
    /**
     * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
     *
     * This term provides descriptions only in English.
     */ Link: _NS$B("Link"),
    /**
     * A rdf:List variant for Objects and Links
     *
     * This term provides descriptions only in English.
     */ OrderedItems: _NS$B("OrderedItems"),
    /**
     * An ordered or unordered collection of Objects or Links
     *
     * This term provides descriptions only in English.
     */ Collection: _NS$B("Collection"),
    /**
     * A subset of items from a Collection
     *
     * This term provides descriptions only in English.
     */ CollectionPage: _NS$B("CollectionPage"),
    /**
     * An Image file
     *
     * This term provides descriptions only in English.
     */ Image: _NS$B("Image"),
    /**
     * Represents a digital document/file of any sort
     *
     * This term provides descriptions only in English.
     */ Document: _NS$B("Document"),
    /**
     * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
     *
     * This term provides descriptions only in English.
     */ Relationship: _NS$B("Relationship"),
    /**
     * A question of any sort.
     *
     * This term provides descriptions only in English.
     */ Question: _NS$B("Question"),
    /**
     * An Activity that has no direct object
     *
     * This term provides descriptions only in English.
     */ IntransitiveActivity: _NS$B("IntransitiveActivity"),
    /**
     * A Profile Document
     *
     * This term provides descriptions only in English.
     */ Profile: _NS$B("Profile"),
    /**
     * A placeholder for a deleted object
     *
     * This term provides descriptions only in English.
     */ Tombstone: _NS$B("Tombstone"),
    /**
     * A physical or logical location
     *
     * This term provides descriptions only in English.
     */ Place: _NS$B("Place"),
    /**
     * An ordered subset of items from an OrderedCollection
     *
     * This term provides descriptions only in English.
     */ OrderedCollectionPage: _NS$B("OrderedCollectionPage"),
    /**
     * A variation of Collection in which items are strictly ordered
     *
     * This term provides descriptions only in English.
     */ OrderedCollection: _NS$B("OrderedCollection"),
    /**
     * Actor accepts the Object
     *
     * This term provides descriptions only in English.
     */ Accept: _NS$B("Accept"),
    /**
     * Block
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ Block: _NS$B("Block"),
    /**
     * Actor is ignoring the Object
     *
     * This term provides descriptions only in English.
     */ Ignore: _NS$B("Ignore"),
    /**
     * To Add an Object or Link to Something
     *
     * This term provides descriptions only in English.
     */ Add: _NS$B("Add"),
    /**
     * Actor announces the object to the target
     *
     * This term provides descriptions only in English.
     */ Announce: _NS$B("Announce"),
    /**
     * Represents a software application of any sort
     *
     * This term provides descriptions only in English.
     */ Application: _NS$B("Application"),
    /**
     * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
     *
     * This term provides descriptions only in English.
     */ Arrive: _NS$B("Arrive"),
    /**
     * A written work. Typically several paragraphs long. For example, a blog post or a news article.
     *
     * This term provides descriptions only in English.
     */ Article: _NS$B("Article"),
    /**
     * An audio file
     *
     * This term provides descriptions only in English.
     */ Audio: _NS$B("Audio"),
    /**
     * To Create Something
     *
     * This term provides descriptions only in English.
     */ Create: _NS$B("Create"),
    /**
     * To Delete Something
     *
     * This term provides descriptions only in English.
     */ Delete: _NS$B("Delete"),
    /**
     * The actor dislikes the object
     *
     * This term provides descriptions only in English.
     */ Dislike: _NS$B("Dislike"),
    /**
     * An Event of any kind
     *
     * This term provides descriptions only in English.
     */ Event: _NS$B("Event"),
    /**
     * To flag something (e.g. flag as inappropriate, flag as spam, etc)
     *
     * This term provides descriptions only in English.
     */ Flag: _NS$B("Flag"),
    /**
     * To Express Interest in Something
     *
     * This term provides descriptions only in English.
     */ Follow: _NS$B("Follow"),
    /**
     * A Group of any kind.
     *
     * This term provides descriptions only in English.
     */ Group: _NS$B("Group"),
    /**
     * To invite someone or something to something
     *
     * This term provides descriptions only in English.
     */ Invite: _NS$B("Invite"),
    /**
     * To Offer something to someone or something
     *
     * This term provides descriptions only in English.
     */ Offer: _NS$B("Offer"),
    /**
     * To Join Something
     *
     * This term provides descriptions only in English.
     */ Join: _NS$B("Join"),
    /**
     * To Leave Something
     *
     * This term provides descriptions only in English.
     */ Leave: _NS$B("Leave"),
    /**
     * To Like Something
     *
     * This term provides descriptions only in English.
     */ Like: _NS$B("Like"),
    /**
     * The actor viewed the object
     *
     * This term provides descriptions only in English.
     */ View: _NS$B("View"),
    /**
     * The actor listened to the object
     *
     * This term provides descriptions only in English.
     */ Listen: _NS$B("Listen"),
    /**
     * The actor read the object
     *
     * This term provides descriptions only in English.
     */ Read: _NS$B("Read"),
    /**
     * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Move: _NS$B("Move"),
    /**
     * The actor is traveling to the target. The origin specifies where the actor is traveling from.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Travel: _NS$B("Travel"),
    /**
     * A specialized Link that represents an @mention
     *
     * This term provides descriptions only in English.
     */ Mention: _NS$B("Mention"),
    /**
     * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
     *
     * This term provides descriptions only in English.
     */ Note: _NS$B("Note"),
    /**
     * A Web Page
     *
     * This term provides descriptions only in English.
     */ Page: _NS$B("Page"),
    /**
     * A Person
     *
     * This term provides descriptions only in English.
     */ Person: _NS$B("Person"),
    /**
     * An Organization
     *
     * This term provides descriptions only in English.
     */ Organization: _NS$B("Organization"),
    /**
     * Actor rejects the Object
     *
     * This term provides descriptions only in English.
     */ Reject: _NS$B("Reject"),
    /**
     * To Remove Something
     *
     * This term provides descriptions only in English.
     */ Remove: _NS$B("Remove"),
    /**
     * A service provided by some entity
     *
     * This term provides descriptions only in English.
     */ Service: _NS$B("Service"),
    /**
     * Actor tentatively accepts the Object
     *
     * This term provides descriptions only in English.
     */ TentativeAccept: _NS$B("TentativeAccept"),
    /**
     * Actor tentatively rejects the object
     *
     * This term provides descriptions only in English.
     */ TentativeReject: _NS$B("TentativeReject"),
    /**
     * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
     *
     * This term provides descriptions only in English.
     */ Undo: _NS$B("Undo"),
    /**
     * To Update/Modify Something
     *
     * This term provides descriptions only in English.
     */ Update: _NS$B("Update"),
    /**
     * A Video document of any kind.
     *
     * This term provides descriptions only in English.
     */ Video: _NS$B("Video"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Subproperty of as:attributedTo that identifies the primary actor
     *
     * This term provides descriptions only in English.
     */ actor: _NS$B("actor"),
    /**
     * Identifies an entity to which an object is attributed
     *
     * This term provides descriptions only in English.
     */ attributedTo: _NS$B("attributedTo"),
    /**
     * attachment
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ attachment: _NS$B("attachment"),
    /**
     * attachments
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ attachments: _NS$B("attachments"),
    /**
     * Identifies the author of an object. Deprecated. Use as:attributedTo instead
     *
     * This term provides descriptions only in English.
     */ author: _NS$B("author"),
    /**
     * bcc
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ bcc: _NS$B("bcc"),
    /**
     * bto
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ bto: _NS$B("bto"),
    /**
     * cc
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ cc: _NS$B("cc"),
    /**
     * Specifies the context within which an object exists or an activity was performed
     *
     * This term provides descriptions only in English.
     */ context: _NS$B("context"),
    /**
     * current
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ current: _NS$B("current"),
    /**
     * first
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ first: _NS$B("first"),
    /**
     * generator
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ generator: _NS$B("generator"),
    /**
     * icon
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ icon: _NS$B("icon"),
    /**
     * image
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ image: _NS$B("image"),
    /**
     * inReplyTo
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ inReplyTo: _NS$B("inReplyTo"),
    /**
     * items
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ items: _NS$B("items"),
    /**
     * last
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ last: _NS$B("last"),
    /**
     * location
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ location: _NS$B("location"),
    /**
     * next
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ next: _NS$B("next"),
    /**
     * object
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ object: _NS$B("object"),
    /**
     * Describes a possible exclusive answer or option for a question.
     *
     * This term provides descriptions only in English.
     */ oneOf: _NS$B("oneOf"),
    /**
     * Describes a possible inclusive answer or option for a question.
     *
     * This term provides descriptions only in English.
     */ anyOf: _NS$B("anyOf"),
    /**
     * prev
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ prev: _NS$B("prev"),
    /**
     * preview
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ preview: _NS$B("preview"),
    /**
     * provider
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ provider: _NS$B("provider"),
    /**
     * replies
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ replies: _NS$B("replies"),
    /**
     * result
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ result: _NS$B("result"),
    /**
     * audience
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ audience: _NS$B("audience"),
    /**
     * partOf
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ partOf: _NS$B("partOf"),
    /**
     * tag
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ tag: _NS$B("tag"),
    /**
     * tags
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ tags: _NS$B("tags"),
    /**
     * target
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ target: _NS$B("target"),
    /**
     * For certain activities, specifies the entity from which the action is directed.
     *
     * This term provides descriptions only in English.
     */ origin: _NS$B("origin"),
    /**
     * Indentifies an object used (or to be used) to complete an activity
     *
     * This term provides descriptions only in English.
     */ instrument: _NS$B("instrument"),
    /**
     * to
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ to: _NS$B("to"),
    /**
     * Specifies a link to a specific representation of the Object
     *
     * This term provides descriptions only in English.
     */ url: _NS$B("url"),
    /**
     * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
     *
     * This term provides descriptions only in English.
     */ subject: _NS$B("subject"),
    /**
     * On a Relationship object, describes the type of relationship
     *
     * This term provides descriptions only in English.
     */ relationship: _NS$B("relationship"),
    /**
     * On a Profile object, describes the object described by the profile
     *
     * This term provides descriptions only in English.
     */ describes: _NS$B("describes"),
    /**
     * On a Tombstone object, describes the former type of the deleted object
     *
     * This term provides descriptions only in English.
     */ formerType: _NS$B("formerType"),
    /**
     * Specifies the accuracy around the point established by the longitude and latitude
     *
     * This term provides descriptions only in English.
     */ accuracy: _NS$B("accuracy"),
    /**
     * The altitude of a place
     *
     * This term provides descriptions only in English.
     */ altitude: _NS$B("altitude"),
    /**
     * The content of the object.
     *
     * This term provides descriptions only in English.
     */ content: _NS$B("content"),
    /**
     * name
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ name: _NS$B("name"),
    /**
     * downstreamDuplicates
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ downstreamDuplicates: _NS$B("downstreamDuplicates"),
    /**
     * The duration of the object
     *
     * This term provides descriptions only in English.
     */ duration: _NS$B("duration"),
    /**
     * The ending time of the object
     *
     * This term provides descriptions only in English.
     */ endTime: _NS$B("endTime"),
    /**
     * The display height expressed as device independent pixels
     *
     * This term provides descriptions only in English.
     */ height: _NS$B("height"),
    /**
     * The target URI of the Link
     *
     * This term provides descriptions only in English.
     */ href: _NS$B("href"),
    /**
     * A hint about the language of the referenced resource
     *
     * This term provides descriptions only in English.
     */ hreflang: _NS$B("hreflang"),
    /**
     * id
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ id: _NS$B("id"),
    /**
     * The latitude
     *
     * This term provides descriptions only in English.
     */ latitude: _NS$B("latitude"),
    /**
     * The longitude
     *
     * This term provides descriptions only in English.
     */ longitude: _NS$B("longitude"),
    /**
     * The MIME Media Type
     *
     * This term provides descriptions only in English.
     */ mediaType: _NS$B("mediaType"),
    /**
     * objectType
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ objectType: _NS$B("objectType"),
    /**
     * Specifies the date and time the object was published
     *
     * This term provides descriptions only in English.
     */ published: _NS$B("published"),
    /**
     * Specifies a radius around the point established by the longitude and latitude
     *
     * This term provides descriptions only in English.
     */ radius: _NS$B("radius"),
    /**
     * A numeric rating (>= 0.0, <= 5.0) for the object
     *
     * This term provides descriptions only in English.
     */ rating: _NS$B("rating"),
    /**
     * The RFC 5988 or HTML5 Link Relation associated with the Link
     *
     * This term provides descriptions only in English.
     */ rel: _NS$B("rel"),
    /**
     * In a strictly ordered logical collection, specifies the index position of the first item in the items list
     *
     * This term provides descriptions only in English.
     */ startIndex: _NS$B("startIndex"),
    /**
     * The starting time of the object
     *
     * This term provides descriptions only in English.
     */ startTime: _NS$B("startTime"),
    /**
     * A short summary of the object
     *
     * This term provides descriptions only in English.
     */ summary: _NS$B("summary"),
    /**
     * The total number of items in a logical collection
     *
     * This term provides descriptions only in English.
     */ totalItems: _NS$B("totalItems"),
    /**
     * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
     *
     * This term provides descriptions only in English.
     */ units: _NS$B("units"),
    /**
     * Specifies when the object was last updated
     *
     * This term provides descriptions only in English.
     */ updated: _NS$B("updated"),
    /**
     * upstreamDuplicates
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ upstreamDuplicates: _NS$B("upstreamDuplicates"),
    /**
     * verb
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ verb: _NS$B("verb"),
    /**
     * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
     *
     * This term provides descriptions only in English.
     */ width: _NS$B("width"),
    /**
     * Specifies the date and time the object was deleted
     *
     * This term provides descriptions only in English.
     */ deleted: _NS$B("deleted")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - W3C Bookmark vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$A = "http://www.w3.org/2002/01/bookmark#";
function _NS$A(localName) {
    return _NAMESPACE$A + localName;
}
/**
 * [Generator provided] - W3C Bookmark vocabulary
 */ var BOOKMARK = {
    PREFIX: "bookmark",
    NAMESPACE: _NAMESPACE$A,
    PREFIX_AND_NAMESPACE: {
        "bookmark": "http://www.w3.org/2002/01/bookmark#"
    },
    NS: _NS$A,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Topic
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ Topic: _NS$A("Topic"),
    /**
     * Specifies a behavior; when the
                  object of type 'Shortcut' is activated, the
                  client follows the 'recalls' property and
                  activates the object at the end of that
                  'recalls' property.  The target object may
                  be another Bookmark or may be a Topic.
     *
     * This term provides descriptions only with no explicit locale.
     */ Shortcut: _NS$A("Shortcut"),
    /**
     * The class to which all bookmarks belong.
     *
     * This term provides descriptions only with no explicit locale.
     */ Bookmark: _NS$A("Bookmark"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * relates a bookmark to a topic.
                  A bookmark must have at least one hasTopic property.
                  The typical user operation of following a bookmark link
                  will use the value of the b:recalls property. This property
                  corresponds to XBEL:href property.
     *
     * This term provides descriptions only with no explicit locale.
     */ hasTopic: _NS$A("hasTopic"),
    /**
     * connects a Shortcut to the bookmark or topic that is
  being included by reference in some other topic
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     */ leadsTo: _NS$A("leadsTo"),
    /**
     * This corresponds to XBEL:href an
                  object of type Bookmark is expected to have a
                  'recalls' relationship to the document being
                  bookmarked.  The 'bookmarks' property is an older
                  name for the 'recalls' relationship.
     *
     * This term provides descriptions only with no explicit locale.
     */ bookmarks: _NS$A("bookmarks"),
    /**
     * Relates a bookmark with the resource that
                  has been bookmarked.  This corresponds to XBEL:href;
                  an object of type Bookmark is expected to have a
                  'recalls' relationship to the document being
                  bookmarked
     *
     * This term provides descriptions only with no explicit locale.
     */ recalls: _NS$A("recalls"),
    /**
     * Describes a relationship between Topics.
          When a topic T is a sub-topic of a topic U then all
          bookmarks that have topic T are also considered to have
          topic U. A topic may be a sub-topic of one or more
          topics; trivially, every topic is a sub-topic of itself.
          More formally; for all B, T, and U: b b:hasTopic T,
          T b:subTopicOf U implies B b:hasTopic U.
     *
     * This term provides descriptions only with no explicit locale.
     */ subTopicOf: _NS$A("subTopicOf")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for the Data Model for W3C Verifiable Credentials.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$z = "https://www.w3.org/2018/credentials#";
function _NS$z(localName) {
    return _NAMESPACE$z + localName;
}
/**
 * A vocabulary for the Data Model for W3C Verifiable Credentials.
 */ var CRED = {
    PREFIX: "cred",
    NAMESPACE: _NAMESPACE$z,
    PREFIX_AND_NAMESPACE: {
        "cred": "https://www.w3.org/2018/credentials#"
    },
    NS: _NS$z,
    // *****************
    // All the Classes.
    // *****************
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ VerifiableCredential: _NS$z("VerifiableCredential"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ JsonSchemaValidator2018: _NS$z("JsonSchemaValidator2018"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ ManualRefreshService2018: _NS$z("ManualRefreshService2018"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ VerifiablePresentation: _NS$z("VerifiablePresentation"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ verifiableCredential: _NS$z("verifiableCredential"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ credentialSchema: _NS$z("credentialSchema"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ credentialStatus: _NS$z("credentialStatus"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ credentialSubject: _NS$z("credentialSubject"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ evidence: _NS$z("evidence"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ expirationDate: _NS$z("expirationDate"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ holder: _NS$z("holder"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ issued: _NS$z("issued"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ issuer: _NS$z("issuer"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ issuanceDate: _NS$z("issuanceDate"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ refreshService: _NS$z("refreshService"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ termsOfUse: _NS$z("termsOfUse"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ validFrom: _NS$z("validFrom"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://www.w3.org/2018/credentials#
     */ validUntil: _NS$z("validUntil")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * DCAT is an RDF vocabulary designed to facilitate interoperability between data catalogs published on the Web. By using DCAT to describe datasets in data catalogs, publishers increase discoverability and enable applications easily to consume metadata from multiple catalogs. It further enables decentralized publishing of catalogs and facilitates federated dataset search across sites. Aggregated DCAT metadata can serve as a manifest file to facilitate digital preservation. DCAT is defined at http://www.w3.org/TR/vocab-dcat/. Any variance between that normative document and this schema is an error in this schema.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$y = "http://www.w3.org/ns/dcat#";
function _NS$y(localName) {
    return _NAMESPACE$y + localName;
}
/**
 * DCAT is an RDF vocabulary designed to facilitate interoperability between data catalogs published on the Web. By using DCAT to describe datasets in data catalogs, publishers increase discoverability and enable applications easily to consume metadata from multiple catalogs. It further enables decentralized publishing of catalogs and facilitates federated dataset search across sites. Aggregated DCAT metadata can serve as a manifest file to facilitate digital preservation. DCAT is defined at http://www.w3.org/TR/vocab-dcat/. Any variance between that normative document and this schema is an error in this schema.
 */ var DCAT = {
    PREFIX: "dcat",
    NAMESPACE: _NAMESPACE$y,
    PREFIX_AND_NAMESPACE: {
        "dcat": "http://www.w3.org/ns/dcat#"
    },
    NS: _NS$y,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A curated collection of metadata about resources (e.g., datasets and data services in the context of a data catalog).
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ Catalog: _NS$y("Catalog"),
    /**
     * A collection of data, published or curated by a single source, and available for access or download in one or more representations.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ Dataset: _NS$y("Dataset"),
    /**
     * Resource published or curated by a single agent.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ Resource: _NS$y("Resource"),
    /**
     * A record in a data catalog, describing the registration of a single dataset or data service.
     *
     * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [9] labels in languages [ar, cs, da, el, en, es, fr, it, ja], but [8] comments in languages [cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ CatalogRecord: _NS$y("CatalogRecord"),
    /**
     * A site or end-point providing operations related to the discovery of, access to, or processing functions on, data or related resources.
     *
     * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [4] labels in languages [da, en, es, it], but [5] comments in languages [cs, da, en, es, it].
     */ DataService: _NS$y("DataService"),
    /**
     * A specific representation of a dataset. A dataset might be available in multiple serializations that may differ in various ways, including natural language, media-type or format, schematic organization, temporal and spatial resolution, level of detail or profiles (which might specify any or all of the above).
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ Distribution: _NS$y("Distribution"),
    /**
     * An association class for attaching additional information to a relationship between DCAT Resources.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ Relationship: _NS$y("Relationship"),
    /**
     * A role is the function of a resource or agent with respect to another resource, in the context of resource attribution or resource relationships.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     *
     * See also:
     *  - http://www.w3.org/ns/dcat#hadRole
     */ Role: _NS$y("Role"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The function of an entity or agent with respect to another entity or resource.
     *
     * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [4] labels in languages [cs, da, en, it], but [5] comments in languages [cs, da, en, es, it].
     */ hadRole: _NS$y("hadRole"),
    /**
     * A site or end-point that gives access to the distribution of the dataset.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ accessService: _NS$y("accessService"),
    /**
     * A URL of a resource that gives access to a distribution of the dataset. E.g. landing page, feed, SPARQL endpoint. Use for all cases except a simple download link, in which case downloadURL is preferred.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ accessURL: _NS$y("accessURL"),
    /**
     * The root location or primary endpoint of the service (a web-resolvable IRI).
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ endpointURL: _NS$y("endpointURL"),
    /**
     * The geographic bounding box of a resource.
     *
     * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ bbox: _NS$y("bbox"),
    /**
     * The size of a distribution in bytes.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ byteSize: _NS$y("byteSize"),
    /**
     * A catalog whose contents are of interest in the context of this catalog.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ catalog: _NS$y("catalog"),
    /**
     * The geographic center (centroid) of a resource.
     *
     * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ centroid: _NS$y("centroid"),
    /**
     * The compression format of the distribution in which the data is contained in a compressed form, e.g. to reduce the size of the downloadable file.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     *
     * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
     */ compressFormat: _NS$y("compressFormat"),
    /**
     * Relevant contact information for the catalogued resource. Use of vCard is recommended.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ contactPoint: _NS$y("contactPoint"),
    /**
     * A collection of data that is listed in the catalog.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ dataset: _NS$y("dataset"),
    /**
     * An available distribution of the dataset.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ distribution: _NS$y("distribution"),
    /**
     * The URL of the downloadable file in a given format. E.g. CSV file or RDF file. The format is indicated by the distribution's dct:format and/or dcat:mediaType.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ downloadURL: _NS$y("downloadURL"),
    /**
     * The end of the period.
     *
     * This term has [5] labels (in languages [cs, da, en, es, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ endDate: _NS$y("endDate"),
    /**
     * A description of the service end-point, including its operations, parameters etc.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ endpointDescription: _NS$y("endpointDescription"),
    /**
     * A keyword or tag describing a resource.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ keyword: _NS$y("keyword"),
    /**
     * A Web page that can be navigated to in a Web browser to gain access to the catalog, a dataset, its distributions and/or additional information.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ landingPage: _NS$y("landingPage"),
    /**
     * The media type of the distribution as defined by IANA
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ mediaType: _NS$y("mediaType"),
    /**
     * The package format of the distribution in which one or more data files are grouped together, e.g. to enable a set of related files to be downloaded together.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     *
     * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
     */ packageFormat: _NS$y("packageFormat"),
    /**
     * Link to a description of a relationship with another resource.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ qualifiedRelation: _NS$y("qualifiedRelation"),
    /**
     * A record describing the registration of a single dataset or data service that is part of the catalog.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ record: _NS$y("record"),
    /**
     * A collection of data that this DataService can distribute.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ servesDataset: _NS$y("servesDataset"),
    /**
     * A site or endpoint that is listed in the catalog.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ service: _NS$y("service"),
    /**
     * minimum spatial separation resolvable in a dataset, measured in meters.
     *
     * This term has [6] labels and comments, in the languages [cs, da, en-GB, en-US, es, it].
     */ spatialResolutionInMeters: _NS$y("spatialResolutionInMeters"),
    /**
     * The start of the period
     *
     * This term has [4] labels (in languages [cs, da, en, it]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ startDate: _NS$y("startDate"),
    /**
     * minimum time period resolvable in a dataset.
     *
     * This term has [5] labels and comments, in the languages [cs, da, en, es, it].
     */ temporalResolution: _NS$y("temporalResolution"),
    /**
     * A main category of the resource. A resource can have multiple themes.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ theme: _NS$y("theme"),
    /**
     * The knowledge organization system (KOS) used to classify catalog's datasets.
     *
     * This term has [9] labels and comments, in the languages [ar, cs, da, el, en, es, fr, it, ja].
     *
     * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
     */ themeTaxonomy: _NS$y("themeTaxonomy")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Dublin Core Terms - for describing resources
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$x = "http://purl.org/dc/terms/";
function _NS$x(localName) {
    return _NAMESPACE$x + localName;
}
/**
 * [Generator provided] - Dublin Core Terms - for describing resources
 */ var DCTERMS = {
    PREFIX: "dcterms",
    NAMESPACE: _NAMESPACE$x,
    PREFIX_AND_NAMESPACE: {
        "dcterms": "http://purl.org/dc/terms/"
    },
    NS: _NS$x,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A resource that acts or has the power to act.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Agent: _NS$x("Agent"),
    /**
     * A group of agents.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ AgentClass: _NS$x("AgentClass"),
    /**
     * A book, article, or other documentary resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ BibliographicResource: _NS$x("BibliographicResource"),
    /**
     * A digital resource format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ FileFormat: _NS$x("FileFormat"),
    /**
     * A file format or physical medium.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ MediaType: _NS$x("MediaType"),
    /**
     * A media type or extent.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ MediaTypeOrExtent: _NS$x("MediaTypeOrExtent"),
    /**
     * A rate at which something recurs.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Frequency: _NS$x("Frequency"),
    /**
     * The extent or range of judicial, law enforcement, or other authority.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Jurisdiction: _NS$x("Jurisdiction"),
    /**
     * A location, period of time, or jurisdiction.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ LocationPeriodOrJurisdiction: _NS$x("LocationPeriodOrJurisdiction"),
    /**
     * A legal document giving official permission to do something with a Resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ LicenseDocument: _NS$x("LicenseDocument"),
    /**
     * A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something with a resource, or a statement about access rights.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ RightsStatement: _NS$x("RightsStatement"),
    /**
     * A system of signs, symbols, sounds, gestures, or rules used in communication.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ LinguisticSystem: _NS$x("LinguisticSystem"),
    /**
     * A spatial region or named place.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Location: _NS$x("Location"),
    /**
     * A method by which resources are added to a collection.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ MethodOfAccrual: _NS$x("MethodOfAccrual"),
    /**
     * A process that is used to engender knowledge, attitudes, and skills.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ MethodOfInstruction: _NS$x("MethodOfInstruction"),
    /**
     * An interval of time that is named or defined by its start and end dates.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ PeriodOfTime: _NS$x("PeriodOfTime"),
    /**
     * A physical material or carrier.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ PhysicalMedium: _NS$x("PhysicalMedium"),
    /**
     * A material thing.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ PhysicalResource: _NS$x("PhysicalResource"),
    /**
     * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Policy: _NS$x("Policy"),
    /**
     * A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ ProvenanceStatement: _NS$x("ProvenanceStatement"),
    /**
     * A dimension or extent, or a time taken to play or execute.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ SizeOrDuration: _NS$x("SizeOrDuration"),
    /**
     * A basis for comparison; a reference point against which other things can be evaluated.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Standard: _NS$x("Standard"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Date on which the resource was changed.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ modified: _NS$x("modified"),
    /**
     * An entity responsible for making the resource available.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ publisher: _NS$x("publisher"),
    /**
     * A name given to the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ title: _NS$x("title"),
    /**
     * A related resource that is a version, edition, or adaptation of the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ hasVersion: _NS$x("hasVersion"),
    /**
     * Date of formal issuance (e.g., publication) of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ issued: _NS$x("issued"),
    /**
     * A point or period of time associated with an event in the lifecycle of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ date: _NS$x("date"),
    /**
     * An account of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ description: _NS$x("description"),
    /**
     * A related resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ relation: _NS$x("relation"),
    /**
     * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://dublincore.org/documents/dcmi-box/
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Box: _NS$x("Box"),
    /**
     * The set of codes listed in ISO 3166-1 for the representation of names of countries.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ ISO3166: _NS$x("ISO3166"),
    /**
     * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://lcweb.loc.gov/standards/iso639-2/langhome.html
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ ISO639_2: _NS$x("ISO639-2"),
    /**
     * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.sil.org/iso639-3/
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ ISO639_3: _NS$x("ISO639-3"),
    /**
     * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://dublincore.org/documents/dcmi-period/
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Period: _NS$x("Period"),
    /**
     * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://dublincore.org/documents/dcmi-point/
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ Point: _NS$x("Point"),
    /**
     * The set of tags, constructed according to RFC 1766, for the identification of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.ietf.org/rfc/rfc1766.txt
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ RFC1766: _NS$x("RFC1766"),
    /**
     * The set of tags constructed according to RFC 3066 for the identification of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.ietf.org/rfc/rfc3066.txt
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ RFC3066: _NS$x("RFC3066"),
    /**
     * The set of tags constructed according to RFC 4646 for the identification of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.ietf.org/rfc/rfc4646.txt
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ RFC4646: _NS$x("RFC4646"),
    /**
     * The set of tags constructed according to RFC 5646 for the identification of languages.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.ietf.org/rfc/rfc5646.txt
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ RFC5646: _NS$x("RFC5646"),
    /**
     * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.ietf.org/rfc/rfc3986.txt
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ URI: _NS$x("URI"),
    /**
     * The set of dates and times constructed according to the W3C Date and Time Formats Specification.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.w3.org/TR/NOTE-datetime
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ W3CDTF: _NS$x("W3CDTF"),
    /**
     * A summary of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ abstract: _NS$x("abstract"),
    /**
     * Information about who can access the resource or an indication of its security status.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ accessRights: _NS$x("accessRights"),
    /**
     * Information about rights held in and over the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ rights: _NS$x("rights"),
    /**
     * The method by which items are added to a collection.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ accrualMethod: _NS$x("accrualMethod"),
    /**
     * The frequency with which items are added to a collection.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ accrualPeriodicity: _NS$x("accrualPeriodicity"),
    /**
     * The policy governing the addition of items to a collection.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ accrualPolicy: _NS$x("accrualPolicy"),
    /**
     * An alternative name for the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ alternative: _NS$x("alternative"),
    /**
     * A class of entity for whom the resource is intended or useful.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ audience: _NS$x("audience"),
    /**
     * Date (often a range) that the resource became or will become available.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ available: _NS$x("available"),
    /**
     * A bibliographic reference for the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ bibliographicCitation: _NS$x("bibliographicCitation"),
    /**
     * An unambiguous reference to the resource within a given context.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ identifier: _NS$x("identifier"),
    /**
     * An established standard to which the described resource conforms.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ conformsTo: _NS$x("conformsTo"),
    /**
     * An entity responsible for making contributions to the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ contributor: _NS$x("contributor"),
    /**
     * The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ coverage: _NS$x("coverage"),
    /**
     * Date of creation of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ created: _NS$x("created"),
    /**
     * An entity primarily responsible for making the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ creator: _NS$x("creator"),
    /**
     * Date of acceptance of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ dateAccepted: _NS$x("dateAccepted"),
    /**
     * Date of copyright.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ dateCopyrighted: _NS$x("dateCopyrighted"),
    /**
     * Date of submission of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ dateSubmitted: _NS$x("dateSubmitted"),
    /**
     * A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ educationLevel: _NS$x("educationLevel"),
    /**
     * The size or duration of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ extent: _NS$x("extent"),
    /**
     * The file format, physical medium, or dimensions of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ format: _NS$x("format"),
    /**
     * A related resource that is substantially the same as the pre-existing described resource, but in another format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ hasFormat: _NS$x("hasFormat"),
    /**
     * A related resource that is included either physically or logically in the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ hasPart: _NS$x("hasPart"),
    /**
     * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ instructionalMethod: _NS$x("instructionalMethod"),
    /**
     * A related resource that is substantially the same as the described resource, but in another format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isFormatOf: _NS$x("isFormatOf"),
    /**
     * A related resource in which the described resource is physically or logically included.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isPartOf: _NS$x("isPartOf"),
    /**
     * A related resource that references, cites, or otherwise points to the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isReferencedBy: _NS$x("isReferencedBy"),
    /**
     * A related resource that supplants, displaces, or supersedes the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isReplacedBy: _NS$x("isReplacedBy"),
    /**
     * A related resource that requires the described resource to support its function, delivery, or coherence.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isRequiredBy: _NS$x("isRequiredBy"),
    /**
     * A related resource of which the described resource is a version, edition, or adaptation.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ isVersionOf: _NS$x("isVersionOf"),
    /**
     * A language of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ language: _NS$x("language"),
    /**
     * A legal document giving official permission to do something with the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ license: _NS$x("license"),
    /**
     * An entity that mediates access to the resource and for whom the resource is intended or useful.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ mediator: _NS$x("mediator"),
    /**
     * The material or physical carrier of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ medium: _NS$x("medium"),
    /**
     * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ provenance: _NS$x("provenance"),
    /**
     * A related resource that is referenced, cited, or otherwise pointed to by the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ references: _NS$x("references"),
    /**
     * A related resource that is supplanted, displaced, or superseded by the described resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ replaces: _NS$x("replaces"),
    /**
     * A related resource that is required by the described resource to support its function, delivery, or coherence.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ requires: _NS$x("requires"),
    /**
     * A person or organization owning or managing rights over the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ rightsHolder: _NS$x("rightsHolder"),
    /**
     * A related resource from which the described resource is derived.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ source: _NS$x("source"),
    /**
     * Spatial characteristics of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ spatial: _NS$x("spatial"),
    /**
     * The topic of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ subject: _NS$x("subject"),
    /**
     * A list of subunits of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ tableOfContents: _NS$x("tableOfContents"),
    /**
     * Temporal characteristics of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ temporal: _NS$x("temporal"),
    /**
     * The nature or genre of the resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ type: _NS$x("type"),
    /**
     * Date (often a range) of validity of a resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/dc/terms/
     */ valid: _NS$x("valid")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Description of a Project (DOAP) vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$w = "http://usefulinc.com/ns/doap#";
function _NS$w(localName) {
    return _NAMESPACE$w + localName;
}
/**
 * [Generator provided] - Description of a Project (DOAP) vocabulary
 */ var DOAP = {
    PREFIX: "doap",
    NAMESPACE: _NAMESPACE$w,
    PREFIX_AND_NAMESPACE: {
        "doap": "http://usefulinc.com/ns/doap#"
    },
    NS: _NS$w,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ Project: _NS$w("Project"),
    /**
     * Version information of a project release.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ Version: _NS$w("Version"),
    /**
     * A specification of a system's aspects, technical or otherwise.
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ Specification: _NS$w("Specification"),
    /**
     * Source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ Repository: _NS$w("Repository"),
    /**
     * Subversion source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ SVNRepository: _NS$w("SVNRepository"),
    /**
     * Git source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ GitRepository: _NS$w("GitRepository"),
    /**
     * BitKeeper source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ BKRepository: _NS$w("BKRepository"),
    /**
     * CVS source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ CVSRepository: _NS$w("CVSRepository"),
    /**
     * GNU Arch source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ ArchRepository: _NS$w("ArchRepository"),
    /**
     * Bazaar source code branch.
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ BazaarBranch: _NS$w("BazaarBranch"),
    /**
     * Git source code branch.
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ GitBranch: _NS$w("GitBranch"),
    /**
     * Mercurial source code repository.
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ HgRepository: _NS$w("HgRepository"),
    /**
     * darcs source code repository.
     *
     * This term has [4] labels and comments, in the languages [en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ DarcsRepository: _NS$w("DarcsRepository"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A name of something.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ name: _NS$w("name"),
    /**
     * URL of a project's homepage,
          associated with exactly one project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ homepage: _NS$w("homepage"),
    /**
     * URL of a project's past homepage,
          associated with exactly one project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ old_homepage: _NS$w("old-homepage"),
    /**
     * Date when something was created, in YYYY-MM-DD form. e.g. 2004-04-05
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ created: _NS$w("created"),
    /**
     * Short (8 or 9 words) plain text description of a project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ shortdesc: _NS$w("shortdesc"),
    /**
     * Plain text description of a project, of 2-4 sentences in length.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ description: _NS$w("description"),
    /**
     * A project release.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ release: _NS$w("release"),
    /**
     * Mailing list home page or email address.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ mailing_list: _NS$w("mailing-list"),
    /**
     * A forum or community that supports this project.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ support_forum: _NS$w("support-forum"),
    /**
     * A forum or community for developers of this project.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ developer_forum: _NS$w("developer-forum"),
    /**
     * A category of project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ category: _NS$w("category"),
    /**
     * The URI of an RDF description of the license the software is distributed under. E.g. a SPDX reference
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ license: _NS$w("license"),
    /**
     * Source code repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ repository: _NS$w("repository"),
    /**
     * The project that uses a repository.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ repositoryOf: _NS$w("repositoryOf"),
    /**
     * Repository for anonymous access.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ anon_root: _NS$w("anon-root"),
    /**
     * Web browser interface to repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ browse: _NS$w("browse"),
    /**
     * Module name of a Subversion, CVS, BitKeeper or Arch repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ module: _NS$w("module"),
    /**
     * Location of a repository.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ location: _NS$w("location"),
    /**
     * Web page from which the project software can be downloaded.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ download_page: _NS$w("download-page"),
    /**
     * Mirror of software download web page.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ download_mirror: _NS$w("download-mirror"),
    /**
     * Revision identifier of a software release.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ revision: _NS$w("revision"),
    /**
     * URI of download associated with this release.
     *
     * This term has [3] labels and comments, in the languages [cs, en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ file_release: _NS$w("file-release"),
    /**
     * URL of Wiki for collaborative discussion of project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ wiki: _NS$w("wiki"),
    /**
     * Bug tracker for a project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ bug_database: _NS$w("bug-database"),
    /**
     * Web page with screenshots of project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ screenshots: _NS$w("screenshots"),
    /**
     * Maintainer of a project, a project leader.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ maintainer: _NS$w("maintainer"),
    /**
     * Developer of software for the project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ developer: _NS$w("developer"),
    /**
     * Contributor of documentation to the project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ documenter: _NS$w("documenter"),
    /**
     * Contributor of translations to the project.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ translator: _NS$w("translator"),
    /**
     * A tester or other quality control contributor.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ tester: _NS$w("tester"),
    /**
     * Project contributor.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ helper: _NS$w("helper"),
    /**
     * Programming language a project is implemented in or intended for use with.
     *
     * This term has [6] labels and comments, in the languages [cs, de, en, es, fr, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ programming_language: _NS$w("programming-language"),
    /**
     * Operating system that a project is limited to.  Omit this property if the project is not OS-specific.
     *
     * This term provides multilingual descriptions, but has a mismatch between its labels and comments, with [6] labels in languages [cs, de, en, es, fr, pt], but [5] comments in languages [cs, de, en, es, fr].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ os: _NS$w("os"),
    /**
     * A specification that a project implements. Could be a standard, API or legally defined level of conformance.
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ implements: _NS$w("implements"),
    /**
     * The URI of a web service endpoint where software as a service may be accessed
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ service_endpoint: _NS$w("service-endpoint"),
    /**
     * ISO language code a project has been translated into
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ language: _NS$w("language"),
    /**
     * Vendor organization: commercial, free or otherwise
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ vendor: _NS$w("vendor"),
    /**
     * Indicator of software platform (non-OS specific), e.g. Java, Firefox, ECMA CLR
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ platform: _NS$w("platform"),
    /**
     * Description of target user base
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ audience: _NS$w("audience"),
    /**
     * URI of a blog related to a project
     *
     * This term has [2] labels and comments, in the languages [en, pt].
     *
     * Defined by the vocabulary: http://usefulinc.com/ns/doap#
     */ blog: _NS$w("blog")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Evaluation and Report Language (EARL)
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$v = "http://www.w3.org/ns/earl#";
function _NS$v(localName) {
    return _NAMESPACE$v + localName;
}
/**
 * [Generator provided] - Evaluation and Report Language (EARL)
 */ var EARL = {
    PREFIX: "earl",
    NAMESPACE: _NAMESPACE$v,
    PREFIX_AND_NAMESPACE: {
        "earl": "http://www.w3.org/ns/earl#"
    },
    NS: _NS$v,
    // *****************
    // All the Classes.
    // *****************
    /**
     * a statement that embodies the results of a test
     *
     * This term provides descriptions only in English.
     */ Assertion: _NS$v("Assertion"),
    /**
     * an entity such as a person, a software tool, an organization, or any other grouping that carries out a test collectively
     *
     * This term provides descriptions only in English.
     */ Assertor: _NS$v("Assertor"),
    /**
     * the class of things that have been tested against some test criterion
     *
     * This term provides descriptions only in English.
     */ TestSubject: _NS$v("TestSubject"),
    /**
     * a testable statement, usually one that can be passed or failed
     *
     * This term provides descriptions only in English.
     */ TestCriterion: _NS$v("TestCriterion"),
    /**
     * a higher-level requirement that is tested by executing one or more sub-tests
     *
     * This term provides descriptions only in English.
     */ TestRequirement: _NS$v("TestRequirement"),
    /**
     * an atomic test, usually one that is a partial test for a requirement
     *
     * This term provides descriptions only in English.
     */ TestCase: _NS$v("TestCase"),
    /**
     * the actual result of performing the test
     *
     * This term provides descriptions only in English.
     */ TestResult: _NS$v("TestResult"),
    /**
     * describes how a test was carried out
     *
     * This term provides descriptions only in English.
     */ TestMode: _NS$v("TestMode"),
    /**
     * a discrete value that describes a resulting condition from carrying out the test
     *
     * This term provides descriptions only in English.
     */ OutcomeValue: _NS$v("OutcomeValue"),
    /**
     * the class of outcomes to denote passing a test
     *
     * This term provides descriptions only in English.
     */ Pass: _NS$v("Pass"),
    /**
     * the class of outcomes to denote failing a test
     *
     * This term provides descriptions only in English.
     */ Fail: _NS$v("Fail"),
    /**
     * the class of outcomes to denote an undetermined outcome
     *
     * This term provides descriptions only in English.
     */ CannotTell: _NS$v("CannotTell"),
    /**
     * the class of outcomes to denote the test is not applicable
     *
     * This term provides descriptions only in English.
     */ NotApplicable: _NS$v("NotApplicable"),
    /**
     * the class of outcomes to denote the test has not been carried out
     *
     * This term provides descriptions only in English.
     */ NotTested: _NS$v("NotTested"),
    /**
     * any piece of software such as an authoring tool, browser, or evaluation tool
     *
     * This term provides descriptions only in English.
     */ Software: _NS$v("Software"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * assertor of an assertion
     *
     * This term provides descriptions only in English.
     */ assertedBy: _NS$v("assertedBy"),
    /**
     * test subject of an assertion
     *
     * This term provides descriptions only in English.
     */ subject: _NS$v("subject"),
    /**
     * test criterion of an assertion
     *
     * This term provides descriptions only in English.
     */ test: _NS$v("test"),
    /**
     * result of an assertion
     *
     * This term provides descriptions only in English.
     */ result: _NS$v("result"),
    /**
     * mode in which the test was performed
     *
     * This term provides descriptions only in English.
     */ mode: _NS$v("mode"),
    /**
     * assertor that is primarily responsible for performing the test
     *
     * This term provides descriptions only in English.
     */ mainAssertor: _NS$v("mainAssertor"),
    /**
     * outcome of performing the test
     *
     * This term provides descriptions only in English.
     */ outcome: _NS$v("outcome"),
    /**
     * location within a test subject that are most relevant to a test result
     *
     * This term provides descriptions only in English.
     */ pointer: _NS$v("pointer"),
    /**
     * additional warnings or error messages in a human-readable form
     *
     * This term provides descriptions only in English.
     */ info: _NS$v("info")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Friend of a friend, v0.99
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$u = "http://xmlns.com/foaf/0.1/";
function _NS$u(localName) {
    return _NAMESPACE$u + localName;
}
/**
 * [Generator provided] - Friend of a friend, v0.99
 */ var FOAF = {
    PREFIX: "foaf",
    NAMESPACE: _NAMESPACE$u,
    PREFIX_AND_NAMESPACE: {
        "foaf": "http://xmlns.com/foaf/0.1/"
    },
    NS: _NS$u,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An agent (eg. person, group, software or physical artifact).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Agent: _NS$u("Agent"),
    /**
     * A document.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Document: _NS$u("Document"),
    /**
     * An organization.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Organization: _NS$u("Organization"),
    /**
     * A project (a collective endeavour of some kind).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Project: _NS$u("Project"),
    /**
     * A person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Person: _NS$u("Person"),
    /**
     * A class of Agents.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Group: _NS$u("Group"),
    /**
     * An image.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ Image: _NS$u("Image"),
    /**
     * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ LabelProperty: _NS$u("LabelProperty"),
    /**
     * An online account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ OnlineAccount: _NS$u("OnlineAccount"),
    /**
     * An online chat account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ OnlineChatAccount: _NS$u("OnlineChatAccount"),
    /**
     * An online e-commerce account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ OnlineEcommerceAccount: _NS$u("OnlineEcommerceAccount"),
    /**
     * An online gaming account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ OnlineGamingAccount: _NS$u("OnlineGamingAccount"),
    /**
     * A personal profile RDF document.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ PersonalProfileDocument: _NS$u("PersonalProfileDocument"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates an account held by this agent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ account: _NS$u("account"),
    /**
     * Indicates the name (identifier) associated with this online account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ accountName: _NS$u("accountName"),
    /**
     * Indicates a homepage of the service provide for this online account.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ accountServiceHomepage: _NS$u("accountServiceHomepage"),
    /**
     * The age in years of some agent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ age: _NS$u("age"),
    /**
     * An AIM chat ID
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ aimChatID: _NS$u("aimChatID"),
    /**
     * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ nick: _NS$u("nick"),
    /**
     * A location that something is based near, for some broadly human notion of near.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ based_near: _NS$u("based_near"),
    /**
     * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ birthday: _NS$u("birthday"),
    /**
     * A current project this person works on.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ currentProject: _NS$u("currentProject"),
    /**
     * A depiction of some thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ depiction: _NS$u("depiction"),
    /**
     * A thing depicted in this representation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ depicts: _NS$u("depicts"),
    /**
     * A checksum for the DNA of some thing. Joke.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ dnaChecksum: _NS$u("dnaChecksum"),
    /**
     * The family name of some person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ familyName: _NS$u("familyName"),
    /**
     * The family name of some person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ family_name: _NS$u("family_name"),
    /**
     * The first name of a person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ firstName: _NS$u("firstName"),
    /**
     * The underlying or 'focal' entity associated with some SKOS-described concept.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ focus: _NS$u("focus"),
    /**
     * An organization funding a project or person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ fundedBy: _NS$u("fundedBy"),
    /**
     * A textual geekcode for this person, see http://www.geekcode.com/geek.html
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ geekcode: _NS$u("geekcode"),
    /**
     * The gender of this Agent (typically but not necessarily 'male' or 'female').
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ gender: _NS$u("gender"),
    /**
     * The given name of some person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ givenName: _NS$u("givenName"),
    /**
     * The given name of some person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ givenname: _NS$u("givenname"),
    /**
     * Indicates an account held by this agent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ holdsAccount: _NS$u("holdsAccount"),
    /**
     * A homepage for some thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ homepage: _NS$u("homepage"),
    /**
     * A page or document about this thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ page: _NS$u("page"),
    /**
     * A document that this thing is the primary topic of.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ isPrimaryTopicOf: _NS$u("isPrimaryTopicOf"),
    /**
     * A topic of some page or document.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ topic: _NS$u("topic"),
    /**
     * The primary topic of some page or document.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ primaryTopic: _NS$u("primaryTopic"),
    /**
     * An ICQ chat ID
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ icqChatID: _NS$u("icqChatID"),
    /**
     * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ img: _NS$u("img"),
    /**
     * A page about a topic of interest to this person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ interest: _NS$u("interest"),
    /**
     * A jabber ID for something.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ jabberID: _NS$u("jabberID"),
    /**
     * A person known by this person (indicating some level of reciprocated interaction between the parties).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ knows: _NS$u("knows"),
    /**
     * The last name of a person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ lastName: _NS$u("lastName"),
    /**
     * A logo representing some thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ logo: _NS$u("logo"),
    /**
     * Something that was made by this agent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ made: _NS$u("made"),
    /**
     * An agent that made this thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ maker: _NS$u("maker"),
    /**
     * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ mbox: _NS$u("mbox"),
    /**
     * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ mbox_sha1sum: _NS$u("mbox_sha1sum"),
    /**
     * Indicates a member of a Group
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ member: _NS$u("member"),
    /**
     * Indicates the class of individuals that are a member of a Group
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ membershipClass: _NS$u("membershipClass"),
    /**
     * An MSN chat ID
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ msnChatID: _NS$u("msnChatID"),
    /**
     * A Myers Briggs (MBTI) personality classification.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ myersBriggs: _NS$u("myersBriggs"),
    /**
     * A name for some thing.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ name: _NS$u("name"),
    /**
     * An OpenID for an Agent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ openid: _NS$u("openid"),
    /**
     * A project this person has previously worked on.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ pastProject: _NS$u("pastProject"),
    /**
     * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ phone: _NS$u("phone"),
    /**
     * A .plan comment, in the tradition of finger and '.plan' files.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ plan: _NS$u("plan"),
    /**
     * A link to the publications of this person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ publications: _NS$u("publications"),
    /**
     * A homepage of a school attended by the person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ schoolHomepage: _NS$u("schoolHomepage"),
    /**
     * A sha1sum hash, in hex.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ sha1: _NS$u("sha1"),
    /**
     * A Skype ID
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ skypeID: _NS$u("skypeID"),
    /**
     * A string expressing what the user is happy for the general public (normally) to know about their current activity.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ status: _NS$u("status"),
    /**
     * The surname of some person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ surname: _NS$u("surname"),
    /**
     * A theme.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ theme: _NS$u("theme"),
    /**
     * A derived thumbnail image.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ thumbnail: _NS$u("thumbnail"),
    /**
     * A tipjar document for this agent, describing means for payment and reward.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ tipjar: _NS$u("tipjar"),
    /**
     * Title (Mr, Mrs, Ms, Dr. etc)
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ title: _NS$u("title"),
    /**
     * A thing of interest to this person.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ topic_interest: _NS$u("topic_interest"),
    /**
     * A weblog of some thing (whether person, group, company etc.).
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ weblog: _NS$u("weblog"),
    /**
     * A work info homepage of some person; a page about their work for some organization.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ workInfoHomepage: _NS$u("workInfoHomepage"),
    /**
     * A workplace homepage of some person; the homepage of an organization they work for.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ workplaceHomepage: _NS$u("workplaceHomepage"),
    /**
     * A Yahoo chat ID
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
     */ yahooChatID: _NS$u("yahooChatID")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A namespace for describing HTTP messages (http://www.w3.org/Protocols/rfc2616/rfc2616.html)
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$t = "http://www.w3.org/2011/http#";
function _NS$t(localName) {
    return _NAMESPACE$t + localName;
}
/**
 * A namespace for describing HTTP messages (http://www.w3.org/Protocols/rfc2616/rfc2616.html)
 */ var HTTP = {
    PREFIX: "http",
    NAMESPACE: _NAMESPACE$t,
    PREFIX_AND_NAMESPACE: {
        "http": "http://www.w3.org/2011/http#"
    },
    NS: _NS$t,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A connection used for HTTP transfer.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ Connection: _NS$t("Connection"),
    /**
     * An entity header in an HTTP message.
     *
     * This term provides descriptions only in English.
     */ EntityHeader: _NS$t("EntityHeader"),
    /**
     * A header in an HTTP message.
     *
     * This term provides descriptions only in English.
     */ MessageHeader: _NS$t("MessageHeader"),
    /**
     * A general header in an HTTP message.
     *
     * This term provides descriptions only in English.
     */ GeneralHeader: _NS$t("GeneralHeader"),
    /**
     * A part of a deconstructed header value.
     *
     * This term provides descriptions only in English.
     */ HeaderElement: _NS$t("HeaderElement"),
    /**
     * A header name.
     *
     * This term provides descriptions only in English.
     */ HeaderName: _NS$t("HeaderName"),
    /**
     * An HTTP message.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ Message: _NS$t("Message"),
    /**
     * The HTTP method used for the request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ Method: _NS$t("Method"),
    /**
     * A parameter for a part of a header value.
     *
     * This term provides descriptions only in English.
     */ Parameter: _NS$t("Parameter"),
    /**
     * An HTTP request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ Request: _NS$t("Request"),
    /**
     * A header in an HTTP request message.
     *
     * This term provides descriptions only in English.
     */ RequestHeader: _NS$t("RequestHeader"),
    /**
     * An HTTP response.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ Response: _NS$t("Response"),
    /**
     * A header in an HTTP response message.
     *
     * This term provides descriptions only in English.
     */ ResponseHeader: _NS$t("ResponseHeader"),
    /**
     * The status code of an HTTP response.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ StatusCode: _NS$t("StatusCode"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The absolute request URI.
     *
     * This term provides descriptions only in English.
     */ absoluteURI: _NS$t("absoluteURI"),
    /**
     * The request URI of an HTTP request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ requestURI: _NS$t("requestURI"),
    /**
     * The absolute path sort of request URI.
     *
     * This term provides descriptions only in English.
     */ absolutePath: _NS$t("absolutePath"),
    /**
     * The authority sort of request URI.
     *
     * This term provides descriptions only in English.
     */ authority: _NS$t("authority"),
    /**
     * The entity body of an HTTP message.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ body: _NS$t("body"),
    /**
     * The authority of a connection used for the HTTP transfer.
     *
     * This term provides descriptions only in English.
     */ connectionAuthority: _NS$t("connectionAuthority"),
    /**
     * The name of a header element.
     *
     * This term provides descriptions only in English.
     */ elementName: _NS$t("elementName"),
    /**
     * The value of a header element.
     *
     * This term provides descriptions only in English.
     */ elementValue: _NS$t("elementValue"),
    /**
     * The name of an HTTP header field.
     *
     * This term provides descriptions only in English.
     */ fieldName: _NS$t("fieldName"),
    /**
     * The value of an HTTP header field.
     *
     * This term provides descriptions only in English.
     */ fieldValue: _NS$t("fieldValue"),
    /**
     * The deconstructed parts of an HTTP header value.
     *
     * This term provides descriptions only in English.
     */ headerElements: _NS$t("headerElements"),
    /**
     * The name of an HTTP header.
     *
     * This term provides descriptions only in English.
     */ hdrName: _NS$t("hdrName"),
    /**
     * The headers in an HTTP message.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ headers: _NS$t("headers"),
    /**
     * The HTTP version of an HTTP message.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ httpVersion: _NS$t("httpVersion"),
    /**
     * The HTTP method used for the HTTP request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ mthd: _NS$t("mthd"),
    /**
     * The HTTP method name used for the HTTP request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ methodName: _NS$t("methodName"),
    /**
     * The name of a parameter in a part of a deconstructed HTTP header value.
     *
     * This term provides descriptions only in English.
     */ paramName: _NS$t("paramName"),
    /**
     * The parameters in a part of a deconstructed HTTP header value.
     *
     * This term provides descriptions only in English.
     */ params: _NS$t("params"),
    /**
     * The value of a parameter in a part of a deconstructed HTTP header value.
     *
     * This term provides descriptions only in English.
     */ paramValue: _NS$t("paramValue"),
    /**
     * The reason phrase (status text) of an HTTP response.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ reasonPhrase: _NS$t("reasonPhrase"),
    /**
     * The HTTP requests made via a connection.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ requests: _NS$t("requests"),
    /**
     * The HTTP response sent in answer to an HTTP request.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ resp: _NS$t("resp"),
    /**
     * The status code of an HTTP response.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ sc: _NS$t("sc"),
    /**
     * The status code number.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ statusCodeNumber: _NS$t("statusCodeNumber"),
    /**
     * The status code value of an HTTP response.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
     */ statusCodeValue: _NS$t("statusCodeValue")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary is a one deemed to contain all HTTP headers.
The rdflib.js library uses it as for relationships between an HTTP response
and the  content (value) of the HTTP header in that response.     The ontology
is deemed to contain one property for every HTTP header, standard or not.
The property in this ontology has a localname which is the header field converted
to lower case.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$s = "http://www.w3.org/2007/ont/httph#";
function _NS$s(localName) {
    return _NAMESPACE$s + localName;
}
/**
 * This vocabulary is a one deemed to contain all HTTP headers.
The rdflib.js library uses it as for relationships between an HTTP response
and the  content (value) of the HTTP header in that response.     The ontology
is deemed to contain one property for every HTTP header, standard or not.
The property in this ontology has a localname which is the header field converted
to lower case.
 */ var HTTPH_INRUPT = {
    PREFIX: "httph-inrupt",
    NAMESPACE: _NAMESPACE$s,
    PREFIX_AND_NAMESPACE: {
        "httph-inrupt": "http://www.w3.org/2007/ont/httph#"
    },
    NS: _NS$s,
    // *******************
    // All the Properties.
    // *******************
    /**
     * See the HTTP specification
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2007/ont/httph
     */ content_type: _NS$s("content-type"),
    /**
     * See the HTTP specification
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
     */ accept: _NS$s("accept"),
    /**
     * See the HTTP specification
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
     */ accept_language: _NS$s("accept-language")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$r = "http://www.w3.org/ns/hydra/core#";
function _NS$r(localName) {
    return _NAMESPACE$r + localName;
}
/**
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */ var HYDRA = {
    PREFIX: "hydra",
    NAMESPACE: _NAMESPACE$r,
    PREFIX_AND_NAMESPACE: {
        "hydra": "http://www.w3.org/ns/hydra/core#"
    },
    NS: _NS$r,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class of Hydra classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ Class: _NS$r("Class"),
    /**
     * The class of properties representing links.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ Link: _NS$r("Link"),
    /**
     * The Hydra API documentation class
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ ApiDocumentation: _NS$r("ApiDocumentation"),
    /**
     * A templated link.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ TemplatedLink: _NS$r("TemplatedLink"),
    /**
     * A runtime error, used to report information beyond the returned status code.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ Error: _NS$r("Error"),
    /**
     * A collection holding references to a number of related resources.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ Collection: _NS$r("Collection"),
    /**
     * A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ PartialCollectionView: _NS$r("PartialCollectionView"),
    /**
     * Provides a base abstract for base Uri source for Iri template resolution.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ BaseUriSource: _NS$r("BaseUriSource"),
    /**
     * Specifies a possible either expected or returned header values
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ HeaderSpecification: _NS$r("HeaderSpecification"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A property
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ property: _NS$r("property"),
    /**
     * True if the property is required, false otherwise.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ required: _NS$r("required"),
    /**
     * True if the client can retrieve the property's value, false otherwise.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ readable: _NS$r("readable"),
    /**
     * True if the client can change the property's value, false otherwise.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ writable: _NS$r("writable"),
    /**
     * This property is left for compatibility purposes and hydra:writable should be used instead.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ writeable: _NS$r("writeable"),
    /**
     * The HTTP method.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ method: _NS$r("method"),
    /**
     * The HTTP status code. Please note it may happen this value will be different to actual status code received.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ statusCode: _NS$r("statusCode"),
    /**
     * A title, often used along with a description.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ title: _NS$r("title"),
    /**
     * A description.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ description: _NS$r("description"),
    /**
     * This predicate is left for compatibility purposes and hydra:memberAssertion should be used instead.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ manages: _NS$r("manages"),
    /**
     * The total number of items referenced by a collection.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ totalItems: _NS$r("totalItems"),
    /**
     * A property representing a freetext query.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ freetextQuery: _NS$r("freetextQuery"),
    /**
     * A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - http://www.w3.org/ns/hydra/core#Rfc6570Template
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ template: _NS$r("template"),
    /**
     * An IRI template as defined by RFC6570.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - http://tools.ietf.org/html/rfc6570
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ Rfc6570Template: _NS$r("Rfc6570Template"),
    /**
     * The representation format to use when expanding the IRI template.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ variableRepresentation: _NS$r("variableRepresentation"),
    /**
     * A variable-to-property mapping of the IRI template.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ mapping: _NS$r("mapping"),
    /**
     * An IRI template variable
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ variable: _NS$r("variable"),
    /**
     * relative Uri resolution
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ resolveRelativeUsing: _NS$r("resolveRelativeUsing"),
    /**
     * Instructs to skip N elements of the set.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ offset: _NS$r("offset"),
    /**
     * Instructs to limit set only to N elements.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ limit: _NS$r("limit"),
    /**
     * Instructs to provide a specific page of the collection at a given index.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ pageIndex: _NS$r("pageIndex"),
    /**
     * Instructs to provide a specific page reference of the collection.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ pageReference: _NS$r("pageReference"),
    /**
     * Name of the header returned by the operation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ returnsHeader: _NS$r("returnsHeader"),
    /**
     * Specification of the header expected by the operation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ expectsHeader: _NS$r("expectsHeader"),
    /**
     * Name of the header.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ headerName: _NS$r("headerName"),
    /**
     * Possible value of the header.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ possibleValue: _NS$r("possibleValue"),
    /**
     * Determines whether the provided set of header values is closed or not.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ closedSet: _NS$r("closedSet"),
    /**
     * Hint on what kind of extensions are in use.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
     */ extension: _NS$r("extension")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - iCal - a vocabulary for description of events and calendars
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$q = "https://www.w3.org/2002/12/cal/ical#";
function _NS$q(localName) {
    return _NAMESPACE$q + localName;
}
/**
 * [Generator provided] - iCal - a vocabulary for description of events and calendars
 */ var ICAL = {
    PREFIX: "ical",
    NAMESPACE: _NAMESPACE$q,
    PREFIX_AND_NAMESPACE: {
        "ical": "https://www.w3.org/2002/12/cal/ical#"
    },
    NS: _NS$q,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Provide a grouping of component properties that define an alarm.
     *
     * This term provides descriptions only with no explicit locale.
     */ Valarm: _NS$q("Valarm"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_DURATION: _NS$q("Value_DURATION"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_CAL_ADDRESS: _NS$q("Value_CAL-ADDRESS"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_DATE: _NS$q("Value_DATE"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_DATE_TIME: _NS$q("Value_DATE-TIME"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_PERIOD: _NS$q("Value_PERIOD"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Value_RECUR: _NS$q("Value_RECUR"),
    /**
     * Provide a grouping of component properties that describe an event.
     *
     * This term provides descriptions only with no explicit locale.
     */ Vevent: _NS$q("Vevent"),
    /**
     * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
     *
     * This term provides descriptions only with no explicit locale.
     */ Vfreebusy: _NS$q("Vfreebusy"),
    /**
     * Provide a grouping of component properties that describe a journal entry.
     *
     * This term provides descriptions only with no explicit locale.
     */ Vjournal: _NS$q("Vjournal"),
    /**
     * Provide a grouping of component properties that defines a time zone.
     *
     * This term provides descriptions only with no explicit locale.
     */ Vtimezone: _NS$q("Vtimezone"),
    /**
     * Provide a grouping of calendar properties that describe a to-do.
     *
     * This term provides descriptions only with no explicit locale.
     */ Vtodo: _NS$q("Vtodo"),
    // *******************
    // All the Properties.
    // *******************
    /**
     *
          default value type: URI
     *
     * This term provides descriptions only with no explicit locale.
     */ attach: _NS$q("attach"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ description: _NS$q("description"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ summary: _NS$q("summary"),
    /**
     *
          value type: DURATION
     *
     * This term provides descriptions only with no explicit locale.
     */ duration: _NS$q("duration"),
    /**
     *
          value type: CAL-ADDRESS
     *
     * This term provides descriptions only with no explicit locale.
     */ attendee: _NS$q("attendee"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ action: _NS$q("action"),
    /**
     *
          value type: INTEGER
     *
     * This term provides descriptions only with no explicit locale.
     */ repeat: _NS$q("repeat"),
    /**
     *
          default value type: DURATION
     *
     * This term provides descriptions only with no explicit locale.
     */ trigger: _NS$q("trigger"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ categories: _NS$q("categories"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ class: _NS$q("class"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ comment: _NS$q("comment"),
    /**
     * This property specifies information related to the global position for the activity specified by a calendar component.
     *
     * This term provides descriptions only with no explicit locale.
     */ geo: _NS$q("geo"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ location: _NS$q("location"),
    /**
     *
          value type: INTEGER
     *
     * This term provides descriptions only with no explicit locale.
     */ priority: _NS$q("priority"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ resources: _NS$q("resources"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ status: _NS$q("status"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ dtend: _NS$q("dtend"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ dtstart: _NS$q("dtstart"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ transp: _NS$q("transp"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ contact: _NS$q("contact"),
    /**
     *
          value type: CAL-ADDRESS
     *
     * This term provides descriptions only with no explicit locale.
     */ organizer: _NS$q("organizer"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ relatedTo: _NS$q("relatedTo"),
    /**
     *
          value type: URI
     *
     * This term provides descriptions only with no explicit locale.
     */ url: _NS$q("url"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ uid: _NS$q("uid"),
    /**
     *
          value type: RECUR
     *
     * This term provides descriptions only with no explicit locale.
     */ exrule: _NS$q("exrule"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ rdate: _NS$q("rdate"),
    /**
     *
          value type: RECUR
     *
     * This term provides descriptions only with no explicit locale.
     */ rrule: _NS$q("rrule"),
    /**
     *
          value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ created: _NS$q("created"),
    /**
     *
          value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ dtstamp: _NS$q("dtstamp"),
    /**
     *
          value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ lastModified: _NS$q("lastModified"),
    /**
     *
          value type: integer
     *
     * This term provides descriptions only with no explicit locale.
     */ sequence: _NS$q("sequence"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ requestStatus: _NS$q("requestStatus"),
    /**
     *
          value type: PERIOD
     *
     * This term provides descriptions only with no explicit locale.
     */ freebusy: _NS$q("freebusy"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ tzid: _NS$q("tzid"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ tzname: _NS$q("tzname"),
    /**
     *
          value type: UTC-OFFSET
     *
     * This term provides descriptions only with no explicit locale.
     */ tzoffsetfrom: _NS$q("tzoffsetfrom"),
    /**
     *
          value type: UTC-OFFSET
     *
     * This term provides descriptions only with no explicit locale.
     */ tzoffsetto: _NS$q("tzoffsetto"),
    /**
     *
          value type: URI
     *
     * This term provides descriptions only with no explicit locale.
     */ tzurl: _NS$q("tzurl"),
    /**
     *
          value type: INTEGER
     *
     * This term provides descriptions only with no explicit locale.
     */ percentComplete: _NS$q("percentComplete"),
    /**
     *
          value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ completed: _NS$q("completed"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ due: _NS$q("due"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ X_: _NS$q("X-"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ calscale: _NS$q("calscale"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ exdate: _NS$q("exdate"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ method: _NS$q("method"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ prodid: _NS$q("prodid"),
    /**
     *
          default value type: DATE-TIME
     *
     * This term provides descriptions only with no explicit locale.
     */ recurrenceId: _NS$q("recurrenceId"),
    /**
     *
          value type: TEXT
     *
     * This term provides descriptions only with no explicit locale.
     */ version: _NS$q("version")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This is a vocabulary document and is used to achieve certain features of the JSON-LD language.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$p = "http://www.w3.org/ns/json-ld#";
function _NS$p(localName) {
    return _NAMESPACE$p + localName;
}
/**
 * This is a vocabulary document and is used to achieve certain features of the JSON-LD language.
 */ var JSONLD = {
    PREFIX: "jsonld",
    NAMESPACE: _NAMESPACE$p,
    PREFIX_AND_NAMESPACE: {
        "jsonld": "http://www.w3.org/ns/json-ld#"
    },
    NS: _NS$p,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Defines term definitions and other aspects of a JSON-LD `Context`.
  
  A [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) MUST be a map whose keys MUST be either _terms_, _compact IRIs_, _IRIs_, or one of the keywords `@base`, `@import`, `@language`, `@propagate`, `@protected`, `@type`, `@version`, or `@vocab`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ Context: _NS$p("Context"),
    /**
     * A string ([simple term definition](http://www.w3.org/TR/json-ld11/#dfn-simple-term-definitions)), expanding to an IRI.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ PrefixDefinition: _NS$p("PrefixDefinition"),
    /**
     * A [term definition](http://www.w3.org/TR/json-ld11/#dfn-term-definitions) is an entry in a [context](#Context), where the key defines a term which may be used within a dictionary as a key, type, or elsewhere that a string is interpreted as a vocabulary item. Its value is an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
  
  
  
  An [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definition) MUST be a map composed of zero or more keys from `@id`, `@reverse`, `@type`, `@language`, `@container`, `@context`, `@prefix`, `@propagate`, or `@protected`. An expanded term definition SHOULD NOT contain any other keys.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ TermDefinition: _NS$p("TermDefinition"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@base` key, its value MUST be an _IRI reference_, or `null`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ base: _NS$p("base"),
    /**
     * The associated `@container` value in an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
  
  If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@container` keyword, its value MUST be either `@list`, `@set`, `@language`, `@index`, `@id`, `@graph`, `@type`, or be `null` or an array containing exactly any one of those keywords, or a combination of `@set` and any of `@index`, `@id`, `@graph`, `@type`, `@language` in any order.
  
  `@container` may also be an array containing `@graph` along with either `@id` or `@index` and also optionally including `@set`.
  
  If the value is `@language`, when the term is used outside of the `@context`, the associated value MUST be a language map.
  
  If the value is `@index`, when the term is used outside of the `@context`, the associated value MUST be an index map.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ container: _NS$p("container"),
    /**
     * As an IRI, this link relation is used to associate a JSON-LD context with a JSON document so that it can be interpreted as JSON-LD. In an HTTP request header, specifies the location of a context to use for compaction. As a Context, defines an inline `context definition`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ context: _NS$p("context"),
    /**
     * Term definition(s) associated with this context.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ definition: _NS$p("definition"),
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@direction` key, its value MUST be one of `"ltr"` or `"rtl"`, or be `null`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ direction: _NS$p("direction"),
    /**
     * The `@id` mapping of a [term definition](#TermDefinition).
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ id: _NS$p("id"),
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@import` keyword, its value MUST be an _IRI reference_. When used as a reference from an `@import`, the referenced context definition MUST NOT include an `@import` key, itself.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ import: _NS$p("import"),
    /**
     * The [default language](https://www.w3.org/TR/json-ld11/#dfn-default-language) is set in the context using the `@language` key whose value MUST be a string representing a [BCP47](https://tools.ietf.org/html/bcp47) language code or null.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#dfn-default-language
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ language: _NS$p("language"),
    /**
     * If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@nest` keyword, its value MUST be either `@nest`, or a _term_ which expands to `@nest`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ nest: _NS$p("nest"),
    /**
     * With the value `true`, allows this term to be used to construct a compact IRI when compacting.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ prefix: _NS$p("prefix"),
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@propagate` keyword, its value MUST be `true` or `false`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ propagate: _NS$p("propagate"),
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@protected` keyword, its value MUST be `true` or `false`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ protected: _NS$p("protected"),
    /**
     * The `@reverse` mapping of an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ reverse: _NS$p("reverse"),
    /**
     * The term associated with a [term definition](#TermDefinition).
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#dfn-term
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ term: _NS$p("term"),
    /**
     * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@type` keyword, its value MUST be a map with only the entry `@container` set to `@set`, and optionally an entry `@protected`.
  
  
  
  If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@type` keyword, its value MUST be an _IRI reference_, a _term_, `null`, or one of the keywords `@id`, `@json`, `@none`, or `@vocab`.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#context-definitions
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ type: _NS$p("type"),
    /**
     * The [processing mode](https://www.w3.org/TR/json-ld11/#dfn-processing-mode) defines how a JSON-LD document is processed. By default, all documents are assumed to be conformant with [JSON-LD 1.1`](http://www.w3.org/TR/json-ld11). By defining a different version via explicit API option, other processing modes can be accessed. This specification defines extensions for the `json-ld-1.1` processing mode.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#dfn-processing-mode
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ version: _NS$p("version"),
    /**
     * Used to expand properties and values in `@type` with a common prefix IRI.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#default-vocabulary
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ vocab: _NS$p("vocab"),
    /**
     * This profile IRI is used to request or specify compacted JSON-LD document form.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#iana-considerations
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ compacted: _NS$p("compacted"),
    /**
     * This profile URI is used to request or specify expanded JSON-LD document form.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#iana-considerations
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ expanded: _NS$p("expanded"),
    /**
     * This profile URI is used to request or specify flattened JSON-LD document form.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#iana-considerations
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ flattened: _NS$p("flattened"),
    /**
     * As an IRI, this link relation is used to associate a JSON-LD frame with a JSON-LD document. In an HTTP request header, specifies the location of a frame to use for framing.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#iana-considerations
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ frame: _NS$p("frame"),
    /**
     * This profile URI is used to request or specify framed JSON-LD document form.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#iana-considerations
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ framed: _NS$p("framed"),
    /**
     * This profile URI is used to request or specify streaming JSON-LD document form.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11-streaming/#streaming-profile
     *
     * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
     */ streaming: _NS$p("streaming")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$o = "http://www.w3.org/ns/ldp#";
function _NS$o(localName) {
    return _NAMESPACE$o + localName;
}
/**
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */ var LDP = {
    PREFIX: "ldp",
    NAMESPACE: _NAMESPACE$o,
    PREFIX_AND_NAMESPACE: {
        "ldp": "http://www.w3.org/ns/ldp#"
    },
    NS: _NS$o,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ Resource: _NS$o("Resource"),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ RDFSource: _NS$o("RDFSource"),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ NonRDFSource: _NS$o("NonRDFSource"),
    /**
     * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ Container: _NS$o("Container"),
    /**
     * An LDPC that uses a predefined predicate to simply link to its contained resources.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ BasicContainer: _NS$o("BasicContainer"),
    /**
     * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ DirectContainer: _NS$o("DirectContainer"),
    /**
     * An LDPC that has the flexibility of choosing what form the membership triples take.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ IndirectContainer: _NS$o("IndirectContainer"),
    /**
     * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ Page: _NS$o("Page"),
    /**
     * Element in the list of sorting criteria used by the server to assign container members to pages.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ PageSortCriterion: _NS$o("PageSortCriterion"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ hasMemberRelation: _NS$o("hasMemberRelation"),
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ isMemberOfRelation: _NS$o("isMemberOfRelation"),
    /**
     * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ membershipResource: _NS$o("membershipResource"),
    /**
     * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ insertedContentRelation: _NS$o("insertedContentRelation"),
    /**
     * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ member: _NS$o("member"),
    /**
     * Links a container with resources created through the container.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ contains: _NS$o("contains"),
    /**
     * Links a resource with constraints that the server requires requests like creation and update to conform to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ constrainedBy: _NS$o("constrainedBy"),
    /**
     * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ pageSortCriteria: _NS$o("pageSortCriteria"),
    /**
     * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ pageSortPredicate: _NS$o("pageSortPredicate"),
    /**
     * The ascending/descending/etc order used to order the members across pages in a page sequence.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ pageSortOrder: _NS$o("pageSortOrder"),
    /**
     * The collation used to order the members across pages in a page sequence when comparing strings.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ pageSortCollation: _NS$o("pageSortCollation"),
    /**
     * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ldp#
     */ pageSequence: _NS$o("pageSequence"),
    /**
     * Links a resource to a container where notifications for the resource can be created and discovered.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: https://www.w3.org/TR/ldn/
     */ inbox: _NS$o("inbox")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The ODRL Vocabulary and Expression defines a set of concepts and terms (the vocabulary) and encoding mechanism (the expression) for permissions and obligations statements describing digital content usage based on the ODRL Information Model.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$n = "http://www.w3.org/ns/odrl/2/";
function _NS$n(localName) {
    return _NAMESPACE$n + localName;
}
/**
 * The ODRL Vocabulary and Expression defines a set of concepts and terms (the vocabulary) and encoding mechanism (the expression) for permissions and obligations statements describing digital content usage based on the ODRL Information Model.
 */ var ODRL = {
    PREFIX: "odrl",
    NAMESPACE: _NAMESPACE$n,
    PREFIX_AND_NAMESPACE: {
        "odrl": "http://www.w3.org/ns/odrl/2/"
    },
    NS: _NS$n,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A non-empty group of Permissions and/or Prohibitions.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Policy: _NS$n("Policy"),
    /**
     * An unambiguous identifier
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ uid: _NS$n("uid"),
    /**
     * The identifier(s) of an ODRL Profile that the Policy conforms to.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ profile: _NS$n("profile"),
    /**
     * Relates a (child) policy to another (parent) policy from which terms are inherited.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ inheritFrom: _NS$n("inheritFrom"),
    /**
     * An abstract concept that represents the common characteristics of Permissions, Prohibitions, and Duties.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Rule: _NS$n("Rule"),
    /**
     * Relation is an abstract property which creates an explicit link between an Action and an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ relation: _NS$n("relation"),
    /**
     * Function is an abstract property whose sub-properties define the functional roles which may be fulfilled by a party in relation to a Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ function: _NS$n("function"),
    /**
     * Failure is an abstract property that defines the violation (or unmet) relationship between Rules.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ failure: _NS$n("failure"),
    /**
     * A resource or a collection of resources that are the subject of a Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Asset: _NS$n("Asset"),
    /**
     * An entity or a collection of entities that undertake Roles in a Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Party: _NS$n("Party"),
    /**
     * Used to establish strategies to resolve conflicts that arise from the merging of Policies or conflicts between Permissions and Prohibitions in the same Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ ConflictTerm: _NS$n("ConflictTerm"),
    /**
     * The conflict-resolution strategy for a Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ conflict: _NS$n("conflict"),
    /**
     * Permissions take preference over prohibitions.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ perm: _NS$n("perm"),
    /**
     * Prohibitions take preference over permissions.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ prohibit: _NS$n("prohibit"),
    /**
     * The policy is void.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ invalid: _NS$n("invalid"),
    /**
     * A Policy that grants the assignee a Rule over an Asset from an assigner.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Agreement: _NS$n("Agreement"),
    /**
     * A Policy that proposes a Rule over an Asset from an assigner.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Offer: _NS$n("Offer"),
    /**
     * A Policy that expresses a Rule over an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Set: _NS$n("Set"),
    /**
     * A Policy that asserts a Rule over an Asset from parties.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Assertion: _NS$n("Assertion"),
    /**
     * A Policy that expresses a Rule over an Asset containing personal information.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Privacy: _NS$n("Privacy"),
    /**
     * A Policy that proposes a Rule over an Asset from an assignee.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Request: _NS$n("Request"),
    /**
     * A Policy that grants the holder a Rule over an Asset from an assigner.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Ticket: _NS$n("Ticket"),
    /**
     * An Asset that is collection of individual resources
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ AssetCollection: _NS$n("AssetCollection"),
    /**
     * The target property indicates the Asset that is the primary subject to which the Rule action directly applies.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ target: _NS$n("target"),
    /**
     * Identifies an ODRL Policy for which the identified Asset is the target Asset to all the Rules.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ hasPolicy: _NS$n("hasPolicy"),
    /**
     * The output property specifies the Asset which is created from the output of the Action.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ output: _NS$n("output"),
    /**
     * A Party that is a group of individual entities
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ PartyCollection: _NS$n("PartyCollection"),
    /**
     * The Party is the recipient of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ assignee: _NS$n("assignee"),
    /**
     * The Party is the issuer of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ assigner: _NS$n("assigner"),
    /**
     * Identifies an ODRL Policy for which the identified Party undertakes the assignee functional role.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ assigneeOf: _NS$n("assigneeOf"),
    /**
     * Identifies an ODRL Policy for which the identified Party undertakes the assigner functional role.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ assignerOf: _NS$n("assignerOf"),
    /**
     * The Party to be attributed.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ attributedParty: _NS$n("attributedParty"),
    /**
     * The Party who undertakes the attribution.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ attributingParty: _NS$n("attributingParty"),
    /**
     * The Party is the recipient of the compensation.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ compensatedParty: _NS$n("compensatedParty"),
    /**
     * The Party that is the provider of the compensation.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ compensatingParty: _NS$n("compensatingParty"),
    /**
     * The Party to obtain consent from.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ consentingParty: _NS$n("consentingParty"),
    /**
     * The Party who obtains the consent.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ consentedParty: _NS$n("consentedParty"),
    /**
     * The Party who is offering the contract.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ contractingParty: _NS$n("contractingParty"),
    /**
     * The Party who is being contracted.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ contractedParty: _NS$n("contractedParty"),
    /**
     * The Party to be informed of all uses.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ informedParty: _NS$n("informedParty"),
    /**
     * The Party who provides the inform use data.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ informingParty: _NS$n("informingParty"),
    /**
     * The Party who is tracking usage.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ trackingParty: _NS$n("trackingParty"),
    /**
     * The Party whose usage is being tracked.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ trackedParty: _NS$n("trackedParty"),
    /**
     * Identifies an Asset/PartyCollection that the Asset/Party is a member of.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ partOf: _NS$n("partOf"),
    /**
     * Reference to a Asset/PartyCollection
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ source: _NS$n("source"),
    /**
     * An operation on an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Action: _NS$n("Action"),
    /**
     * The operation relating to the Asset for which the Rule is being subjected.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ action: _NS$n("action"),
    /**
     * An Action transitively asserts that another Action that encompasses its operational semantics.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ includedIn: _NS$n("includedIn"),
    /**
     * An Action asserts that another Action is not prohibited to enable its operational semantics.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ implies: _NS$n("implies"),
    /**
     * The ability to perform an Action over an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Permission: _NS$n("Permission"),
    /**
     * Relates an individual Permission to a Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ permission: _NS$n("permission"),
    /**
     * The inability to perform an Action over an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Prohibition: _NS$n("Prohibition"),
    /**
     * The obligation to perform an Action
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Duty: _NS$n("Duty"),
    /**
     * Relates an individual Prohibition to a Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ prohibition: _NS$n("prohibition"),
    /**
     * To use the Asset
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ use: _NS$n("use"),
    /**
     * To transfer the ownership of the Asset in perpetuity.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ transfer: _NS$n("transfer"),
    /**
     * To accept that the use of the Asset may be tracked.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ acceptTracking: _NS$n("acceptTracking"),
    /**
     * To use the Asset or parts of it as part of a composite collection.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ aggregate: _NS$n("aggregate"),
    /**
     * To add explanatory notations/commentaries to the Asset without modifying the Asset in any other way.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ annotate: _NS$n("annotate"),
    /**
     * To anonymize all or parts of the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ anonymize: _NS$n("anonymize"),
    /**
     * To store the Asset (in a non-transient form).
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ archive: _NS$n("archive"),
    /**
     * To attribute the use of the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ attribute: _NS$n("attribute"),
    /**
     * To compensate by transfer of some amount of value, if defined, for using or selling the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ compensate: _NS$n("compensate"),
    /**
     * To create multiple copies of the Asset that are being concurrently used.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ concurrentUse: _NS$n("concurrentUse"),
    /**
     * To permanently remove all copies of the Asset after it has been used.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ delete: _NS$n("delete"),
    /**
     * To create a new derivative Asset from this Asset and to edit or modify the derivative.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ derive: _NS$n("derive"),
    /**
     * To produce a digital copy of (or otherwise digitize) the Asset from its analogue form.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ digitize: _NS$n("digitize"),
    /**
     * To create a static and transient rendition of an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ display: _NS$n("display"),
    /**
     * To supply the Asset to third-parties.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ distribute: _NS$n("distribute"),
    /**
     * To ensure that the Rule on the Asset is exclusive.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ ensureExclusivity: _NS$n("ensureExclusivity"),
    /**
     * To run the computer program Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ execute: _NS$n("execute"),
    /**
     * To extract parts of the Asset and to use it as a new Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ extract: _NS$n("extract"),
    /**
     * To transfer the ownership of the Asset to a third party without compensation and while deleting the original asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ give: _NS$n("give"),
    /**
     * To grant the use of the Asset to third parties.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ grantUse: _NS$n("grantUse"),
    /**
     * To include other related assets in the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ include: _NS$n("include"),
    /**
     * To record the Asset in an index.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ index: _NS$n("index"),
    /**
     * To inform that an action has been performed on or in relation to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ inform: _NS$n("inform"),
    /**
     * To load the computer program Asset onto a storage device which allows operating or running the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ install: _NS$n("install"),
    /**
     * To change existing content of the Asset. A new asset is not created by this action.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ modify: _NS$n("modify"),
    /**
     * To move the Asset from one digital location to another including deleting the original copy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ move: _NS$n("move"),
    /**
     * To grant the specified Policy to a third party for their use of the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ nextPolicy: _NS$n("nextPolicy"),
    /**
     * To obtain verifiable consent to perform the requested action in relation to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ obtainConsent: _NS$n("obtainConsent"),
    /**
     * To create a sequential and transient rendition of an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ play: _NS$n("play"),
    /**
     * To publicly perform the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ present: _NS$n("present"),
    /**
     * To create a tangible and permanent rendition of an Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ print: _NS$n("print"),
    /**
     * To obtain data from the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ read: _NS$n("read"),
    /**
     * To make duplicate copies the Asset in any material form.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ reproduce: _NS$n("reproduce"),
    /**
     * To review the Policy applicable to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ reviewPolicy: _NS$n("reviewPolicy"),
    /**
     * To transfer the ownership of the Asset to a third party with compensation and while deleting the original asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ sell: _NS$n("sell"),
    /**
     * To deliver the Asset in real-time.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ stream: _NS$n("stream"),
    /**
     * To use the Asset in timed relations with media (audio/visual) elements of another Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ synchronize: _NS$n("synchronize"),
    /**
     * To have a text Asset read out loud.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ textToSpeech: _NS$n("textToSpeech"),
    /**
     * To convert the Asset into a different format.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ transform: _NS$n("transform"),
    /**
     * To translate the original natural language of an Asset into another natural language.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ translate: _NS$n("translate"),
    /**
     * To unload and delete the computer program Asset from a storage device and disable its readiness for operation.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ uninstall: _NS$n("uninstall"),
    /**
     * To apply a watermark to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ watermark: _NS$n("watermark"),
    /**
     * Relates an individual Duty to a Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ obligation: _NS$n("obligation"),
    /**
     * Relates an individual Duty to a Permission.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ duty: _NS$n("duty"),
    /**
     * Relates a Duty to another Duty, the latter being a consequence of not fulfilling the former.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ consequence: _NS$n("consequence"),
    /**
     * Relates an individual remedy Duty to a Prohibition.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ remedy: _NS$n("remedy"),
    /**
     * A boolean expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Constraint: _NS$n("Constraint"),
    /**
     * Constraint applied to a Rule
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ constraint: _NS$n("constraint"),
    /**
     * Constraint used to refine the semantics of an Action, or Party/Asset Collection
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ refinement: _NS$n("refinement"),
    /**
     * Operator for constraint expression.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Operator: _NS$n("Operator"),
    /**
     * The operator function applied to operands of a Constraint
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ operator: _NS$n("operator"),
    /**
     * Right operand for constraint expression.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ RightOperand: _NS$n("RightOperand"),
    /**
     * The value of the right operand in a constraint expression.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ rightOperand: _NS$n("rightOperand"),
    /**
     * A reference to a web resource providing the value for the right operand of a Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ rightOperandReference: _NS$n("rightOperandReference"),
    /**
     * Left operand for a constraint expression.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ LeftOperand: _NS$n("LeftOperand"),
    /**
     * The left operand in a constraint expression.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ leftOperand: _NS$n("leftOperand"),
    /**
     * The datatype of the value of the rightOperand or rightOperandReference of a Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ dataType: _NS$n("dataType"),
    /**
     * the value generated from the leftOperand action or a value related to the leftOperand set as the reference for the comparison.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ status: _NS$n("status"),
    /**
     * A logical expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ LogicalConstraint: _NS$n("LogicalConstraint"),
    /**
     * Operand is an abstract property for a logical relationship.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ operand: _NS$n("operand"),
    /**
     * A point in space or time defined with absolute coordinates for the positioning of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ absolutePosition: _NS$n("absolutePosition"),
    /**
     * The absolute spatial positions of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space for the target Asset to fit.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ absoluteSpatialPosition: _NS$n("absoluteSpatialPosition"),
    /**
     * The absolute temporal positions in a media stream the target Asset has to fit.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ absoluteTemporalPosition: _NS$n("absoluteTemporalPosition"),
    /**
     * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ absoluteSize: _NS$n("absoluteSize"),
    /**
     * Numeric count of executions of the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ count: _NS$n("count"),
    /**
     * The date (and optional time and timezone) of exercising the action of the Rule. Right operand value MUST be an xsd:date or xsd:dateTime as defined by [[xmlschema11-2]].
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ dateTime: _NS$n("dateTime"),
    /**
     * A time delay period prior to exercising the action of the Rule. The point in time triggering this period MAY be defined by another temporal Constraint combined by a Logical Constraint (utilising the odrl:andSequence operand). Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ delayPeriod: _NS$n("delayPeriod"),
    /**
     * The delivery channel used for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ deliveryChannel: _NS$n("deliveryChannel"),
    /**
     * A continuous elapsed time period which may be used for exercising of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ elapsedTime: _NS$n("elapsedTime"),
    /**
     * An identified event setting a context for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ event: _NS$n("event"),
    /**
     * A transformed file format of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ fileFormat: _NS$n("fileFormat"),
    /**
     * A defined industry sector setting a context for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ industry: _NS$n("industry"),
    /**
     * A natural language used by the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ language: _NS$n("language"),
    /**
     * Category of a media asset setting a context for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ media: _NS$n("media"),
    /**
     * An accumulated amount of one to many metered time periods which were used for exercising the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ meteredTime: _NS$n("meteredTime"),
    /**
     * The amount of a financial payment. Right operand value MUST be an xsd:decimal.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ payAmount: _NS$n("payAmount"),
    /**
     * A percentage amount of the target Asset relevant for exercising the action of the Rule. Right operand value MUST be an xsd:decimal from 0 to 100.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ percentage: _NS$n("percentage"),
    /**
     * Category of product or service setting a context for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ product: _NS$n("product"),
    /**
     * A defined purpose for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ purpose: _NS$n("purpose"),
    /**
     * The party receiving the result/outcome of exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ recipient: _NS$n("recipient"),
    /**
     * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ relativePosition: _NS$n("relativePosition"),
    /**
     * The relative spatial positions - expressed as percentages of full values - of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ relativeSpatialPosition: _NS$n("relativeSpatialPosition"),
    /**
     * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ relativeTemporalPosition: _NS$n("relativeTemporalPosition"),
    /**
     * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects - expressed as percentages of full values - of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ relativeSize: _NS$n("relativeSize"),
    /**
     * Resolution of the rendition of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ resolution: _NS$n("resolution"),
    /**
     * A named and identified geospatial area with defined borders which is used for exercising the action of the Rule. An IRI MUST be used to represent this value.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ spatial: _NS$n("spatial"),
    /**
     * A set of coordinates setting the borders of a geospatial area used for exercising the action of the Rule. The coordinates MUST include longitude and latitude, they MAY include altitude and the geodetic datum.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ spatialCoordinates: _NS$n("spatialCoordinates"),
    /**
     * An identified computing system or computing device used for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ systemDevice: _NS$n("systemDevice"),
    /**
     * A recurring period of time before the next execution of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ timeInterval: _NS$n("timeInterval"),
    /**
     * The unit of measure used for counting the executions of the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ unitOfCount: _NS$n("unitOfCount"),
    /**
     * The version of the target Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ version: _NS$n("version"),
    /**
     * An identified location of the IT communication space which is relevant for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ virtualLocation: _NS$n("virtualLocation"),
    /**
     * An identified device used for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ device: _NS$n("device"),
    /**
     * An identified computing system used for exercising the action of the Rule.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ system: _NS$n("system"),
    /**
     * The relation is satisfied when at least one of the Constraints is satisfied.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ or: _NS$n("or"),
    /**
     * The relation is satisfied when only one, and not more, of the Constaints is satisfied
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ xone: _NS$n("xone"),
    /**
     * The relation is satisfied when all of the Constraints are satisfied.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ and: _NS$n("and"),
    /**
     * The relation is satisfied when each of the Constraints are satisfied in the order specified.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ andSequence: _NS$n("andSequence"),
    /**
     * Indicating that a given value equals the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ eq: _NS$n("eq"),
    /**
     * Indicating that a given value is greater than the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ gt: _NS$n("gt"),
    /**
     * Indicating that a given value is greater than or equal to the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ gteq: _NS$n("gteq"),
    /**
     * Indicating that a given value is less than the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ lt: _NS$n("lt"),
    /**
     * Indicating that a given value is less than or equal to the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ lteq: _NS$n("lteq"),
    /**
     * Indicating that a given value is not equal to the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ neq: _NS$n("neq"),
    /**
     * A set-based operator indicating that a given value is an instance of the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ isA: _NS$n("isA"),
    /**
     * A set-based operator indicating that a given value contains the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ hasPart: _NS$n("hasPart"),
    /**
     * A set-based operator indicating that a given value is contained by the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ isPartOf: _NS$n("isPartOf"),
    /**
     * A set-based operator indicating that a given value is all of the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ isAllOf: _NS$n("isAllOf"),
    /**
     * A set-based operator indicating that a given value is any of the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ isAnyOf: _NS$n("isAnyOf"),
    /**
     * A set-based operator indicating that a given value is none of the right operand of the Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ isNoneOf: _NS$n("isNoneOf"),
    /**
     * Indicates the actual datetime the action of the Rule was exercised.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ policyUsage: _NS$n("policyUsage"),
    /**
     * An value indicating the closeness or nearness.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ proximity: _NS$n("proximity"),
    /**
     * The act of adding to the end of an asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ append: _NS$n("append"),
    /**
     * The act of appending data to the Asset without modifying the Asset in any other way.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ appendTo: _NS$n("appendTo"),
    /**
     * The act of making an exact reproduction of the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ copy: _NS$n("copy"),
    /**
     * The act of transforming the asset into a new form.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ export: _NS$n("export"),
    /**
     * The act of making available the asset to a third-party for a fixed period of time with exchange of value.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ lease: _NS$n("lease"),
    /**
     * The act of granting the right to use the asset to a third-party.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ license: _NS$n("license"),
    /**
     * The act of making available the asset to a third-party for a fixed period of time without exchange of value.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ lend: _NS$n("lend"),
    /**
     * The act of paying a financial amount to a party for use of the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ pay: _NS$n("pay"),
    /**
     * The Party is the recipient of the payment.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ payeeParty: _NS$n("payeeParty"),
    /**
     * The act of providing a short preview of the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ preview: _NS$n("preview"),
    /**
     * The act of using the asset for a purpose other than the purpose it was intended for.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ secondaryUse: _NS$n("secondaryUse"),
    /**
     * The act of writing to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ write: _NS$n("write"),
    /**
     * The act of adding data to the Asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ writeTo: _NS$n("writeTo"),
    /**
     * The act of sharing the asset to parties in close proximity to the owner.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ adHocShare: _NS$n("adHocShare"),
    /**
     * The act of extracting (replicating) unchanged characters from the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ extractChar: _NS$n("extractChar"),
    /**
     * The act of extracting (replicating) unchanged pages from the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ extractPage: _NS$n("extractPage"),
    /**
     * The act of extracting (replicating) unchanged words from the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ extractWord: _NS$n("extractWord"),
    /**
     * The number of seconds after which timed metering use of the asset begins.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ timedCount: _NS$n("timedCount"),
    /**
     * Indentifies the type of inheritance.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ inheritRelation: _NS$n("inheritRelation"),
    /**
     * Indicates if the Policy entity can be inherited.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ inheritAllowed: _NS$n("inheritAllowed"),
    /**
     * Is used to indicate how to support Actions that are not part of any vocabulary or profile in the policy expression system.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ UndefinedTerm: _NS$n("UndefinedTerm"),
    /**
     * Relates the strategy used for handling undefined actions to a Policy.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ undefined: _NS$n("undefined"),
    /**
     * The Action is to be ignored and is not part of the policy – and the policy remains valid.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ ignore: _NS$n("ignore"),
    /**
     * The Action is to be supported as part of the policy – and the policy remains valid.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ support: _NS$n("support"),
    /**
     * Scopes for Asset Scope expressions.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ AssetScope: _NS$n("AssetScope"),
    /**
     * Scopes for Party Scope expressions.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ PartyScope: _NS$n("PartyScope"),
    /**
     * The identifier of a scope that provides context to the extent of the entity.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ scope: _NS$n("scope"),
    /**
     * Specifies that the scope of the relationship is the defined group with multiple individual members.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Group: _NS$n("Group"),
    /**
     * Specifies that the scope of the relationship is the single Party individual.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ Individual: _NS$n("Individual"),
    /**
     * Specifies that the scope of the relationship is all of the collective individuals within a context.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ All: _NS$n("All"),
    /**
     * Specifies that the scope of the relationship is all of the first-level connections of the Party.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ AllConnections: _NS$n("AllConnections"),
    /**
     * Specifies that the scope of the relationship is all of the second-level connections to the Party.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ All2ndConnections: _NS$n("All2ndConnections"),
    /**
     * Specifies that the scope of the relationship is all of the group connections of the Party.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ AllGroups: _NS$n("AllGroups"),
    /**
     * The act of keeping the policy notice with the asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ attachPolicy: _NS$n("attachPolicy"),
    /**
     * The act of attaching the source of the asset and its derivatives.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ attachSource: _NS$n("attachSource"),
    /**
     * The act of distributing any derivative asset under the same terms as the original asset.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ shareAlike: _NS$n("shareAlike"),
    /**
     * The act of using the asset in a business environment.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ commercialize: _NS$n("commercialize"),
    /**
     * The act of the non-commercial reproduction and distribution of the asset to third-parties.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ share: _NS$n("share"),
    /**
     * Identifier for the ODRL Core Profile
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ core: _NS$n("core"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The unit of measurement of the value of the rightOperand or rightOperandReference of a Constraint.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
     */ unit: _NS$n("unit")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - OLO (Ordered List Ontology) - for describing ordered lists
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$m = "http://purl.org/ontology/olo/core#";
function _NS$m(localName) {
    return _NAMESPACE$m + localName;
}
/**
 * [Generator provided] - OLO (Ordered List Ontology) - for describing ordered lists
 */ var OLO = {
    PREFIX: "olo",
    NAMESPACE: _NAMESPACE$m,
    PREFIX_AND_NAMESPACE: {
        "olo": "http://purl.org/ontology/olo/core#"
    },
    NS: _NS$m,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An ordered list with a given length an indexed items.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ OrderedList: _NS$m("OrderedList"),
    /**
     * A slot in an ordered list with a fixed index.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ Slot: _NS$m("Slot"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of an ordered list.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ length: _NS$m("length"),
    /**
     * Associates the next slot in an ordered list.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ next: _NS$m("next"),
    /**
     * An index of a slot in an ordered list.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ index: _NS$m("index"),
    /**
     * An ordered list of an slot.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ ordered_list: _NS$m("ordered_list"),
    /**
     * Associates the previous slot in an ordered list
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ previous: _NS$m("previous"),
    /**
     * A slot in an ordered list.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ slot: _NS$m("slot"),
    /**
     * An item of a slot in an ordered list.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/ontology/olo/core#
     */ item: _NS$m("item")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 *
  This ontology partially describes the built-in classes and
  properties that together form the basis of the RDF/XML syntax of OWL 2.
  The content of this ontology is based on Tables 6.1 and 6.2
  in Section 6.4 of the OWL 2 RDF-Based Semantics specification,
  available at http://www.w3.org/TR/owl2-rdf-based-semantics/.
  Please note that those tables do not include the different annotations
  (labels, comments and rdfs:isDefinedBy links) used in this file.
  Also note that the descriptions provided in this ontology do not
  provide a complete and correct formal description of either the syntax
  or the semantics of the introduced terms (please see the OWL 2
  recommendations for the complete and normative specifications).
  Furthermore, the information provided by this ontology may be
  misleading if not used with care. This ontology SHOULD NOT be imported
  into OWL ontologies. Importing this file into an OWL 2 DL ontology
  will cause it to become an OWL 2 Full ontology and may have other,
  unexpected, consequences.
   
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$l = "http://www.w3.org/2002/07/owl#";
function _NS$l(localName) {
    return _NAMESPACE$l + localName;
}
/**
 *
  This ontology partially describes the built-in classes and
  properties that together form the basis of the RDF/XML syntax of OWL 2.
  The content of this ontology is based on Tables 6.1 and 6.2
  in Section 6.4 of the OWL 2 RDF-Based Semantics specification,
  available at http://www.w3.org/TR/owl2-rdf-based-semantics/.
  Please note that those tables do not include the different annotations
  (labels, comments and rdfs:isDefinedBy links) used in this file.
  Also note that the descriptions provided in this ontology do not
  provide a complete and correct formal description of either the syntax
  or the semantics of the introduced terms (please see the OWL 2
  recommendations for the complete and normative specifications).
  Furthermore, the information provided by this ontology may be
  misleading if not used with care. This ontology SHOULD NOT be imported
  into OWL ontologies. Importing this file into an OWL 2 DL ontology
  will cause it to become an OWL 2 Full ontology and may have other,
  unexpected, consequences.
   
 */ var OWL = {
    PREFIX: "owl",
    NAMESPACE: _NAMESPACE$l,
    PREFIX_AND_NAMESPACE: {
        "owl": "http://www.w3.org/2002/07/owl#"
    },
    NS: _NS$l,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class of ontologies.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Ontology: _NS$l("Ontology"),
    /**
     * The class of ontology properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ OntologyProperty: _NS$l("OntologyProperty"),
    /**
     * The class of annotation properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ AnnotationProperty: _NS$l("AnnotationProperty"),
    /**
     * The class of collections of pairwise different individuals.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ AllDifferent: _NS$l("AllDifferent"),
    /**
     * The class of collections of pairwise disjoint classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ AllDisjointClasses: _NS$l("AllDisjointClasses"),
    /**
     * The class of collections of pairwise disjoint properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ AllDisjointProperties: _NS$l("AllDisjointProperties"),
    /**
     * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Annotation: _NS$l("Annotation"),
    /**
     * The class of asymmetric properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ AsymmetricProperty: _NS$l("AsymmetricProperty"),
    /**
     * The class of object properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ ObjectProperty: _NS$l("ObjectProperty"),
    /**
     * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Axiom: _NS$l("Axiom"),
    /**
     * The class of OWL classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Class: _NS$l("Class"),
    /**
     * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ DataRange: _NS$l("DataRange"),
    /**
     * The class of data properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ DatatypeProperty: _NS$l("DatatypeProperty"),
    /**
     * The class of deprecated classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ DeprecatedClass: _NS$l("DeprecatedClass"),
    /**
     * The class of deprecated properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ DeprecatedProperty: _NS$l("DeprecatedProperty"),
    /**
     * The class of functional properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ FunctionalProperty: _NS$l("FunctionalProperty"),
    /**
     * The class of inverse-functional properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ InverseFunctionalProperty: _NS$l("InverseFunctionalProperty"),
    /**
     * The class of irreflexive properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ IrreflexiveProperty: _NS$l("IrreflexiveProperty"),
    /**
     * The class of named individuals.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ NamedIndividual: _NS$l("NamedIndividual"),
    /**
     * The class of OWL individuals.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Thing: _NS$l("Thing"),
    /**
     * The class of negative property assertions.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ NegativePropertyAssertion: _NS$l("NegativePropertyAssertion"),
    /**
     * This is the empty class.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Nothing: _NS$l("Nothing"),
    /**
     * The class of reflexive properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ ReflexiveProperty: _NS$l("ReflexiveProperty"),
    /**
     * The class of property restrictions.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ Restriction: _NS$l("Restriction"),
    /**
     * The class of symmetric properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ SymmetricProperty: _NS$l("SymmetricProperty"),
    /**
     * The class of transitive properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ TransitiveProperty: _NS$l("TransitiveProperty"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The annotation property that provides version information for an ontology or another OWL construct.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ versionInfo: _NS$l("versionInfo"),
    /**
     * The property that determines the class that a universal property restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ allValuesFrom: _NS$l("allValuesFrom"),
    /**
     * The property that determines the predicate of an annotated axiom or annotated annotation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ annotatedProperty: _NS$l("annotatedProperty"),
    /**
     * The property that determines the subject of an annotated axiom or annotated annotation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ annotatedSource: _NS$l("annotatedSource"),
    /**
     * The property that determines the object of an annotated axiom or annotated annotation.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ annotatedTarget: _NS$l("annotatedTarget"),
    /**
     * The property that determines the predicate of a negative property assertion.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ assertionProperty: _NS$l("assertionProperty"),
    /**
     * The annotation property that indicates that a given ontology is backward compatible with another ontology.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ backwardCompatibleWith: _NS$l("backwardCompatibleWith"),
    /**
     * The data property that does not relate any individual to any data value.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ bottomDataProperty: _NS$l("bottomDataProperty"),
    /**
     * The object property that does not relate any two individuals.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ bottomObjectProperty: _NS$l("bottomObjectProperty"),
    /**
     * The property that determines the cardinality of an exact cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ cardinality: _NS$l("cardinality"),
    /**
     * The property that determines that a given class is the complement of another class.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ complementOf: _NS$l("complementOf"),
    /**
     * The property that determines that a given data range is the complement of another data range with respect to the data domain.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ datatypeComplementOf: _NS$l("datatypeComplementOf"),
    /**
     * The annotation property that indicates that a given entity has been deprecated.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ deprecated: _NS$l("deprecated"),
    /**
     * The property that determines that two given individuals are different.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ differentFrom: _NS$l("differentFrom"),
    /**
     * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ disjointUnionOf: _NS$l("disjointUnionOf"),
    /**
     * The property that determines that two given classes are disjoint.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ disjointWith: _NS$l("disjointWith"),
    /**
     * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ distinctMembers: _NS$l("distinctMembers"),
    /**
     * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ equivalentClass: _NS$l("equivalentClass"),
    /**
     * The property that determines that two given properties are equivalent.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ equivalentProperty: _NS$l("equivalentProperty"),
    /**
     * The property that determines the collection of properties that jointly build a key.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ hasKey: _NS$l("hasKey"),
    /**
     * The property that determines the property that a self restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ hasSelf: _NS$l("hasSelf"),
    /**
     * The property that determines the individual that a has-value restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ hasValue: _NS$l("hasValue"),
    /**
     * The annotation property that indicates that a given ontology is incompatible with another ontology.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ incompatibleWith: _NS$l("incompatibleWith"),
    /**
     * The property that determines the collection of classes or data ranges that build an intersection.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ intersectionOf: _NS$l("intersectionOf"),
    /**
     * The property that determines that two given properties are inverse.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ inverseOf: _NS$l("inverseOf"),
    /**
     * The property that determines the cardinality of a maximum cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ maxCardinality: _NS$l("maxCardinality"),
    /**
     * The property that determines the cardinality of a maximum qualified cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ maxQualifiedCardinality: _NS$l("maxQualifiedCardinality"),
    /**
     * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ members: _NS$l("members"),
    /**
     * The property that determines the cardinality of a minimum cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ minCardinality: _NS$l("minCardinality"),
    /**
     * The property that determines the cardinality of a minimum qualified cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ minQualifiedCardinality: _NS$l("minQualifiedCardinality"),
    /**
     * The property that determines the class that a qualified object cardinality restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ onClass: _NS$l("onClass"),
    /**
     * The property that determines the data range that a qualified data cardinality restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ onDataRange: _NS$l("onDataRange"),
    /**
     * The property that determines the datatype that a datatype restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ onDatatype: _NS$l("onDatatype"),
    /**
     * The property that determines the collection of individuals or data values that build an enumeration.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ oneOf: _NS$l("oneOf"),
    /**
     * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ onProperties: _NS$l("onProperties"),
    /**
     * The property that determines the property that a property restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ onProperty: _NS$l("onProperty"),
    /**
     * The annotation property that indicates the predecessor ontology of a given ontology.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ priorVersion: _NS$l("priorVersion"),
    /**
     * The property that determines the n-tuple of properties that build a sub property chain of a given property.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ propertyChainAxiom: _NS$l("propertyChainAxiom"),
    /**
     * The property that determines that two given properties are disjoint.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ propertyDisjointWith: _NS$l("propertyDisjointWith"),
    /**
     * The property that determines the cardinality of an exact qualified cardinality restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ qualifiedCardinality: _NS$l("qualifiedCardinality"),
    /**
     * The property that determines that two given individuals are equal.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ sameAs: _NS$l("sameAs"),
    /**
     * The property that determines the class that an existential property restriction refers to.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ someValuesFrom: _NS$l("someValuesFrom"),
    /**
     * The property that determines the subject of a negative property assertion.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ sourceIndividual: _NS$l("sourceIndividual"),
    /**
     * The property that determines the object of a negative object property assertion.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ targetIndividual: _NS$l("targetIndividual"),
    /**
     * The property that determines the value of a negative data property assertion.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ targetValue: _NS$l("targetValue"),
    /**
     * The data property that relates every individual to every data value.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ topDataProperty: _NS$l("topDataProperty"),
    /**
     * The object property that relates every two individuals.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ topObjectProperty: _NS$l("topObjectProperty"),
    /**
     * The property that determines the collection of classes or data ranges that build a union.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ unionOf: _NS$l("unionOf"),
    /**
     * The property that determines the collection of facet-value pairs that define a datatype restriction.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
     */ withRestrictions: _NS$l("withRestrictions")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for the basic POSIX terms.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$k = "http://www.w3.org/ns/posix/stat#";
function _NS$k(localName) {
    return _NAMESPACE$k + localName;
}
/**
 * A vocabulary for the basic POSIX terms.
 */ var POSIX = {
    PREFIX: "posix",
    NAMESPACE: _NAMESPACE$k,
    PREFIX_AND_NAMESPACE: {
        "posix": "http://www.w3.org/ns/posix/stat#"
    },
    NS: _NS$k,
    // *******************
    // All the Properties.
    // *******************
    /**
     * Time of last access
     *
     * This term provides descriptions only in English.
     */ atime: _NS$k("atime"),
    /**
     * Blocksize for file system I/O
     *
     * This term provides descriptions only in English.
     */ blksize: _NS$k("blksize"),
    /**
     * Number of 512B blocks allocated
     *
     * This term provides descriptions only in English.
     */ blocks: _NS$k("blocks"),
    /**
     * Time of last status change
     *
     * This term provides descriptions only in English.
     */ ctime: _NS$k("ctime"),
    /**
     * ID of device containing file
     *
     * This term provides descriptions only in English.
     */ dev: _NS$k("dev"),
    /**
     * Group ID of owner
     *
     * This term provides descriptions only in English.
     */ gid: _NS$k("gid"),
    /**
     * inode number
     *
     * This term provides descriptions only in English.
     */ ino: _NS$k("ino"),
    /**
     * Protection
     *
     * This term provides descriptions only in English.
     */ mode: _NS$k("mode"),
    /**
     * Time of last modification
     *
     * This term provides descriptions only in English.
     */ mtime: _NS$k("mtime"),
    /**
     * Number of hard links
     *
     * This term provides descriptions only in English.
     */ nlink: _NS$k("nlink"),
    /**
     * Device ID (if special file)
     *
     * This term provides descriptions only in English.
     */ rdev: _NS$k("rdev"),
    /**
     * Total size, in bytes
     *
     * This term provides descriptions only in English.
     */ size: _NS$k("size"),
    /**
     * User ID of owner
     *
     * This term provides descriptions only in English.
     */ uid: _NS$k("uid")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This document is published by the Provenance Working Group (http://www.w3.org/2011/prov/wiki/Main_Page).

If you wish to make comments regarding this document, please send them to public-prov-comments@w3.org (subscribe public-prov-comments-request@w3.org, archives http://lists.w3.org/Archives/Public/public-prov-comments/). All feedback is welcome.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$j = "http://www.w3.org/ns/prov#";
function _NS$j(localName) {
    return _NAMESPACE$j + localName;
}
/**
 * This document is published by the Provenance Working Group (http://www.w3.org/2011/prov/wiki/Main_Page).

If you wish to make comments regarding this document, please send them to public-prov-comments@w3.org (subscribe public-prov-comments-request@w3.org, archives http://lists.w3.org/Archives/Public/public-prov-comments/). All feedback is welcome.
 */ var PROV_O = {
    PREFIX: "prov-o",
    NAMESPACE: _NAMESPACE$j,
    PREFIX_AND_NAMESPACE: {
        "prov-o": "http://www.w3.org/ns/prov#"
    },
    NS: _NS$j,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Entity
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Entity: _NS$j("Entity"),
    /**
     * An instance of prov:Revision provides additional descriptions about the binary prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity. For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [ a prov:Revision; prov:entity :draft_1; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Revision: _NS$j("Revision"),
    /**
     * Activity
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Activity: _NS$j("Activity"),
    /**
     * An instantaneous event, or event for short, happens in the world and marks a change in the world, in its activities and in its entities. The term 'event' is commonly used in process algebra with a similar meaning. Events represent communications or interactions; they are assumed to be atomic and instantaneous.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ InstantaneousEvent: _NS$j("InstantaneousEvent"),
    /**
     * ActivityInfluence provides additional descriptions of an Activity's binary influence upon any other kind of resource. Instances of ActivityInfluence use the prov:activity property to cite the influencing Activity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#activity
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ ActivityInfluence: _NS$j("ActivityInfluence"),
    /**
     * EntityInfluence provides additional descriptions of an Entity's binary influence upon any other kind of resource. Instances of EntityInfluence use the prov:entity property to cite the influencing Entity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#entity
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ EntityInfluence: _NS$j("EntityInfluence"),
    /**
     * An instance of prov:Influence provides additional descriptions about the binary prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo :bar ] . Because prov:Influence is a broad relation, the more specific relations (Communication, Delegation, End, etc.) should be used when applicable.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Influence: _NS$j("Influence"),
    /**
     * Agent
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Agent: _NS$j("Agent"),
    /**
     * AgentInfluence provides additional descriptions of an Agent's binary influence upon any other kind of resource. Instances of AgentInfluence use the prov:agent property to cite the influencing Agent.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#agent
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ AgentInfluence: _NS$j("AgentInfluence"),
    /**
     * An instance of prov:Association provides additional descriptions about the binary prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker; prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Association: _NS$j("Association"),
    /**
     * An instance of prov:Attribution provides additional descriptions about the binary prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution [ a prov:Attribution; prov:entity :baker; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Attribution: _NS$j("Attribution"),
    /**
     * Note that there are kinds of bundles (e.g. handwritten letters, audio recordings, etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Bundle: _NS$j("Bundle"),
    /**
     * Collection
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Collection: _NS$j("Collection"),
    /**
     * An instance of prov:Communication provides additional descriptions about the binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge; prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Communication: _NS$j("Communication"),
    /**
     * An instance of prov:Delegation provides additional descriptions about the binary prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation; prov:entity :mother; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Delegation: _NS$j("Delegation"),
    /**
     * An instance of prov:Derivation provides additional descriptions about the binary prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity :unwrapped_bubble_gum; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Derivation: _NS$j("Derivation"),
    /**
     * EmptyCollection
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ EmptyCollection: _NS$j("EmptyCollection"),
    /**
     * An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy relation from some ended prov:Activity to an prov:Entity that ended it. For example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End; prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ End: _NS$j("End"),
    /**
     * An instance of prov:Generation provides additional descriptions about the binary prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration [ a prov:Generation; prov:activity :baking; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Generation: _NS$j("Generation"),
    /**
     * An instance of prov:Invalidation provides additional descriptions about the binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Invalidation: _NS$j("Invalidation"),
    /**
     * Location
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#atLocation
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Location: _NS$j("Location"),
    /**
     * Organization
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Organization: _NS$j("Organization"),
    /**
     * Person
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Person: _NS$j("Person"),
    /**
     * There exist no prescriptive requirement on the nature of plans, their representation, the actions or steps they consist of, or their intended goals. Since plans may evolve over time, it may become necessary to track their provenance, so plans themselves are entities. Representing the plan explicitly in the provenance can be useful for various tasks: for example, to validate the execution as represented in the provenance record, to manage expectation failures, or to provide explanations.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Plan: _NS$j("Plan"),
    /**
     * An instance of prov:PrimarySource provides additional descriptions about the binary prov:hadPrimarySource relation from some secondary prov:Entity to an earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle; prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle; :foo :bar ] .
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ PrimarySource: _NS$j("PrimarySource"),
    /**
     * An instance of prov:Quotation provides additional descriptions about the binary prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script; prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Quotation: _NS$j("Quotation"),
    /**
     * Role
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#hadRole
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Role: _NS$j("Role"),
    /**
     * SoftwareAgent
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ SoftwareAgent: _NS$j("SoftwareAgent"),
    /**
     * An instance of prov:Start provides additional descriptions about the binary prov:wasStartedBy relation from some started prov:Activity to an prov:Entity that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ] .
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Start: _NS$j("Start"),
    /**
     * An instance of prov:Usage provides additional descriptions about the binary prov:used relation from some prov:Activity to an prov:Entity that it used. For example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity :podium; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ Usage: _NS$j("Usage"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A revision is a derivation that revises an entity into a revised version.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasRevisionOf: _NS$j("wasRevisionOf"),
    /**
     * specializationOf
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#alternateOf
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ specializationOf: _NS$j("specializationOf"),
    /**
     * Classify prov-o terms into three categories, including 'starting-point', 'qualifed', and 'extended'. This classification is used by the prov-o html document to gently introduce prov-o terms to its users.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ category: _NS$j("category"),
    /**
     * Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility', 'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'. This classification is used so that readers of prov-o specification can find its correspondence with the prov-dm specification.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ component: _NS$j("component"),
    /**
     * The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom, prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasDerivedFrom: _NS$j("wasDerivedFrom"),
    /**
     * PROV-O does not define all property inverses. The directionalities defined in PROV-O should be given preference over those not defined. However, if users wish to name the inverse of a PROV-O property, the local name given by prov:inverse should be used.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * See also:
     *  - http://www.w3.org/TR/prov-o/#names-of-inverse-properties
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ inverse: _NS$j("inverse"),
    /**
     * This annotation property links a subproperty of prov:wasInfluencedBy with the subclass of prov:Influence and the qualifying property that are used to qualify it.
  
  Example annotation:
  
      prov:wasGeneratedBy prov:qualifiedForm prov:qualifiedGeneration, prov:Generation .
  
  Then this unqualified assertion:
  
      :entity1 prov:wasGeneratedBy :activity1 .
  
  can be qualified by adding:
  
     :entity1 prov:qualifiedGeneration :entity1Gen .
     :entity1Gen
         a prov:Generation, prov:Influence;
         prov:activity :activity1;
         :customValue 1337 .
  
  Note how the value of the unqualified influence (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity (or prov:entity, or prov:agent) property on the influence class.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedForm: _NS$j("qualifiedForm"),
    /**
     * If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedRevision: _NS$j("qualifiedRevision"),
    /**
     * alternateOf
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * See also:
     *  - http://www.w3.org/ns/prov#specializationOf
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ alternateOf: _NS$j("alternateOf"),
    /**
     * A reference to the principal section of the PROV-CONSTRAINTS document that describes this concept.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ constraints: _NS$j("constraints"),
    /**
     * A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept expressed with this OWL term.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ definition: _NS$j("definition"),
    /**
     * A reference to the principal section of the PROV-DM document that describes this concept.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ dm: _NS$j("dm"),
    /**
     * A reference to the principal section of the PROV-DM document that describes this concept.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ n: _NS$j("n"),
    /**
     * activity
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ activity: _NS$j("activity"),
    /**
     * When the prov-o term does not have a definition drawn from prov-dm, and the prov-o editor provides one.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ editorsDefinition: _NS$j("editorsDefinition"),
    /**
     * Subproperties of prov:influencer are used to cite the object of an unqualified PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g. prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object is used.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ influencer: _NS$j("influencer"),
    /**
     * A note by the OWL development team about how this term expresses the PROV-DM concept, or how it should be used in context of semantic web or linked data.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ editorialNote: _NS$j("editorialNote"),
    /**
     * entity
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ entity: _NS$j("entity"),
    /**
     * Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm to indicate the property used to assert an unqualified provenance relation.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ unqualifiedForm: _NS$j("unqualifiedForm"),
    /**
     * Because prov:wasInfluencedBy is a broad relation, its more specific subproperties (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should be used when applicable.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasInfluencedBy: _NS$j("wasInfluencedBy"),
    /**
     * The _optional_ Activity of an Influence, which used, generated, invalidated, or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence (use prov:activity instead).
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadActivity: _NS$j("hadActivity"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ sharesDefinitionWith: _NS$j("sharesDefinitionWith"),
    /**
     * Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedInfluence: _NS$j("qualifiedInfluence"),
    /**
     * agent
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ agent: _NS$j("agent"),
    /**
     * An prov:Agent that had some (unspecified) responsibility for the occurrence of this prov:Activity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasAssociatedWith: _NS$j("wasAssociatedWith"),
    /**
     * If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedAssociation: _NS$j("qualifiedAssociation"),
    /**
     * Attribution is the ascribing of an entity to an agent.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasAttributedTo: _NS$j("wasAttributedTo"),
    /**
     * If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent :ag; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedAttribution: _NS$j("qualifiedAttribution"),
    /**
     * An activity a2 is dependent on or informed by another activity a1, by way of some unspecified entity that is generated by a1 and used by a2.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasInformedBy: _NS$j("wasInformedBy"),
    /**
     * If this Activity prov:wasInformedBy Activity :a, then it can qualify how it was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity :a; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedCommunication: _NS$j("qualifiedCommunication"),
    /**
     * An object property to express the accountability of an agent towards another agent. The subordinate agent acted on behalf of the responsible agent in an actual activity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ actedOnBehalfOf: _NS$j("actedOnBehalfOf"),
    /**
     * If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedDelegation: _NS$j("qualifiedDelegation"),
    /**
     * If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedDerivation: _NS$j("qualifiedDerivation"),
    /**
     * End is when an activity is deemed to have ended. An end may refer to an entity, known as trigger, that terminated the activity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasEndedBy: _NS$j("wasEndedBy"),
    /**
     * If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedEnd: _NS$j("qualifiedEnd"),
    /**
     * wasGeneratedBy
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasGeneratedBy: _NS$j("wasGeneratedBy"),
    /**
     * If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedGeneration: _NS$j("qualifiedGeneration"),
    /**
     * wasInvalidatedBy
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasInvalidatedBy: _NS$j("wasInvalidatedBy"),
    /**
     * If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity :a; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedInvalidation: _NS$j("qualifiedInvalidation"),
    /**
     * The Location of any resource.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ atLocation: _NS$j("atLocation"),
    /**
     * hadPrimarySource
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadPrimarySource: _NS$j("hadPrimarySource"),
    /**
     * If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedPrimarySource: _NS$j("qualifiedPrimarySource"),
    /**
     * An entity is derived from an original entity by copying, or 'quoting', some or all of it.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasQuotedFrom: _NS$j("wasQuotedFrom"),
    /**
     * If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation [ a prov:Quotation;  prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedQuotation: _NS$j("qualifiedQuotation"),
    /**
     * The _optional_ Role that an Entity assumed in the context of an Activity. For example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity :spoon; prov:hadRole roles:mixing_implement ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [2] comments in languages [NoLocale, en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadRole: _NS$j("hadRole"),
    /**
     * Start is when an activity is deemed to have started. A start may refer to an entity, known as trigger, that initiated the activity.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ wasStartedBy: _NS$j("wasStartedBy"),
    /**
     * If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedStart: _NS$j("qualifiedStart"),
    /**
     * A prov:Entity that was used by this prov:Activity. For example, :baking prov:used :spoon, :egg, :oven .
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ used: _NS$j("used"),
    /**
     * If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ qualifiedUsage: _NS$j("qualifiedUsage"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ aq: _NS$j("aq"),
    /**
     * The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ atTime: _NS$j("atTime"),
    /**
     * The time at which an activity ended. See also prov:startedAtTime.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ endedAtTime: _NS$j("endedAtTime"),
    /**
     * The time at which an entity was completely created and is available for use.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ generatedAtTime: _NS$j("generatedAtTime"),
    /**
     * The time at which an entity was invalidated (i.e., no longer usable).
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ invalidatedAtTime: _NS$j("invalidatedAtTime"),
    /**
     * The time at which an activity started. See also prov:endedAtTime.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ startedAtTime: _NS$j("startedAtTime"),
    /**
     * generated
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ generated: _NS$j("generated"),
    /**
     * influenced
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ influenced: _NS$j("influenced"),
    /**
     * The _optional_ Generation involved in an Entity's Derivation.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadGeneration: _NS$j("hadGeneration"),
    /**
     * hadMember
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadMember: _NS$j("hadMember"),
    /**
     * The _optional_ Plan adopted by an Agent in Association with some Activity. Plan specifications are out of the scope of this specification.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadPlan: _NS$j("hadPlan"),
    /**
     * The _optional_ Usage involved in an Entity's Derivation.
     *
     * The term has a description only in English, with [1] label in the language [NoLocale], but [1] comment in the language [en] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ hadUsage: _NS$j("hadUsage"),
    /**
     * invalidated
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ invalidated: _NS$j("invalidated"),
    /**
     * The position that this OWL term should be listed within documentation. The scope of the documentation (e.g., among all terms, among terms within a prov:category, among properties applying to a particular class, etc.) is unspecified.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ order: _NS$j("order"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ todo: _NS$j("todo"),
    /**
     * value
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
     */ value: _NS$j("value")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$i = "http://purl.org/linked-data/cube#";
function _NS$i(localName) {
    return _NAMESPACE$i + localName;
}
/**
 * This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).
 */ var QB = {
    PREFIX: "qb",
    NAMESPACE: _NAMESPACE$i,
    PREFIX_AND_NAMESPACE: {
        "qb": "http://purl.org/linked-data/cube#"
    },
    NS: _NS$i,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ DataSet: _NS$i("DataSet"),
    /**
     * Abstract superclass for everything that can have attributes and dimensions
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ Attachable: _NS$i("Attachable"),
    /**
     * A single observation in the cube, may have one or more associated measured values
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ Observation: _NS$i("Observation"),
    /**
     * A, possibly arbitrary, group of observations.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ ObservationGroup: _NS$i("ObservationGroup"),
    /**
     * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ Slice: _NS$i("Slice"),
    /**
     * Abstract super-property of all properties representing dimensions, attributes or measures
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ ComponentProperty: _NS$i("ComponentProperty"),
    /**
     * The class of components which represent the dimensions of the cube
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ DimensionProperty: _NS$i("DimensionProperty"),
    /**
     * Superclass of all coded ComponentProperties
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ CodedProperty: _NS$i("CodedProperty"),
    /**
     * The class of components which represent the measured value of the phenomenon being observed
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ MeasureProperty: _NS$i("MeasureProperty"),
    /**
     * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ AttributeProperty: _NS$i("AttributeProperty"),
    /**
     * Defines the structure of a DataSet or slice
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ DataStructureDefinition: _NS$i("DataStructureDefinition"),
    /**
     * Abstract class of things which reference one or more ComponentProperties
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ ComponentSet: _NS$i("ComponentSet"),
    /**
     * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ ComponentSpecification: _NS$i("ComponentSpecification"),
    /**
     * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ SliceKey: _NS$i("SliceKey"),
    /**
     * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ HierarchicalCodeList: _NS$i("HierarchicalCodeList"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * indicates the data set of which this observation is a part
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ dataSet: _NS$i("dataSet"),
    /**
     * indicates a observation contained within this slice of the data set
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ observation: _NS$i("observation"),
    /**
     * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ observationGroup: _NS$i("observationGroup"),
    /**
     * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ slice: _NS$i("slice"),
    /**
     * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ measureType: _NS$i("measureType"),
    /**
     * indicates the structure to which this data set conforms
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ structure: _NS$i("structure"),
    /**
     * indicates a component specification which is included in the structure of the dataset
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ component: _NS$i("component"),
    /**
     * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ componentProperty: _NS$i("componentProperty"),
    /**
     * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ order: _NS$i("order"),
    /**
     * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
      to components correspond to an attribute. Defaults to false (optional).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ componentRequired: _NS$i("componentRequired"),
    /**
     * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ componentAttachment: _NS$i("componentAttachment"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a dimension
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ dimension: _NS$i("dimension"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ measure: _NS$i("measure"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a attribute
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ attribute: _NS$i("attribute"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ measureDimension: _NS$i("measureDimension"),
    /**
     * indicates the sub-key corresponding to this slice
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ sliceStructure: _NS$i("sliceStructure"),
    /**
     * indicates a slice key which is used for slices in this dataset
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ sliceKey: _NS$i("sliceKey"),
    /**
     * gives the concept which is being measured or indicated by a ComponentProperty
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ concept: _NS$i("concept"),
    /**
     * gives the code list associated with a CodedProperty
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ codeList: _NS$i("codeList"),
    /**
     * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [en].
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ hierarchyRoot: _NS$i("hierarchyRoot"),
    /**
     * Specifies a property which relates a parent concept in the hierarchy to a child concept.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://purl.org/linked-data/cube
     */ parentChildProperty: _NS$i("parentChildProperty")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - RDF (Resource Description Framework) - a framework for representing information in the Web
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$h = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
function _NS$h(localName) {
    return _NAMESPACE$h + localName;
}
/**
 * [Generator provided] - RDF (Resource Description Framework) - a framework for representing information in the Web
 */ var RDF = {
    PREFIX: "rdf",
    NAMESPACE: _NAMESPACE$h,
    PREFIX_AND_NAMESPACE: {
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    },
    NS: _NS$h,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class of RDF properties.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ Property: _NS$h("Property"),
    /**
     * The datatype of RDF literals storing fragments of HTML content
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - http://www.w3.org/TR/rdf11-concepts/#section-html
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ HTML: _NS$h("HTML"),
    /**
     * The datatype of language-tagged string values
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - http://www.w3.org/TR/rdf11-concepts/#section-Graph-Literal
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ langString: _NS$h("langString"),
    /**
     * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - http://www.w3.org/TR/rdf-plain-literal/
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ PlainLiteral: _NS$h("PlainLiteral"),
    /**
     * The class of RDF statements.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ Statement: _NS$h("Statement"),
    /**
     * The class of unordered containers.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ Bag: _NS$h("Bag"),
    /**
     * The class of ordered containers.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ Seq: _NS$h("Seq"),
    /**
     * The class of containers of alternatives.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ Alt: _NS$h("Alt"),
    /**
     * The class of RDF Lists.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ List: _NS$h("List"),
    /**
     * The datatype of XML literal values.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ XMLLiteral: _NS$h("XMLLiteral"),
    /**
     * The datatype of RDF literals storing JSON content.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#the-rdf-json-datatype
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ JSON: _NS$h("JSON"),
    /**
     * A class representing a compound literal.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ CompoundLiteral: _NS$h("CompoundLiteral"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The subject is an instance of a class.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ type: _NS$h("type"),
    /**
     * The subject of the subject RDF statement.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ subject: _NS$h("subject"),
    /**
     * The predicate of the subject RDF statement.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ predicate: _NS$h("predicate"),
    /**
     * The object of the subject RDF statement.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ object: _NS$h("object"),
    /**
     * Idiomatic property used for structured values.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ value: _NS$h("value"),
    /**
     * The empty list, with no items in it. If the rest of a list is nil then the list has no more items in it.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ nil: _NS$h("nil"),
    /**
     * The first item in the subject RDF list.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ first: _NS$h("first"),
    /**
     * The rest of the subject RDF list after the first item.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ rest: _NS$h("rest"),
    /**
     * The language component of a CompoundLiteral.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ language: _NS$h("language"),
    /**
     * The base direction component of a CompoundLiteral.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * See also:
     *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
     *
     * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
     */ direction: _NS$h("direction")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - RDFS (RDF Schema) - a data-modelling vocabulary for RDF data
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$g = "http://www.w3.org/2000/01/rdf-schema#";
function _NS$g(localName) {
    return _NAMESPACE$g + localName;
}
/**
 * [Generator provided] - RDFS (RDF Schema) - a data-modelling vocabulary for RDF data
 */ var RDFS = {
    PREFIX: "rdfs",
    NAMESPACE: _NAMESPACE$g,
    PREFIX_AND_NAMESPACE: {
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#"
    },
    NS: _NS$g,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class resource, everything.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ Resource: _NS$g("Resource"),
    /**
     * The class of classes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ Class: _NS$g("Class"),
    /**
     * The class of literal values, eg. textual strings and integers.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ Literal: _NS$g("Literal"),
    /**
     * The class of RDF containers.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ Container: _NS$g("Container"),
    /**
     * The class of container membership properties, rdf:_1, rdf:_2, ...,
                      all of which are sub-properties of 'member'.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ ContainerMembershipProperty: _NS$g("ContainerMembershipProperty"),
    /**
     * The class of RDF datatypes.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ Datatype: _NS$g("Datatype"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Further information about the subject resource.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ seeAlso: _NS$g("seeAlso"),
    /**
     * The defininition of the subject resource.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ isDefinedBy: _NS$g("isDefinedBy"),
    /**
     * A human-readable name for the subject.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ label: _NS$g("label"),
    /**
     * A description of the subject resource.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ comment: _NS$g("comment"),
    /**
     * A range of the subject property.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ range: _NS$g("range"),
    /**
     * A domain of the subject property.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ domain: _NS$g("domain"),
    /**
     * The subject is a subclass of a class.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ subClassOf: _NS$g("subClassOf"),
    /**
     * The subject is a subproperty of a property.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ subPropertyOf: _NS$g("subPropertyOf"),
    /**
     * A member of the subject resource.
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
     */ member: _NS$g("member")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$f = "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#";
function _NS$f(localName) {
    return _NAMESPACE$f + localName;
}
/**
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */ var RLOG = {
    PREFIX: "rlog",
    NAMESPACE: _NAMESPACE$f,
    PREFIX_AND_NAMESPACE: {
        "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#"
    },
    NS: _NS$f,
    // *****************
    // All the Classes.
    // *****************
    /**
     * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html
     *
     * This term provides descriptions only in English.
     */ Level: _NS$f("Level"),
    /**
     * An entry in a log.
     *
     * This term provides descriptions only in English.
     */ Entry: _NS$f("Entry"),
    /**
     * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
     *
     * This term provides descriptions only in English.
     */ StatusCode: _NS$f("StatusCode"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The ALL has the lowest possible rank and is intended to turn on all logging.
     *
     * This term provides descriptions only in English.
     */ ALL: _NS$f("ALL"),
    /**
     * Attention: the ids here can change, they are just used to define an order over the levels!
     *
     * This term provides descriptions only in English.
     */ priority: _NS$f("priority"),
    /**
     * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
     *
     * This term provides descriptions only in English.
     */ DEBUG: _NS$f("DEBUG"),
    /**
     * The ERROR level designates error events that might still allow the application to continue running.
     *
     * This term provides descriptions only in English.
     */ ERROR: _NS$f("ERROR"),
    /**
     * The FATAL level designates very severe error events that will presumably lead the application to abort.
     *
     * This term provides descriptions only in English.
     */ FATAL: _NS$f("FATAL"),
    /**
     * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
     *
     * This term provides descriptions only in English.
     */ INFO: _NS$f("INFO"),
    /**
     * The OFF has the highest possible rank and is intended to turn off logging.
     *
     * This term provides descriptions only in English.
     */ OFF: _NS$f("OFF"),
    /**
     * The TRACE Level designates finer-grained informational events than the DEBUG.
     *
     * This term provides descriptions only in English.
     */ TRACE: _NS$f("TRACE"),
    /**
     * The WARN level designates potentially harmful situations.
     *
     * This term provides descriptions only in English.
     */ WARN: _NS$f("WARN"),
    /**
     * Outputs the fully qualified class name of the caller issuing the logging request.
     *
     * This term provides descriptions only in English.
     */ className: _NS$f("className"),
    /**
     * The numerical value of the code, e.g. 200, 404 or 42.
     *
     * This term provides descriptions only in English.
     */ codeId: _NS$f("codeId"),
    /**
     * Logging datetime (or just date)
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ date: _NS$f("date"),
    /**
     * Links a log message to a status code.
     *
     * This term provides descriptions only in English.
     */ hasCode: _NS$f("hasCode"),
    /**
     * logLevel
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ level: _NS$f("level"),
    /**
     * Logging message
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ message: _NS$f("message"),
    /**
     * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.
     *
     * This term provides descriptions only in English.
     */ resource: _NS$f("resource")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e., labels) and translations for comments
 (e.g., for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$e = "http://schema.org/";
function _NS$e(localName) {
    return _NAMESPACE$e + localName;
}
/**
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e., labels) and translations for comments
 (e.g., for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */ var SCHEMA_INRUPT = {
    PREFIX: "schema-inrupt",
    NAMESPACE: _NAMESPACE$e,
    PREFIX_AND_NAMESPACE: {
        "schema-inrupt": "http://schema.org/"
    },
    NS: _NS$e,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An organization such as a school, NGO, corporation, club, etc.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ Organization: _NS$e("Organization"),
    /**
     * A person (alive, dead, undead, or fictional).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ Person: _NS$e("Person"),
    /**
     * An image file.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ ImageObject: _NS$e("ImageObject"),
    /**
     * Data type: URL.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ URL: _NS$e("URL"),
    /**
     * Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ MedicalTherapy: _NS$e("MedicalTherapy"),
    /**
     * An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ EducationalOccupationalCredential: _NS$e("EducationalOccupationalCredential"),
    /**
     * The mailing address.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ PostalAddress: _NS$e("PostalAddress"),
    /**
     * Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
     *
     * This term has [5] labels and comments, in the languages [NoLocale, de, es, fr, it].
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ Product: _NS$e("Product"),
    /**
     * An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ Event: _NS$e("Event"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * An alias for the item.
     *
     * This term has [6] labels and comments, in the languages [NoLocale, de, en, es, fr, it].
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ alternateName: _NS$e("alternateName"),
    /**
     * Given name. In the U.S., the first name of a Person.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ givenName: _NS$e("givenName"),
    /**
     * Family name. In the U.S., the last name of a Person.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ familyName: _NS$e("familyName"),
    /**
     * An additional name for a Person, can be used for a middle name.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ additionalName: _NS$e("additionalName"),
    /**
     * A license document that applies to this content, typically indicated by URL.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ license: _NS$e("license"),
    /**
     * The name of the item.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ name: _NS$e("name"),
    /**
     * The textual content of this CreativeWork.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ text: _NS$e("text"),
    /**
     * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
          
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * See also:
     *  - https://schema.org/docs/datamodel.html#identifierBg
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ identifier: _NS$e("identifier"),
    /**
     * A description of the item.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ description: _NS$e("description"),
    /**
     * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * See also:
     *  - https://schema.org/ImageObject
     *  - https://schema.org/URL
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ image: _NS$e("image"),
    /**
     * URL of the item.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ url: _NS$e("url"),
    /**
     * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ startTime: _NS$e("startTime"),
    /**
     * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ endTime: _NS$e("endTime"),
    /**
     * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ startDate: _NS$e("startDate"),
    /**
     * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ endDate: _NS$e("endDate"),
    /**
     * Email address.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ email: _NS$e("email"),
    /**
     * A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ primaryPrevention: _NS$e("primaryPrevention"),
    /**
     * Specific qualifications required for this role or Occupation.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ qualifications: _NS$e("qualifications"),
    /**
     * A person or organization attending the event.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ attendee: _NS$e("attendee"),
    /**
     * Physical address of the item.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ address: _NS$e("address"),
    /**
     * The street address. For example, 1600 Amphitheatre Pkwy.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ streetAddress: _NS$e("streetAddress"),
    /**
     * The locality in which the street address is, and which is in the region. For example, Mountain View.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ addressLocality: _NS$e("addressLocality"),
    /**
     * The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ addressRegion: _NS$e("addressRegion"),
    /**
     * The postal code. For example, 94043.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ postalCode: _NS$e("postalCode"),
    /**
     * The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ addressCountry: _NS$e("addressCountry"),
    /**
     * Password, PIN, or access code needed for delivery (e.g. from a locker).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ accessCode: _NS$e("accessCode"),
    /**
     * The identifier for the account the payment will be applied to.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ accountId: _NS$e("accountId"),
    /**
     * The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ serialNumber: _NS$e("serialNumber"),
    /**
     * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ productID: _NS$e("productID"),
    /**
     * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ brand: _NS$e("brand"),
    /**
     * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ model: _NS$e("model"),
    /**
     * The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ value: _NS$e("value"),
    /**
     * The distance travelled, e.g. exercising or travelling.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ distance: _NS$e("distance"),
    /**
     * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ latitude: _NS$e("latitude"),
    /**
     * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ longitude: _NS$e("longitude"),
    /**
     * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
     *
     * This term provides multilingual descriptions, with [6] labels in languages [NoLocale, de, en, es, fr, it], but [5] comments in languages [NoLocale, de, es, fr, it] (so the difference is only between English and NoLocale, which we consider the same).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
     */ dateModified: _NS$e("dateModified")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - SPARQL Service Description vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$d = "http://www.w3.org/ns/sparql-service-description#";
function _NS$d(localName) {
    return _NAMESPACE$d + localName;
}
/**
 * [Generator provided] - SPARQL Service Description vocabulary
 */ var SD = {
    PREFIX: "sd",
    NAMESPACE: _NAMESPACE$d,
    PREFIX_AND_NAMESPACE: {
        "sd": "http://www.w3.org/ns/sparql-service-description#"
    },
    NS: _NS$d,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An instance of sd:Service represents a SPARQL service made available via the SPARQL Protocol.
     *
     * This term provides descriptions only with no explicit locale.
     */ Service: _NS$d("Service"),
    /**
     * An instance of sd:Feature represents a feature of a SPARQL service. Specific types of features include functions, aggregates, languages, and entailment regimes and profiles. This document defines five instances of sd:Feature: sd:DereferencesURIs, sd:UnionDefaultGraph, sd:RequiresDataset, sd:EmptyGraphs, and sd:BasicFederatedQuery.
     *
     * This term provides descriptions only with no explicit locale.
     */ Feature: _NS$d("Feature"),
    /**
     * An instance of sd:EntailmentRegime represents an entailment regime used in basic graph pattern matching (as described by SPARQL 1.1 Query Language).
     *
     * This term provides descriptions only with no explicit locale.
     */ EntailmentRegime: _NS$d("EntailmentRegime"),
    /**
     * An instance of sd:NamedGraph represents a named graph having a name (via sd:name) and an optional graph description (via sd:graph).
     *
     * This term provides descriptions only with no explicit locale.
     */ NamedGraph: _NS$d("NamedGraph"),
    /**
     * An instance of sd:EntailmentProfile represents a profile of an entailment regime. An entailment profile MAY impose restrictions on what constitutes valid RDF with respect to entailment.
     *
     * This term provides descriptions only with no explicit locale.
     */ EntailmentProfile: _NS$d("EntailmentProfile"),
    /**
     * An instance of sd:Function represents a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
     *
     * This term provides descriptions only with no explicit locale.
     */ Function: _NS$d("Function"),
    /**
     * An instance of sd:Aggregate represents an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE.
     *
     * This term provides descriptions only with no explicit locale.
     */ Aggregate: _NS$d("Aggregate"),
    /**
     * An instance of sd:Language represents one of the SPARQL languages, including specific configurations providing particular features or extensions. This document defines three instances of sd:Language: sd:SPARQL10Query, sd:SPARQL11Query, and sd:SPARQL11Update.
     *
     * This term provides descriptions only with no explicit locale.
     */ Language: _NS$d("Language"),
    /**
     * An instance of sd:Dataset represents a RDF Dataset comprised of a default graph and zero or more named graphs.
     *
     * This term provides descriptions only with no explicit locale.
     */ Dataset: _NS$d("Dataset"),
    /**
     * An instance of sd:GraphCollection represents a collection of zero or more named graph descriptions. Each named graph description belonging to an sd:GraphCollection MUST be linked with the sd:namedGraph predicate.
     *
     * This term provides descriptions only with no explicit locale.
     */ GraphCollection: _NS$d("GraphCollection"),
    /**
     * An instance of sd:Graph represents the description of an RDF graph.
     *
     * This term provides descriptions only with no explicit locale.
     */ Graph: _NS$d("Graph"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The SPARQL endpoint of an sd:Service that implements the SPARQL Protocol service. The object of the sd:endpoint property is an IRI.
     *
     * This term provides descriptions only with no explicit locale.
     */ endpoint: _NS$d("endpoint"),
    /**
     * Relates an instance of sd:Service with a resource representing a supported feature.
     *
     * This term provides descriptions only with no explicit locale.
     */ feature: _NS$d("feature"),
    /**
     * Relates an instance of sd:Service with a resource representing an entailment regime used for basic graph pattern matching. This property is intended for use when a single entailment regime by default applies to all graphs in the default dataset of the service. In situations where a different entailment regime applies to a specific graph in the dataset, the sd:entailmentRegime property should be used to indicate this fact in the description of that graph.
     *
     * This term provides descriptions only with no explicit locale.
     */ defaultEntailmentRegime: _NS$d("defaultEntailmentRegime"),
    /**
     * Relates a named graph description with a resource representing an entailment regime used for basic graph pattern matching over that graph.
     *
     * This term provides descriptions only with no explicit locale.
     */ entailmentRegime: _NS$d("entailmentRegime"),
    /**
     * Relates an instance of sd:Service with a resource representing a supported profile of the default entailment regime (as declared by sd:defaultEntailmentRegime).
     *
     * This term provides descriptions only with no explicit locale.
     */ defaultSupportedEntailmentProfile: _NS$d("defaultSupportedEntailmentProfile"),
    /**
     * Relates a named graph description with a resource representing a supported profile of the entailment regime (as declared by sd:entailmentRegime) used for basic graph pattern matching over that graph.
     *
     * This term provides descriptions only with no explicit locale.
     */ supportedEntailmentProfile: _NS$d("supportedEntailmentProfile"),
    /**
     * Relates an instance of sd:Service to a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
     *
     * This term provides descriptions only with no explicit locale.
     */ extensionFunction: _NS$d("extensionFunction"),
    /**
     * Relates an instance of sd:Service to an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE
     *
     * This term provides descriptions only with no explicit locale.
     */ extensionAggregate: _NS$d("extensionAggregate"),
    /**
     * Relates an instance of sd:Service to a resource representing an implemented extension to the SPARQL Query or Update language.
     *
     * This term provides descriptions only with no explicit locale.
     */ languageExtension: _NS$d("languageExtension"),
    /**
     * Relates an instance of sd:Service to a SPARQL language (e.g. Query and Update) that it implements.
     *
     * This term provides descriptions only with no explicit locale.
     */ supportedLanguage: _NS$d("supportedLanguage"),
    /**
     * Relates an instance of sd:Service to a resource representing an implemented feature that extends the SPARQL Query or Update language and that is accessed by using the named property.
     *
     * This term provides descriptions only with no explicit locale.
     */ propertyFeature: _NS$d("propertyFeature"),
    /**
     * Relates an instance of sd:Service to a description of the default dataset available when no explicit dataset is specified in the query, update request or via protocol parameters.
     *
     * This term provides descriptions only with no explicit locale.
     */ defaultDataset: _NS$d("defaultDataset"),
    /**
     * Relates an instance of sd:Service to a description of the graphs which are allowed in the construction of a dataset either via the SPARQL Protocol, with FROM/FROM NAMED clauses in a query, or with USING/USING NAMED in an update request, if the service limits the scope of dataset construction.
     *
     * This term provides descriptions only with no explicit locale.
     */ availableGraphs: _NS$d("availableGraphs"),
    /**
     * Relates an instance of sd:Service to a format that is supported for serializing query results.
     *
     * This term provides descriptions only with no explicit locale.
     */ resultFormat: _NS$d("resultFormat"),
    /**
     * Relates an instance of sd:Service to a format that is supported for parsing RDF input; for example, via a SPARQL 1.1 Update LOAD statement, or when URIs are dereferenced in FROM/FROM NAMED/USING/USING NAMED clauses.
     *
     * This term provides descriptions only with no explicit locale.
     */ inputFormat: _NS$d("inputFormat"),
    /**
     * Relates an instance of sd:Dataset to the description of its default graph.
     *
     * This term provides descriptions only with no explicit locale.
     */ defaultGraph: _NS$d("defaultGraph"),
    /**
     * Relates an instance of sd:GraphCollection (or its subclass sd:Dataset) to the description of one of its named graphs. The description of such a named graph MUST include the sd:name property and MAY include the sd:graph property.
     *
     * This term provides descriptions only with no explicit locale.
     */ namedGraph: _NS$d("namedGraph"),
    /**
     * Relates a named graph to the name by which it may be referenced in a FROM/FROM NAMED clause. The object of the sd:name property is an IRI.
     *
     * This term provides descriptions only with no explicit locale.
     */ name: _NS$d("name"),
    /**
     * Relates a named graph to its graph description.
     *
     * This term provides descriptions only with no explicit locale.
     */ graph: _NS$d("graph")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - SDMX Dimension Vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$c = "http://purl.org/linked-data/sdmx/2009/dimension#";
function _NS$c(localName) {
    return _NAMESPACE$c + localName;
}
/**
 * [Generator provided] - SDMX Dimension Vocabulary
 */ var SDMX_DIMENSION = {
    PREFIX: "sdmx-dimension",
    NAMESPACE: _NAMESPACE$c,
    PREFIX_AND_NAMESPACE: {
        "sdmx-dimension": "http://purl.org/linked-data/sdmx/2009/dimension#"
    },
    NS: _NS$c,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of time that a person has lived or a thing has existed.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ age: _NS$c("age"),
    /**
     * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ civilStatus: _NS$c("civilStatus"),
    /**
     * Monetary denomination of the object being measured.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ currency: _NS$c("currency"),
    /**
     * The highest level of an educational programme the person has successfully completed.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ educationLev: _NS$c("educationLev"),
    /**
     * The time interval at which observations occur over a given time period.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ freq: _NS$c("freq"),
    /**
     * Job or position held by an individual who performs a set of tasks and duties.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ occupation: _NS$c("occupation"),
    /**
     * The country or geographic area to which the measured statistical phenomenon relates.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ refArea: _NS$c("refArea"),
    /**
     * The period of time or point in time to which the measured observation is intended to refer.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ refPeriod: _NS$c("refPeriod"),
    /**
     * The state of being male or female.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ sex: _NS$c("sex"),
    /**
     * The period of time or point in time to which the measured observation refers.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
     */ timePeriod: _NS$c("timePeriod")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - Security vocabulary
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$b = "https://w3id.org/security#";
function _NS$b(localName) {
    return _NAMESPACE$b + localName;
}
/**
 * [Generator provided] - Security vocabulary
 */ var SEC = {
    PREFIX: "sec",
    NAMESPACE: _NAMESPACE$b,
    PREFIX_AND_NAMESPACE: {
        "sec": "https://w3id.org/security#"
    },
    NS: _NS$b,
    // *****************
    // All the Classes.
    // *****************
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EcdsaSecp256k1Signature2019: _NS$b("EcdsaSecp256k1Signature2019"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EcdsaSecp256k1RecoverySignature2020: _NS$b("EcdsaSecp256k1RecoverySignature2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EcdsaSecp256k1VerificationKey2019: _NS$b("EcdsaSecp256k1VerificationKey2019"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EcdsaSecp256k1RecoveryMethod2020: _NS$b("EcdsaSecp256k1RecoveryMethod2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ RsaSignature2018: _NS$b("RsaSignature2018"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ RsaVerificationKey2018: _NS$b("RsaVerificationKey2018"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ SchnorrSecp256k1Signature2019: _NS$b("SchnorrSecp256k1Signature2019"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ SchnorrSecp256k1VerificationKey2019: _NS$b("SchnorrSecp256k1VerificationKey2019"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ServiceEndpointProxyService: _NS$b("ServiceEndpointProxyService"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Digest: _NS$b("Digest"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EncryptedMessage: _NS$b("EncryptedMessage"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Signature: _NS$b("Signature"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ LinkedDataSignature2015: _NS$b("LinkedDataSignature2015"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ X25519KeyAgreementKey2019: _NS$b("X25519KeyAgreementKey2019"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Ed25519VerificationKey2018: _NS$b("Ed25519VerificationKey2018"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ BbsBlsSignature2020: _NS$b("BbsBlsSignature2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ BbsBlsSignatureProof2020: _NS$b("BbsBlsSignatureProof2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Bls12381G1Key2020: _NS$b("Bls12381G1Key2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Bls12381G2Key2020: _NS$b("Bls12381G2Key2020"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Key: _NS$b("Key"),
    // *******************
    // All the Properties.
    // *******************
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ cipherAlgorithm: _NS$b("cipherAlgorithm"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ cipherData: _NS$b("cipherData"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ digestAlgorithm: _NS$b("digestAlgorithm"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ digestValue: _NS$b("digestValue"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ cipherKey: _NS$b("cipherKey"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ blockchainAccountId: _NS$b("blockchainAccountId"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ethereumAddress: _NS$b("ethereumAddress"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ expires: _NS$b("expires"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ initializationVector: _NS$b("initializationVector"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ nonce: _NS$b("nonce"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ canonicalizationAlgorithm: _NS$b("canonicalizationAlgorithm"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ owner: _NS$b("owner"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ password: _NS$b("password"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ privateKeyPem: _NS$b("privateKeyPem"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ verificationMethod: _NS$b("verificationMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKey: _NS$b("publicKey"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ assertionMethod: _NS$b("assertionMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ authenticationMethod: _NS$b("authenticationMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ capabilityDelegationMethod: _NS$b("capabilityDelegationMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ capabilityInvocationMethod: _NS$b("capabilityInvocationMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ keyAgreementMethod: _NS$b("keyAgreementMethod"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyBase58: _NS$b("publicKeyBase58"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyJwk: _NS$b("publicKeyJwk"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyPem: _NS$b("publicKeyPem"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyHex: _NS$b("publicKeyHex"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyMultibase: _NS$b("publicKeyMultibase"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ publicKeyService: _NS$b("publicKeyService"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ revoked: _NS$b("revoked"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ proof: _NS$b("proof"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ jws: _NS$b("jws"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ proofPurpose: _NS$b("proofPurpose"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ challenge: _NS$b("challenge"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ domain: _NS$b("domain"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ expiration: _NS$b("expiration"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ proofValue: _NS$b("proofValue"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ signature: _NS$b("signature"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ signatureValue: _NS$b("signatureValue"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ signatureAlgorithm: _NS$b("signatureAlgorithm"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ service: _NS$b("service"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ serviceEndpoint: _NS$b("serviceEndpoint"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ x509CertificateChain: _NS$b("x509CertificateChain"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ x509CertificateFingerprint: _NS$b("x509CertificateFingerprint"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ allowedAction: _NS$b("allowedAction"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ capability: _NS$b("capability"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ capabilityAction: _NS$b("capabilityAction"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ capabilityChain: _NS$b("capabilityChain"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ caveat: _NS$b("caveat"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ delegator: _NS$b("delegator"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ invocationTarget: _NS$b("invocationTarget"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ invoker: _NS$b("invoker")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex-semantics]] along with the default JSON-LD Context and shape expression to validate RDF versions of shapes.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$a = "http://www.w3.org/ns/shex#";
function _NS$a(localName) {
    return _NAMESPACE$a + localName;
}
/**
 * This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex-semantics]] along with the default JSON-LD Context and shape expression to validate RDF versions of shapes.
 */ var SHEX = {
    PREFIX: "shex",
    NAMESPACE: _NAMESPACE$a,
    PREFIX_AND_NAMESPACE: {
        "shex": "http://www.w3.org/ns/shex#"
    },
    NS: _NS$a,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Annotations provide a format-independent way to provide additional information about elements in a schema.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Annotation: _NS$a("Annotation"),
    /**
     * A TripleExpression composed of one or more sub-expressions, all of which must match.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ EachOf: _NS$a("EachOf"),
    /**
     * The abstract class of Triple Expressions.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ TripleExpression: _NS$a("TripleExpression"),
    /**
     * An IRI prefix used for matching IRIs.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ IriStem: _NS$a("IriStem"),
    /**
     * Abstract class for Stems
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Stem: _NS$a("Stem"),
    /**
     * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ IriStemRange: _NS$a("IriStemRange"),
    /**
     * Abstract Class for Stem Ranges
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ StemRange: _NS$a("StemRange"),
    /**
     * An Language tag used for matching Literal Languages.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Language: _NS$a("Language"),
    /**
     * An Language prefix used for matching Literal Languages.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ LanguageStem: _NS$a("LanguageStem"),
    /**
     * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ LanguageStemRange: _NS$a("LanguageStemRange"),
    /**
     * An Literal prefix used for matching Literals.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ LiteralStem: _NS$a("LiteralStem"),
    /**
     * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ LiteralStemRange: _NS$a("LiteralStemRange"),
    /**
     * A constraint on the type or value of an RDF Node.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ NodeConstraint: _NS$a("NodeConstraint"),
    /**
     * The abstract class of Shape Expressions.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ ShapeExpression: _NS$a("ShapeExpression"),
    /**
     * The set of kinds of RDF Nodes.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ NodeKind: _NS$a("NodeKind"),
    /**
     * A TripleExpression composed of one or more sub-expressions, one of which must match.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ OneOf: _NS$a("OneOf"),
    /**
     * A Schema contains the set of shapes, used for matching a focus node.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Schema: _NS$a("Schema"),
    /**
     * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ SemAct: _NS$a("SemAct"),
    /**
     * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Shape: _NS$a("Shape"),
    /**
     * A ShapeExpression composed of one or more sub-expressions, all of which must match.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ ShapeAnd: _NS$a("ShapeAnd"),
    /**
     * A reference to a shape defined in some external Schema.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ ShapeExternal: _NS$a("ShapeExternal"),
    /**
     * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ ShapeNot: _NS$a("ShapeNot"),
    /**
     * A ShapeExpression composed of one or more sub-expressions, one of which must match.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ ShapeOr: _NS$a("ShapeOr"),
    /**
     * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ TripleConstraint: _NS$a("TripleConstraint"),
    /**
     * Indicates that a stem is a Wildcard, rather than a URI prefix.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ Wildcard: _NS$a("Wildcard"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Annotations on a TripleExpression.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ annotation: _NS$a("annotation"),
    /**
     * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ closed: _NS$a("closed"),
    /**
     * Code executed by Semantic Action.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ code: _NS$a("code"),
    /**
     * A datatype constraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ datatype: _NS$a("datatype"),
    /**
     * Values that are excluded from value matching.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ exclusion: _NS$a("exclusion"),
    /**
     * Expression associated with the TripleExpression.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ expression: _NS$a("expression"),
    /**
     * List of 2 or more expressions associated with the TripleExpression.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ expressions: _NS$a("expressions"),
    /**
     * Properties which may have extra values beyond those matched through a constraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ extra: _NS$a("extra"),
    /**
     * Regular expression flags
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ flags: _NS$a("flags"),
    /**
     * for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ fractiondigits: _NS$a("fractiondigits"),
    /**
     * Abstract property of numeric facets on a NodeConstraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ numericFacet: _NS$a("numericFacet"),
    /**
     * An abstract property of string and numeric facets on a NodeConstraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ xsFacet: _NS$a("xsFacet"),
    /**
     * Constrains the subject of a triple, rather than the object.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ inverse: _NS$a("inverse"),
    /**
     * The value used to match the language tag of a language-tagged string.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ languageTag: _NS$a("languageTag"),
    /**
     * The exact length of the value of the cell.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ length: _NS$a("length"),
    /**
     * An abstract property of string facets on a NodeConstraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ stringFacet: _NS$a("stringFacet"),
    /**
     * Maximum number of times this TripleExpression may match; -1 for “*”
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ max: _NS$a("max"),
    /**
     * An atomic property that contains a single number that is the maximum valid value (exclusive).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ maxexclusive: _NS$a("maxexclusive"),
    /**
     * An atomic property that contains a single number that is the maximum valid value (inclusive).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ maxinclusive: _NS$a("maxinclusive"),
    /**
     * A numeric atomic property that contains a single integer that is the maximum length of the value.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ maxlength: _NS$a("maxlength"),
    /**
     * Minimum number of times this TripleExpression may match.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ min: _NS$a("min"),
    /**
     * An atomic property that contains a single number that is the minimum valid value (exclusive).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ minexclusive: _NS$a("minexclusive"),
    /**
     * An atomic property that contains a single number that is the minimum valid value (inclusive).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ mininclusive: _NS$a("mininclusive"),
    /**
     * An atomic property that contains a single integer that is the minimum length of the value.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ minlength: _NS$a("minlength"),
    /**
     * Identifier of SemAct extension.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ name: _NS$a("name"),
    /**
     * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ nodeKind: _NS$a("nodeKind"),
    /**
     * The object of an Annotation.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ object: _NS$a("object"),
    /**
     * A regular expression used for matching a value.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ pattern: _NS$a("pattern"),
    /**
     * The predicate of a TripleConstraint or Annotation.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ predicate: _NS$a("predicate"),
    /**
     * Semantic Actions on this TripleExpression.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ semActs: _NS$a("semActs"),
    /**
     * Shape Expression referenced by this shape.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ shapeExpr: _NS$a("shapeExpr"),
    /**
     * A list of 2 or more Shape Expressions referenced by this shape.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ shapeExprs: _NS$a("shapeExprs"),
    /**
     * Shapes in this Schema.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ shapes: _NS$a("shapes"),
    /**
     * A ShapeExpression matched against the focus node prior to any other mapped expressions.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ start: _NS$a("start"),
    /**
     * Semantic Actions run on the Schema.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ startActs: _NS$a("startActs"),
    /**
     * A stem value used for matching or excluding values.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ stem: _NS$a("stem"),
    /**
     * for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ totaldigits: _NS$a("totaldigits"),
    /**
     * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ valueExpr: _NS$a("valueExpr"),
    /**
     * A value restriction on a NodeConstraint.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/ns/shex#
     */ values: _NS$a("values")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * SIOC (Semantically-Interlinked Online Communities) is an ontology for describing the information in online communities.
This information can be used to export information from online communities and to link them together. The scope of the application areas that SIOC can be used for includes (and is not limited to) weblogs, message boards, mailing lists and chat channels.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$9 = "http://rdfs.org/sioc/ns#";
function _NS$9(localName) {
    return _NAMESPACE$9 + localName;
}
/**
 * SIOC (Semantically-Interlinked Online Communities) is an ontology for describing the information in online communities.
This information can be used to export information from online communities and to link them together. The scope of the application areas that SIOC can be used for includes (and is not limited to) weblogs, message boards, mailing lists and chat channels.
 */ var SIOC = {
    PREFIX: "sioc",
    NAMESPACE: _NAMESPACE$9,
    PREFIX_AND_NAMESPACE: {
        "sioc": "http://rdfs.org/sioc/ns#"
    },
    NS: _NS$9,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Community is a high-level concept that defines an online community and what it consists of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Community: _NS$9("Community"),
    /**
     * An Item is something which can be in a Container.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Item: _NS$9("Item"),
    /**
     * A Role is a function of a UserAccount within a scope of a particular Forum, Site, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Role: _NS$9("Role"),
    /**
     * A user account in an online community site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ UserAccount: _NS$9("UserAccount"),
    /**
     * An area in which content Items are contained.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Container: _NS$9("Container"),
    /**
     * A set of UserAccounts whose owners have a common purpose or interest. Can be used for access control purposes.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Usergroup: _NS$9("Usergroup"),
    /**
     * A Space is a place where data resides, e.g. on a website, desktop, fileshare, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Space: _NS$9("Space"),
    /**
     * A discussion area on which Posts or entries are made.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Forum: _NS$9("Forum"),
    /**
     * An article or message that can be posted to a Forum.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Post: _NS$9("Post"),
    /**
     * A Site can be the location of an online community or set of communities, with UserAccounts and Usergroups creating Items in a set of Containers. It can be thought of as a web-accessible data Space.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Site: _NS$9("Site"),
    /**
     * A container for a series of threaded discussion Posts or Items.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ Thread: _NS$9("Thread"),
    /**
     * UserAccount is now preferred. This is a deprecated class for a User in an online community site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ User: _NS$9("User"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Specifies that this Item is about a particular resource, e.g. a Post describing a book, hotel, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ about: _NS$9("about"),
    /**
     * Refers to the foaf:Agent or foaf:Person who owns this sioc:UserAccount.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ account_of: _NS$9("account_of"),
    /**
     * Refers to who (e.g. a UserAccount, e-mail address, etc.) a particular Item is addressed to.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ addressed_to: _NS$9("addressed_to"),
    /**
     * A Site that the UserAccount is an administrator of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ administrator_of: _NS$9("administrator_of"),
    /**
     * A UserAccount that is an administrator of this Site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_administrator: _NS$9("has_administrator"),
    /**
     * The URI of a file attached to an Item.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ attachment: _NS$9("attachment"),
    /**
     * An image or depiction used to represent this UserAccount.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ avatar: _NS$9("avatar"),
    /**
     * An Item that this Container contains.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ container_of: _NS$9("container_of"),
    /**
     * The Container to which this Item belongs.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_container: _NS$9("has_container"),
    /**
     * The content of the Item in plain text format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ content: _NS$9("content"),
    /**
     * A resource that the UserAccount is a creator of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ creator_of: _NS$9("creator_of"),
    /**
     * This is the UserAccount that made this resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_creator: _NS$9("has_creator"),
    /**
     * When this was delivered, in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ delivered_at: _NS$9("delivered_at"),
    /**
     * The Item that this discussion is about.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ discussion_of: _NS$9("discussion_of"),
    /**
     * A discussion that is related to this Item. The discussion can be anything, for example, a sioc:Forum or sioc:Thread, a sioct:WikiArticle or simply a foaf:Document.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_discussion: _NS$9("has_discussion"),
    /**
     * An electronic mail address of the UserAccount.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ email: _NS$9("email"),
    /**
     * An electronic mail address of the UserAccount, encoded using SHA1.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ email_sha1: _NS$9("email_sha1"),
    /**
     * This links Items to embedded statements, facts and structured content.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ embeds_knowledge: _NS$9("embeds_knowledge"),
    /**
     * A feed (e.g. RSS, Atom, etc.) pertaining to this resource (e.g. for a Forum, Site, UserAccount, etc.).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ feed: _NS$9("feed"),
    /**
     * Indicates that one UserAccount follows another UserAccount (e.g. for microblog posts or other content item updates).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ follows: _NS$9("follows"),
    /**
     * A UserAccount that has this Role.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ function_of: _NS$9("function_of"),
    /**
     * A Role that this UserAccount has.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_function: _NS$9("has_function"),
    /**
     * A URI for the application used to generate this Item.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ generator: _NS$9("generator"),
    /**
     * The Site that hosts this Container.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_host: _NS$9("has_host"),
    /**
     * A Container that is hosted on this Site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ host_of: _NS$9("host_of"),
    /**
     * A data Space which this resource is a part of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_space: _NS$9("has_space"),
    /**
     * A resource which belongs to this data Space.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ space_of: _NS$9("space_of"),
    /**
     * A UserAccount that is a member of this Usergroup.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_member: _NS$9("has_member"),
    /**
     * A Usergroup that this UserAccount is a member of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ member_of: _NS$9("member_of"),
    /**
     * A UserAccount that is a moderator of this Forum.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_moderator: _NS$9("has_moderator"),
    /**
     * A Forum that a UserAccount is a moderator of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ moderator_of: _NS$9("moderator_of"),
    /**
     * A UserAccount that modified this resource (e.g. Item, Container, Space).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_modifier: _NS$9("has_modifier"),
    /**
     * A resource that this UserAccount has modified.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ modifier_of: _NS$9("modifier_of"),
    /**
     * A UserAccount that this resource is owned by.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_owner: _NS$9("has_owner"),
    /**
     * A resource owned by a particular UserAccount, for example, a weblog or image gallery.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ owner_of: _NS$9("owner_of"),
    /**
     * A Container or Forum that this Container or Forum is a child of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_parent: _NS$9("has_parent"),
    /**
     * A child Container or Forum that this Container or Forum is a parent of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ parent_of: _NS$9("parent_of"),
    /**
     * Points to an Item or Post that is a reply or response to this Item or Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_reply: _NS$9("has_reply"),
    /**
     * Links to an Item or Post which this Item or Post is a reply to.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ reply_of: _NS$9("reply_of"),
    /**
     * Related resources for this resource, e.g. for Posts, perhaps determined implicitly from topics or references.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ related_to: _NS$9("related_to"),
    /**
     * A resource that this Role applies to.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_scope: _NS$9("has_scope"),
    /**
     * A Role that has a scope of this resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ scope_of: _NS$9("scope_of"),
    /**
     * A UserAccount that is subscribed to this Container.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://rdfs.org/sioc/ns#feed
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_subscriber: _NS$9("has_subscriber"),
    /**
     * A Container that a UserAccount is subscribed to.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://rdfs.org/sioc/ns#feed
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ subscriber_of: _NS$9("subscriber_of"),
    /**
     * Points to a Usergroup that has certain access to this Space.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_usergroup: _NS$9("has_usergroup"),
    /**
     * A Space that the Usergroup has access to.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ usergroup_of: _NS$9("usergroup_of"),
    /**
     * An identifier of a SIOC concept instance. For example, a user ID. Must be unique for instances of each type of SIOC concept within the same site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ id: _NS$9("id"),
    /**
     * The IP address used when creating this Item, UserAccount, etc. This can be associated with a creator. Some wiki articles list the IP addresses for the creator or modifiers when the usernames are absent.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ ip_address: _NS$9("ip_address"),
    /**
     * The date and time of the last activity associated with a SIOC concept instance, and expressed in ISO 8601 format. This could be due to a reply Post or Comment, a modification to an Item, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ last_activity_date: _NS$9("last_activity_date"),
    /**
     * The date and time of the last Post (or Item) in a Forum (or a Container), in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ last_item_date: _NS$9("last_item_date"),
    /**
     * The date and time of the last reply Post or Comment, which could be associated with a starter Item or Post or with a Thread, and expressed in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ last_reply_date: _NS$9("last_reply_date"),
    /**
     * Links to the latest revision of this Item or Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ latest_version: _NS$9("latest_version"),
    /**
     * Used to indicate some form of endorsement by a UserAccount or Agent of an Item, Container, Space, UserAccount, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ likes: _NS$9("likes"),
    /**
     * A URI of a document which contains this SIOC object.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ link: _NS$9("link"),
    /**
     * Links extracted from hyperlinks within a SIOC concept, e.g. Post or Site.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ links_to: _NS$9("links_to"),
    /**
     * Refers to a UserAccount that a particular Item mentions.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ mentions: _NS$9("mentions"),
    /**
     * The name of a SIOC concept instance, e.g. a username for a UserAccount, group name for a Usergroup, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ name: _NS$9("name"),
    /**
     * Next Item or Post in a given Container sorted by date.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ next_by_date: _NS$9("next_by_date"),
    /**
     * Previous Item or Post in a given Container sorted by date.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ previous_by_date: _NS$9("previous_by_date"),
    /**
     * Links to the next revision of this Item or Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ next_version: _NS$9("next_version"),
    /**
     * Links to the previous revision of this Item or Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ previous_version: _NS$9("previous_version"),
    /**
     * A note associated with this resource, for example, if it has been edited by a UserAccount.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ note: _NS$9("note"),
    /**
     * The number of unique authors (UserAccounts and unregistered posters) who have contributed to this Item, Thread, Post, etc.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ num_authors: _NS$9("num_authors"),
    /**
     * The number of Posts (or Items) in a Forum (or a Container).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ num_items: _NS$9("num_items"),
    /**
     * The number of replies that this Item, Thread, Post, etc. has. Useful for when the reply structure is absent.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ num_replies: _NS$9("num_replies"),
    /**
     * The number of Threads (AKA discussion topics) in a Forum.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ num_threads: _NS$9("num_threads"),
    /**
     * The number of times this Item, Thread, UserAccount profile, etc. has been viewed.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ num_views: _NS$9("num_views"),
    /**
     * When this was read, in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ read_at: _NS$9("read_at"),
    /**
     * For the reply-to address set in email messages, IMs, etc. The property name was chosen to avoid confusion with has_reply/reply_of (the reply graph).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ respond_to: _NS$9("respond_to"),
    /**
     * For shared Items where there is a certain creator_of and an intermediary who shares or forwards it (e.g. as a sibling Item).
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://rdfs.org/sioc/ns#sibling
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ shared_by: _NS$9("shared_by"),
    /**
     * A topic of interest, linking to the appropriate URI, e.g. in the Open Directory Project or of a SKOS category.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ topic: _NS$9("topic"),
    /**
     * This is the title (subject line) of the Post. Note that for a Post within a threaded discussion that has no parents, it would detail the topic thread.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ title: _NS$9("title"),
    /**
     * The encoded content of the Post, contained in CDATA areas.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ content_encoded: _NS$9("content_encoded"),
    /**
     * When this was created, in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ created_at: _NS$9("created_at"),
    /**
     * The content of the Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ description: _NS$9("description"),
    /**
     * First (real) name of this User. Synonyms include given name or christian name.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ first_name: _NS$9("first_name"),
    /**
     * group of
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ group_of: _NS$9("group_of"),
    /**
     * has group
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ has_group: _NS$9("has_group"),
    /**
     * An resource that is a part of this subject.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ has_part: _NS$9("has_part"),
    /**
     * A resource that the subject is a part of.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ part_of: _NS$9("part_of"),
    /**
     * Last (real) name of this user. Synonyms include surname or family name.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ last_name: _NS$9("last_name"),
    /**
     * When this was modified, in ISO 8601 format.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ modified_at: _NS$9("modified_at"),
    /**
     * Links either created explicitly or extracted implicitly on the HTML level from the Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ reference: _NS$9("reference"),
    /**
     * Keyword(s) describing subject of the Post.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://rdfs.org/sioc/ns#
     */ subject: _NS$9("subject")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$8 = "http://www.w3.org/2004/02/skos/core#";
function _NS$8(localName) {
    return _NAMESPACE$8 + localName;
}
/**
 * An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */ var SKOS = {
    PREFIX: "skos",
    NAMESPACE: _NAMESPACE$8,
    PREFIX_AND_NAMESPACE: {
        "skos": "http://www.w3.org/2004/02/skos/core#"
    },
    NS: _NS$8,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An idea or notion; a unit of thought.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ Concept: _NS$8("Concept"),
    /**
     * A set of concepts, optionally including statements about semantic relationships between those concepts.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ ConceptScheme: _NS$8("ConceptScheme"),
    /**
     * A meaningful collection of concepts.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ Collection: _NS$8("Collection"),
    /**
     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ OrderedCollection: _NS$8("OrderedCollection"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A statement or formal explanation of the meaning of a concept.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ definition: _NS$8("definition"),
    /**
     * A general note, for any purpose.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ note: _NS$8("note"),
    /**
     * A note that helps to clarify the meaning and/or the use of a concept.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ scopeNote: _NS$8("scopeNote"),
    /**
     * An example of the use of a concept.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ example: _NS$8("example"),
    /**
     * Relates a resource (for example a concept) to a concept scheme in which it is included.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ inScheme: _NS$8("inScheme"),
    /**
     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ hasTopConcept: _NS$8("hasTopConcept"),
    /**
     * Relates a concept to the concept scheme that it is a top level concept of.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ topConceptOf: _NS$8("topConceptOf"),
    /**
     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ prefLabel: _NS$8("prefLabel"),
    /**
     * The range of skos:altLabel is the class of RDF plain literals.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ altLabel: _NS$8("altLabel"),
    /**
     * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ hiddenLabel: _NS$8("hiddenLabel"),
    /**
     * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ notation: _NS$8("notation"),
    /**
     * A note about a modification to a concept.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ changeNote: _NS$8("changeNote"),
    /**
     * A note for an editor, translator or maintainer of the vocabulary.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ editorialNote: _NS$8("editorialNote"),
    /**
     * A note about the past state/use/meaning of a concept.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ historyNote: _NS$8("historyNote"),
    /**
     * Links a concept to a concept related by meaning.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ semanticRelation: _NS$8("semanticRelation"),
    /**
     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ broader: _NS$8("broader"),
    /**
     * skos:broaderTransitive is a transitive superproperty of skos:broader.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ broaderTransitive: _NS$8("broaderTransitive"),
    /**
     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ narrower: _NS$8("narrower"),
    /**
     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ narrowerTransitive: _NS$8("narrowerTransitive"),
    /**
     * skos:related is disjoint with skos:broaderTransitive
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ related: _NS$8("related"),
    /**
     * Relates a collection to one of its members.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ member: _NS$8("member"),
    /**
     * For any resource, every item in the list given as the value of the
        skos:memberList property is also a value of the skos:member property.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ memberList: _NS$8("memberList"),
    /**
     * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ mappingRelation: _NS$8("mappingRelation"),
    /**
     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ broadMatch: _NS$8("broadMatch"),
    /**
     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ narrowMatch: _NS$8("narrowMatch"),
    /**
     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ relatedMatch: _NS$8("relatedMatch"),
    /**
     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ exactMatch: _NS$8("exactMatch"),
    /**
     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
     */ closeMatch: _NS$8("closeMatch")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * An RDF vocabulary extending SKOS and allowing the description and linking of lexical entities.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$7 = "http://www.w3.org/2008/05/skos-xl#";
function _NS$7(localName) {
    return _NAMESPACE$7 + localName;
}
/**
 * An RDF vocabulary extending SKOS and allowing the description and linking of lexical entities.
 */ var SKOS_XL = {
    PREFIX: "skos-xl",
    NAMESPACE: _NAMESPACE$7,
    PREFIX_AND_NAMESPACE: {
        "skos-xl": "http://www.w3.org/2008/05/skos-xl#"
    },
    NS: _NS$7,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A special class of lexical entities.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ Label: _NS$7("Label"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * If two instances of the class skosxl:Label have the same literal form, they are not necessarily the same resource.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ literalForm: _NS$7("literalForm"),
    /**
     * If C skosxl:prefLabel L and L skosxl:literalForm V, then X skos:prefLabel V.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.w3.org/2004/02/skos/core#prefLabel
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ prefLabel: _NS$7("prefLabel"),
    /**
     * If C skosxl:altLabel L and L skosxl:literalForm V, then X skos:altLabel V.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.w3.org/2004/02/skos/core#altLabel
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ altLabel: _NS$7("altLabel"),
    /**
     * If C skosxl:hiddenLabel L and L skosxl:literalForm V, then C skos:hiddenLabel V.
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.w3.org/2004/02/skos/core#hiddenLabel
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ hiddenLabel: _NS$7("hiddenLabel"),
    /**
     * The property skosxl:labelRelation is used for representing binary ('direct') relations between instances of the class skosxl:Label.
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
     */ labelRelation: _NS$7("labelRelation")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * [Generator provided] - UI Ontology
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$6 = "http://www.w3.org/ns/ui#";
function _NS$6(localName) {
    return _NAMESPACE$6 + localName;
}
/**
 * [Generator provided] - UI Ontology
 */ var UI = {
    PREFIX: "ui",
    NAMESPACE: _NAMESPACE$6,
    PREFIX_AND_NAMESPACE: {
        "ui": "http://www.w3.org/ns/ui#"
    },
    NS: _NS$6,
    // *****************
    // All the Classes.
    // *****************
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ BooleanField: _NS$6("BooleanField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ NumericField: _NS$6("NumericField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ValueField: _NS$6("ValueField"),
    /**
     * A form can be any type of single field, or typically a Group of several fields,
      including interspersed headings and comments.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
     */ Form: _NS$6("Form"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Single: _NS$6("Single"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Group: _NS$6("Group"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Choice: _NS$6("Choice"),
    /**
     * A classifier allows the user to select the type of an object.
      The possible types must be subclasses of some overall class, the "category".
      (Ideally, the superclass is also set up as the disjoint union of the subclasses,
      if they are disjoint.)
  
      The form normally stores the resulting classes using an r:type triple,
      but a different predicate can be used if required, so the classifier field
      needs is 'property' defined too.
  
      If the subclass selected itself is has subclasses defined, the user can
      recursively select from them in turn, as many levels as needed.
     *
     * This term provides descriptions only with no explicit locale.
     */ Classifier: _NS$6("Classifier"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ColorField: _NS$6("ColorField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ TextField: _NS$6("TextField"),
    /**
     * Comment
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ Comment: _NS$6("Comment"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DateField: _NS$6("DateField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DateTimeField: _NS$6("DateTimeField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DecimalField: _NS$6("DecimalField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EmailField: _NS$6("EmailField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Heading: _NS$6("Heading"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ SingleLineTextField: _NS$6("SingleLineTextField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Options: _NS$6("Options"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ IntegerField: _NS$6("IntegerField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ FloatField: _NS$6("FloatField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ PhoneField: _NS$6("PhoneField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Multiple: _NS$6("Multiple"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ MultiLineTextField: _NS$6("MultiLineTextField"),
    /**
     * A NamedNodeURIField is like a SingleLineTextField, except
          that the value it generates is not a literal string but an RDF node with the given URI.
          Normally users should not see URIs. When they do, this a way to do it.
          
     *
     * This term provides descriptions only with no explicit locale.
     */ NamedNodeURIField: _NS$6("NamedNodeURIField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ TriStateField: _NS$6("TriStateField"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * parts
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ parts: _NS$6("parts"),
    /**
     * A form which may be used to collect information about a
      hitherto locally undocumented instance instance of this class.
     *
     * This term provides descriptions only with no explicit locale.
     */ creationForm: _NS$6("creationForm"),
    /**
     * from
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ from: _NS$6("from"),
    /**
     * Label
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ label: _NS$6("label"),
    /**
     * Many fields prompt for information about a given property of the subject.
      When field is filled in, this gives which property is written into the data.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ property: _NS$6("property"),
    /**
     * The value for which this case is selected.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ for: _NS$6("for"),
    /**
     * A string for the UI to use if the user needs a longer
          prompts than just a field name, the s:label.
     *
     * This term provides descriptions only with no explicit locale.
     */ prompt: _NS$6("prompt"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ use: _NS$6("use"),
    /**
     * Must be a valid CSS color string such as one could put in
              an HTML style attribute.  This must be in the #xxxxxx form,
              (with 6 digits of lowercase hex) so that it
              can work eg with Graphviz.
              As this is just an encoded array of RGB values,
              you can do math with these, such as blending, complement, etc.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Color: _NS$6("Color"),
    /**
     * Contents
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ contents: _NS$6("contents"),
    /**
     * size of field
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ size: _NS$6("size"),
    /**
     * Must be a valid CSS style string such as one could put in
          an HTML style attribute.  Depending on the user interface system, this can
          by given to individuals, classes or properties. It is up to a user interface
          which wants to draw on them to pick how it uses styles from which parts
          of the data it has.  For example, the style of a class may be picked
          to distinguish information about things in that class.
     *
     * This term provides descriptions only with no explicit locale.
     */ style: _NS$6("style"),
    /**
     * The superclass subclasses of which will be selected.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ category: _NS$6("category"),
    /**
     * Many fields prompt for information about a given property of the subject
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ dependingOn: _NS$6("dependingOn"),
    /**
     * Max length
     *
     * This term has [3] labels (in languages [NoLocale, en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ maxLength: _NS$6("maxLength"),
    /**
     * part
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ part: _NS$6("part"),
    /**
     * Time field
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ TimeField: _NS$6("TimeField"),
    /**
     * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
  
     *
     * This term provides descriptions only with no explicit locale.
     */ annotationForm: _NS$6("annotationForm"),
    /**
     * background color
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ backgroundColor: _NS$6("backgroundColor"),
    /**
     * URI or base64 representation of an image
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ backgroundImage: _NS$6("backgroundImage"),
    /**
     * Base
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ base: _NS$6("base"),
    /**
     * color
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ color: _NS$6("color"),
    /**
     * Default error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ defaultError: _NS$6("defaultError"),
    /**
     * A really simple way of enabling user interfaces to
              create new information about a class of things is to make a define of properties
              to be specified when a information about a new item
              ("New item" here means an item which the system
              does not have prvious information about yet,
              not an items which has just been created,
              like new friend as opposed to new baby)
     *
     * This term provides descriptions only with no explicit locale.
     */ initialProperties: _NS$6("initialProperties"),
    /**
     * Maximum date offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ maxDateOffset: _NS$6("maxDateOffset"),
    /**
     * Maximum datetime offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ maxDatetimeOffset: _NS$6("maxDatetimeOffset"),
    /**
     * max
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ maxValue: _NS$6("maxValue"),
    /**
     * Minimum date offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ minDateOffset: _NS$6("minDateOffset"),
    /**
     * Minimum datetime offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ minDatetimeOffset: _NS$6("minDatetimeOffset"),
    /**
     * Min length
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ minLength: _NS$6("minLength"),
    /**
     * min
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ minValue: _NS$6("minValue"),
    /**
     * Name
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ name: _NS$6("name"),
    /**
     * Old value
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ oldValue: _NS$6("oldValue"),
    /**
     * Parent property
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ parentProperty: _NS$6("parentProperty"),
    /**
     * Parts clone
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ partsClone: _NS$6("partsClone"),
    /**
     * Pattern
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ pattern: _NS$6("pattern"),
    /**
     * Reference
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ reference: _NS$6("reference"),
    /**
     * Required
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ required: _NS$6("required"),
    /**
     * Required error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ requiredError: _NS$6("requiredError"),
    /**
     * The sequence in which this item is arranged with repect to other parts.
     *
     * This term provides descriptions only with no explicit locale.
     */ seqeunce: _NS$6("seqeunce"),
    /**
     * A property which typically is used to sort
          members of a given class.
     *
     * This term provides descriptions only with no explicit locale.
     */ sortBy: _NS$6("sortBy"),
    /**
     * When individuals or classes must be sorted, then
          if they are given different values of sortPriority a user agent can
          use this as a hint to how to present information.
     *
     * This term provides descriptions only with no explicit locale.
     */ sortPriority: _NS$6("sortPriority"),
    /**
     * This  is a crude way of specifying a table-based
              view for objects of this class.
     *
     * This term provides descriptions only with no explicit locale.
     */ tableProperties: _NS$6("tableProperties"),
    /**
     * Valid
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ valid: _NS$6("valid"),
    /**
     * Validation error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ validationError: _NS$6("validationError"),
    /**
     * Value
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ value: _NS$6("value"),
    /**
     * Values
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/ns/ui
     */ values: _NS$6("values")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Extension to UI terms providing multilingual alternative names and translations for comments (e.g., for use directly as labels or tool-tips in user interfaces or error messages)
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$5 = "http://www.w3.org/ns/ui#";
function _NS$5(localName) {
    return _NAMESPACE$5 + localName;
}
/**
 * Extension to UI terms providing multilingual alternative names and translations for comments (e.g., for use directly as labels or tool-tips in user interfaces or error messages)
 */ var UI_INRUPT = {
    PREFIX: "ui-inrupt",
    NAMESPACE: _NAMESPACE$5,
    PREFIX_AND_NAMESPACE: {
        "ui-inrupt": "http://www.w3.org/ns/ui#"
    },
    NS: _NS$5,
    // *****************
    // All the Classes.
    // *****************
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ BooleanField: _NS$5("BooleanField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ NumericField: _NS$5("NumericField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ValueField: _NS$5("ValueField"),
    /**
     * A form can be any type of single field, or typically a Group of several fields,
      including interspersed headings and comments.
     *
     * The term has a description only in English, but has a mismatch between its labels and comments, with [0] labels, but [1] comment in the language [NoLocale].
     */ Form: _NS$5("Form"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Single: _NS$5("Single"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ TextField: _NS$5("TextField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ TriStateField: _NS$5("TriStateField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Group: _NS$5("Group"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Choice: _NS$5("Choice"),
    /**
     * A classifier allows the user to select the type of an object.
      The possible types must be subclasses of some overall class, the "category".
      (Ideally, the superclass is also set up as the disjoint union of the subclasses,
      if they are disjoint.)
  
      The form normally stores the resulting classes using an r:type triple,
      but a different predicate can be used if required, so the classifier field
      needs is 'property' defined too.
  
      If the subclass selected itself is has subclasses defined, the user can
      recursively select from them in turn, as many levels as needed.
     *
     * This term provides descriptions only with no explicit locale.
     */ Classifier: _NS$5("Classifier"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ ColorField: _NS$5("ColorField"),
    /**
     * Comment
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ Comment: _NS$5("Comment"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DateField: _NS$5("DateField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DateTimeField: _NS$5("DateTimeField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ DecimalField: _NS$5("DecimalField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ EmailField: _NS$5("EmailField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Heading: _NS$5("Heading"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ SingleLineTextField: _NS$5("SingleLineTextField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Options: _NS$5("Options"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ IntegerField: _NS$5("IntegerField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ FloatField: _NS$5("FloatField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ PhoneField: _NS$5("PhoneField"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ Multiple: _NS$5("Multiple"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ MultiLineTextField: _NS$5("MultiLineTextField"),
    /**
     * A NamedNodeURIField is like a SingleLineTextField, except
          that the value it generates is not a literal string but an RDF node with the given URI.
          Normally users should not see URIs. When they do, this a way to do it.
          
     *
     * This term provides descriptions only with no explicit locale.
     */ NamedNodeURIField: _NS$5("NamedNodeURIField"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A form which may be used to collect information about a
      hitherto locally undocumented instance instance of this class.
     *
     * This term provides descriptions only with no explicit locale.
     */ creationForm: _NS$5("creationForm"),
    /**
     * parts
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ parts: _NS$5("parts"),
    /**
     * from
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ from: _NS$5("from"),
    /**
     * Label
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ label: _NS$5("label"),
    /**
     * Many fields prompt for information about a given property of the subject.
      When field is filled in, this gives which property is written into the data.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ property: _NS$5("property"),
    /**
     * The value for which this case is selected.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ for: _NS$5("for"),
    /**
     * A string for the UI to use if the user needs a longer
          prompts than just a field name, the s:label.
     *
     * This term provides descriptions only with no explicit locale.
     */ prompt: _NS$5("prompt"),
    /**
     *
     *
     * This term has no descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:label&#x27;, &#x27;rdfs:comment&#x27;, or &#x27;dcterms:description&#x27; meta-data).
     */ use: _NS$5("use"),
    /**
     * The superclass subclasses of which will be selected.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ category: _NS$5("category"),
    /**
     * Must be a valid CSS color string such as one could put in
              an HTML style attribute.  This must be in the #xxxxxx form,
              (with 6 digits of lowercase hex) so that it
              can work eg with Graphviz.
              As this is just an encoded array of RGB values,
              you can do math with these, such as blending, complement, etc.
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ Color: _NS$5("Color"),
    /**
     * Contents
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ contents: _NS$5("contents"),
    /**
     * size of field
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ size: _NS$5("size"),
    /**
     * Must be a valid CSS style string such as one could put in
          an HTML style attribute.  Depending on the user interface system, this can
          by given to individuals, classes or properties. It is up to a user interface
          which wants to draw on them to pick how it uses styles from which parts
          of the data it has.  For example, the style of a class may be picked
          to distinguish information about things in that class.
     *
     * This term provides descriptions only with no explicit locale.
     */ style: _NS$5("style"),
    /**
     * Many fields prompt for information about a given property of the subject
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ dependingOn: _NS$5("dependingOn"),
    /**
     * part
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ part: _NS$5("part"),
    /**
     * Max length
     *
     * This term has [3] labels (in languages [NoLocale, en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ maxLength: _NS$5("maxLength"),
    /**
     * Time field
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ TimeField: _NS$5("TimeField"),
    /**
     * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
  
     *
     * This term provides descriptions only with no explicit locale.
     */ annotationForm: _NS$5("annotationForm"),
    /**
     * background color
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ backgroundColor: _NS$5("backgroundColor"),
    /**
     * URI or base64 representation of an image
     *
     * The term has a description only in English, with [1] label in the language [en], but [1] comment in the language [NoLocale] (so the difference is only between English and NoLocale, which we consider the same).
     */ backgroundImage: _NS$5("backgroundImage"),
    /**
     * Base
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ base: _NS$5("base"),
    /**
     * color
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ color: _NS$5("color"),
    /**
     * Default error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ defaultError: _NS$5("defaultError"),
    /**
     * A really simple way of enabling user interfaces to
              create new information about a class of things is to make a define of properties
              to be specified when a information about a new item
              ("New item" here means an item which the system
              does not have prvious information about yet,
              not an items which has just been created,
              like new friend as opposed to new baby)
     *
     * This term provides descriptions only with no explicit locale.
     */ initialProperties: _NS$5("initialProperties"),
    /**
     * Maximum date offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ maxDateOffset: _NS$5("maxDateOffset"),
    /**
     * Maximum datetime offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ maxDatetimeOffset: _NS$5("maxDatetimeOffset"),
    /**
     * max
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ maxValue: _NS$5("maxValue"),
    /**
     * Minimum date offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ minDateOffset: _NS$5("minDateOffset"),
    /**
     * Minimum datetime offset
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ minDatetimeOffset: _NS$5("minDatetimeOffset"),
    /**
     * Min length
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ minLength: _NS$5("minLength"),
    /**
     * min
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ minValue: _NS$5("minValue"),
    /**
     * Name
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ name: _NS$5("name"),
    /**
     * Old value
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ oldValue: _NS$5("oldValue"),
    /**
     * Parent property
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ parentProperty: _NS$5("parentProperty"),
    /**
     * Parts clone
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ partsClone: _NS$5("partsClone"),
    /**
     * Pattern
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ pattern: _NS$5("pattern"),
    /**
     * Reference
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ reference: _NS$5("reference"),
    /**
     * Required
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ required: _NS$5("required"),
    /**
     * Required error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ requiredError: _NS$5("requiredError"),
    /**
     * The sequence in which this item is arranged with repect to other parts.
     *
     * This term provides descriptions only with no explicit locale.
     */ seqeunce: _NS$5("seqeunce"),
    /**
     * A property which typically is used to sort
          members of a given class.
     *
     * This term provides descriptions only with no explicit locale.
     */ sortBy: _NS$5("sortBy"),
    /**
     * When individuals or classes must be sorted, then
          if they are given different values of sortPriority a user agent can
          use this as a hint to how to present information.
     *
     * This term provides descriptions only with no explicit locale.
     */ sortPriority: _NS$5("sortPriority"),
    /**
     * This  is a crude way of specifying a table-based
              view for objects of this class.
     *
     * This term provides descriptions only with no explicit locale.
     */ tableProperties: _NS$5("tableProperties"),
    /**
     * Valid
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ valid: _NS$5("valid"),
    /**
     * Validation error
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ validationError: _NS$5("validationError"),
    /**
     * Value
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ value: _NS$5("value"),
    /**
     * Values
     *
     * This term has [2] labels (in languages [en, es]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
     */ values: _NS$5("values")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for annotating vocabulary descriptions (VANN).
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$4 = "http://purl.org/vocab/vann/";
function _NS$4(localName) {
    return _NAMESPACE$4 + localName;
}
/**
 * A vocabulary for annotating vocabulary descriptions (VANN).
 */ var VANN = {
    PREFIX: "vann",
    NAMESPACE: _NAMESPACE$4,
    PREFIX_AND_NAMESPACE: {
        "vann": "http://purl.org/vocab/vann/"
    },
    NS: _NS$4,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.
     *
     * This term provides descriptions only in English.
     */ preferredNamespacePrefix: _NS$4("preferredNamespacePrefix"),
    /**
     * The preferred namespace URI to use when using terms from this vocabulary in an XML document.
     *
     * This term provides descriptions only in English.
     */ preferredNamespaceUri: _NS$4("preferredNamespaceUri"),
    /**
     * A reference to a resource that describes changes between this version of a vocabulary and the previous.
     *
     * This term provides descriptions only in English.
     */ changes: _NS$4("changes"),
    /**
     * A reference to a resource that provides an example of how this resource can be used.
     *
     * This term provides descriptions only in English.
     */ example: _NS$4("example"),
    /**
     * A group of related terms in a vocabulary.
     *
     * This term provides descriptions only in English.
     */ termGroup: _NS$4("termGroup"),
    /**
     * A reference to a resource that provides information on how this resource is to be used.
     *
     * This term provides descriptions only in English.
     */ usageNote: _NS$4("usageNote")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * Ontology for vCard based on RFC6350
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$3 = "http://www.w3.org/2006/vcard/ns#";
function _NS$3(localName) {
    return _NAMESPACE$3 + localName;
}
/**
 * Ontology for vCard based on RFC6350
 */ var VCARD = {
    PREFIX: "vcard",
    NAMESPACE: _NAMESPACE$3,
    PREFIX_AND_NAMESPACE: {
        "vcard": "http://www.w3.org/2006/vcard/ns#"
    },
    NS: _NS$3,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Acquaintance
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Acquaintance: _NS$3("Acquaintance"),
    /**
     * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ RelatedType: _NS$3("RelatedType"),
    /**
     * Agent
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Agent: _NS$3("Agent"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ BBS: _NS$3("BBS"),
    /**
     * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ TelephoneType: _NS$3("TelephoneType"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Car: _NS$3("Car"),
    /**
     * Also called mobile telephone
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Cell: _NS$3("Cell"),
    /**
     * Child
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Child: _NS$3("Child"),
    /**
     * Colleague
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Colleague: _NS$3("Colleague"),
    /**
     * Contact
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Contact: _NS$3("Contact"),
    /**
     * Coresident
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Coresident: _NS$3("Coresident"),
    /**
     * Coworker
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Coworker: _NS$3("Coworker"),
    /**
     * Crush
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Crush: _NS$3("Crush"),
    /**
     * Date
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Date: _NS$3("Date"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Dom: _NS$3("Dom"),
    /**
     * Used for type codes. The URI of the type code must be used as the value for Type.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Type: _NS$3("Type"),
    /**
     * Emergency
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Emergency: _NS$3("Emergency"),
    /**
     * Fax
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Fax: _NS$3("Fax"),
    /**
     * Female
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Female: _NS$3("Female"),
    /**
     * Used for gender codes. The URI of the gender code must be used as the value for Gender.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Gender: _NS$3("Gender"),
    /**
     * Friend
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Friend: _NS$3("Friend"),
    /**
     * This implies that the property is related to an individual's personal life
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Home: _NS$3("Home"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ ISDN: _NS$3("ISDN"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Internet: _NS$3("Internet"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Intl: _NS$3("Intl"),
    /**
     * Kin
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Kin: _NS$3("Kin"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Label: _NS$3("Label"),
    /**
     * Male
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Male: _NS$3("Male"),
    /**
     * Me
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Me: _NS$3("Me"),
    /**
     * Met
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Met: _NS$3("Met"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Modem: _NS$3("Modem"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Msg: _NS$3("Msg"),
    /**
     * Muse
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Muse: _NS$3("Muse"),
    /**
     * Neighbor
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Neighbor: _NS$3("Neighbor"),
    /**
     * None
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ None: _NS$3("None"),
    /**
     * Other
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Other: _NS$3("Other"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ PCS: _NS$3("PCS"),
    /**
     * Pager
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Pager: _NS$3("Pager"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Parcel: _NS$3("Parcel"),
    /**
     * Parent
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Parent: _NS$3("Parent"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Postal: _NS$3("Postal"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Pref: _NS$3("Pref"),
    /**
     * Sibling
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Sibling: _NS$3("Sibling"),
    /**
     * Spouse
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Spouse: _NS$3("Spouse"),
    /**
     * Sweetheart
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Sweetheart: _NS$3("Sweetheart"),
    /**
     * This class is deprecated. Use the hasTelephone object property.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Tel: _NS$3("Tel"),
    /**
     * Also called sms telephone
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Text: _NS$3("Text"),
    /**
     * Text phone
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ TextPhone: _NS$3("TextPhone"),
    /**
     * Unknown
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Unknown: _NS$3("Unknown"),
    /**
     * Video
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Video: _NS$3("Video"),
    /**
     * Voice
     *
     * This term has a label (in language [en]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Voice: _NS$3("Voice"),
    /**
     * This implies that the property is related to an individual's work place
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Work: _NS$3("Work"),
    /**
     * This class is deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ X400: _NS$3("X400"),
    /**
     * To specify the components of the delivery address for the  object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Address: _NS$3("Address"),
    /**
     * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Email: _NS$3("Email"),
    /**
     * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Group: _NS$3("Group"),
    /**
     * The parent class for all objects
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Kind: _NS$3("Kind"),
    /**
     * An object representing a single person or entity
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Individual: _NS$3("Individual"),
    /**
     * An object representing a named geographical place
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Location: _NS$3("Location"),
    /**
     * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
  
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Organization: _NS$3("Organization"),
    /**
     * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ VCard: _NS$3("VCard"),
    /**
     * To specify the components of the name of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ Name: _NS$3("Name"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ adr: _NS$3("adr"),
    /**
     * To specify the components of the delivery address for the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasAddress: _NS$3("hasAddress"),
    /**
     * This object property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ agent: _NS$3("agent"),
    /**
     * The date of marriage, or equivalent, of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ anniversary: _NS$3("anniversary"),
    /**
     * To specify the birth date of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ bday: _NS$3("bday"),
    /**
     * The category information about the object, also known as tags
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ category: _NS$3("category"),
    /**
     * This data property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ class: _NS$3("class"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ email: _NS$3("email"),
    /**
     * To specify the electronic mail address for communication with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasEmail: _NS$3("hasEmail"),
    /**
     * This data property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ extended_address: _NS$3("extended-address"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ geo: _NS$3("geo"),
    /**
     * To specify information related to the global positioning of the object. May also be used as a property parameter.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasGeo: _NS$3("hasGeo"),
    /**
     * Used to support property parameters for the additional name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasAdditionalName: _NS$3("hasAdditionalName"),
    /**
     * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasCalendarBusy: _NS$3("hasCalendarBusy"),
    /**
     * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasCalendarLink: _NS$3("hasCalendarLink"),
    /**
     * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasCalendarRequest: _NS$3("hasCalendarRequest"),
    /**
     * Used to support property parameters for the category data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasCategory: _NS$3("hasCategory"),
    /**
     * Used to support property parameters for the country name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasCountryName: _NS$3("hasCountryName"),
    /**
     * Used to support property parameters for the formatted name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasFN: _NS$3("hasFN"),
    /**
     * Used to support property parameters for the family name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasFamilyName: _NS$3("hasFamilyName"),
    /**
     * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasGender: _NS$3("hasGender"),
    /**
     * Used to support property parameters for the given name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasGivenName: _NS$3("hasGivenName"),
    /**
     * Used to support property parameters for the honorific prefix data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasHonorificPrefix: _NS$3("hasHonorificPrefix"),
    /**
     * Used to support property parameters for the honorific suffix data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasHonorificSuffix: _NS$3("hasHonorificSuffix"),
    /**
     * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasInstantMessage: _NS$3("hasInstantMessage"),
    /**
     * Used to support property parameters for the language data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasLanguage: _NS$3("hasLanguage"),
    /**
     * Used to support property parameters for the locality data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasLocality: _NS$3("hasLocality"),
    /**
     * Used to support property parameters for the nickname data property
     *
     * This term provides descriptions only in English.
     *
     * See also:
     *  - http://www.w3.org/2006/vcard/ns#nickname
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasNickname: _NS$3("hasNickname"),
    /**
     * The nick name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ nickname: _NS$3("nickname"),
    /**
     * Used to support property parameters for the note data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasNote: _NS$3("hasNote"),
    /**
     * Used to support property parameters for the organization name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasOrganizationName: _NS$3("hasOrganizationName"),
    /**
     * Used to support property parameters for the organization unit name data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasOrganizationUnit: _NS$3("hasOrganizationUnit"),
    /**
     * Used to support property parameters for the postal code data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasPostalCode: _NS$3("hasPostalCode"),
    /**
     * Used to support property parameters for the region data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasRegion: _NS$3("hasRegion"),
    /**
     * To specify a relationship between another entity and the entity represented by this object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasRelated: _NS$3("hasRelated"),
    /**
     * Used to support property parameters for the role data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasRole: _NS$3("hasRole"),
    /**
     * To identify the source of directory information of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasSource: _NS$3("hasSource"),
    /**
     * Used to support property parameters for the street address data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasStreetAddress: _NS$3("hasStreetAddress"),
    /**
     * Used to support property parameters for the title data property
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasTitle: _NS$3("hasTitle"),
    /**
     * To specify a value that represents a globally unique identifier corresponding to the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasUID: _NS$3("hasUID"),
    /**
     * Used to indicate the resource value of an object property that requires property parameters
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasValue: _NS$3("hasValue"),
    /**
     * This data property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ label: _NS$3("label"),
    /**
     * To specify the language that may be used for contacting the object. May also be used as a property parameter.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ language: _NS$3("language"),
    /**
     * This data property has been deprecated. See hasGeo
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ latitude: _NS$3("latitude"),
    /**
     * This data property has been deprecated. See hasGeo
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ longitude: _NS$3("longitude"),
    /**
     * This data property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ mailer: _NS$3("mailer"),
    /**
     * A note associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ note: _NS$3("note"),
    /**
     * This object property has been mapped. Use the organization-name data property.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ org: _NS$3("org"),
    /**
     * To specify the organizational name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ organization_name: _NS$3("organization-name"),
    /**
     * To specify the organizational unit name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ organization_unit: _NS$3("organization-unit"),
    /**
     * This data property has been deprecated
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ post_office_box: _NS$3("post-office-box"),
    /**
     * To specify the identifier for the product that created the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ prodid: _NS$3("prodid"),
    /**
     * To specify revision information about the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ rev: _NS$3("rev"),
    /**
     * To specify the function or part played in a particular situation by the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ role: _NS$3("role"),
    /**
     * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ sort_string: _NS$3("sort-string"),
    /**
     * To specify the position or job of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ title: _NS$3("title"),
    /**
     * To indicate time zone information that is specific to the object. May also be used as a property parameter.
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ tz: _NS$3("tz"),
    /**
     * Used to indicate the literal value of a data property that requires property parameters
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ value: _NS$3("value"),
    /**
     * The country name associated with the address of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ country_name: _NS$3("country-name"),
    /**
     * The locality (e.g. city or town) associated with the address of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ locality: _NS$3("locality"),
    /**
     * The postal code associated with the address of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ postal_code: _NS$3("postal-code"),
    /**
     * The region (e.g. state or province) associated with the address of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ region: _NS$3("region"),
    /**
     * The street address associated with the address of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ street_address: _NS$3("street-address"),
    /**
     * The formatted text corresponding to the name of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ fn: _NS$3("fn"),
    /**
     * To include a member in the group this object represents. (This property can only be used by Group individuals)
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasMember: _NS$3("hasMember"),
    /**
     * The additional name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ additional_name: _NS$3("additional-name"),
    /**
     * The family name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ family_name: _NS$3("family-name"),
    /**
     * The given name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ given_name: _NS$3("given-name"),
    /**
     * The honorific prefix of the name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ honorific_prefix: _NS$3("honorific-prefix"),
    /**
     * The honorific suffix of the name associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ honorific_suffix: _NS$3("honorific-suffix"),
    /**
     * To specify a public key or authentication certificate associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasKey: _NS$3("hasKey"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ key: _NS$3("key"),
    /**
     * To specify a graphic image of a logo associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasLogo: _NS$3("hasLogo"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ logo: _NS$3("logo"),
    /**
     * To specify the components of the name of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasName: _NS$3("hasName"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ n: _NS$3("n"),
    /**
     * To specify an image or photograph information that annotates some aspect of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasPhoto: _NS$3("hasPhoto"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ photo: _NS$3("photo"),
    /**
     * To specify a digital sound content information that annotates some aspect of the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasSound: _NS$3("hasSound"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ sound: _NS$3("sound"),
    /**
     * To specify the telephone number for telephony communication with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasTelephone: _NS$3("hasTelephone"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ tel: _NS$3("tel"),
    /**
     * To specify a uniform resource locator associated with the object
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ hasURL: _NS$3("hasURL"),
    /**
     * This object property has been mapped
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
     */ url: _NS$3("url")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$2 = "http://rdfs.org/ns/void#";
function _NS$2(localName) {
    return _NAMESPACE$2 + localName;
}
/**
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */ var VOID = {
    PREFIX: "void",
    NAMESPACE: _NAMESPACE$2,
    PREFIX_AND_NAMESPACE: {
        "void": "http://rdfs.org/ns/void#"
    },
    NS: _NS$2,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A set of RDF triples that are published, maintained or aggregated by a single provider.
     *
     * This term provides descriptions only with no explicit locale.
     */ Dataset: _NS$2("Dataset"),
    /**
     * A collection of RDF links between two void:Datasets.
     *
     * This term provides descriptions only with no explicit locale.
     */ Linkset: _NS$2("Linkset"),
    /**
     * A technical feature of a void:Dataset, such as a supported RDF serialization format.
     *
     * This term provides descriptions only with no explicit locale.
     */ TechnicalFeature: _NS$2("TechnicalFeature"),
    /**
     * A web resource whose foaf:primaryTopic or foaf:topics include void:Datasets.
     *
     * This term provides descriptions only with no explicit locale.
     */ DatasetDescription: _NS$2("DatasetDescription"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * feature
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ feature: _NS$2("feature"),
    /**
     * has subset
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ subset: _NS$2("subset"),
    /**
     * One of the two datasets linked by the Linkset.
     *
     * This term provides descriptions only with no explicit locale.
     */ target: _NS$2("target"),
    /**
     * has a SPARQL endpoint at
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ sparqlEndpoint: _NS$2("sparqlEndpoint"),
    /**
     * a link predicate
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ linkPredicate: _NS$2("linkPredicate"),
    /**
     * example resource of dataset
     *
     * This term has a label (in language [NoLocale]), but no long-form descriptions at all (i.e., the vocabulary doesn&#x27;t provide any &#x27;rdfs:comment&#x27; or &#x27;dcterms:description&#x27; meta-data).
     */ exampleResource: _NS$2("exampleResource"),
    /**
     * A vocabulary that is used in the dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ vocabulary: _NS$2("vocabulary"),
    /**
     * The dataset describing the subjects of triples contained in the Linkset.
     *
     * This term provides descriptions only with no explicit locale.
     */ subjectsTarget: _NS$2("subjectsTarget"),
    /**
     * The dataset describing the objects of the triples contained in the Linkset.
     *
     * This term provides descriptions only with no explicit locale.
     */ objectsTarget: _NS$2("objectsTarget"),
    /**
     * An RDF dump, partial or complete, of a void:Dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ dataDump: _NS$2("dataDump"),
    /**
     * Defines a simple URI look-up protocol for accessing a dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ uriLookupEndpoint: _NS$2("uriLookupEndpoint"),
    /**
     * Defines a regular expression pattern matching URIs in the dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ uriRegexPattern: _NS$2("uriRegexPattern"),
    /**
     * The rdfs:Class that is the rdf:type of all entities in a class-based partition.
     *
     * This term provides descriptions only with no explicit locale.
     */ class: _NS$2("class"),
    /**
     * The total number of distinct classes in a void:Dataset. In other words, the number of distinct resources occuring as objects of rdf:type triples in the dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ classes: _NS$2("classes"),
    /**
     * A subset of a void:Dataset that contains only the entities of a certain rdfs:Class.
     *
     * This term provides descriptions only with no explicit locale.
     */ classPartition: _NS$2("classPartition"),
    /**
     * The total number of distinct objects in a void:Dataset. In other words, the number of distinct resources that occur in the object position of triples in the dataset. Literals are included in this count.
     *
     * This term provides descriptions only with no explicit locale.
     */ distinctObjects: _NS$2("distinctObjects"),
    /**
     * The total number of distinct subjects in a void:Dataset. In other words, the number of distinct resources that occur in the subject position of triples in the dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ distinctSubjects: _NS$2("distinctSubjects"),
    /**
     * The total number of documents, for datasets that are published as a set of individual documents, such as RDF/XML documents or RDFa-annotated web pages. Non-RDF documents, such as web pages in HTML or images, are usually not included in this count. This property is intended for datasets where the total number of triples or entities is hard to determine. void:triples or void:entities should be preferred where practical.
     *
     * This term provides descriptions only with no explicit locale.
     */ documents: _NS$2("documents"),
    /**
     * The total number of entities that are described in a void:Dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ entities: _NS$2("entities"),
    /**
     * Points to the void:Dataset that a document is a part of.
     *
     * This term provides descriptions only with no explicit locale.
     */ inDataset: _NS$2("inDataset"),
    /**
     * An OpenSearch description document for a free-text search service over a void:Dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ openSearchDescription: _NS$2("openSearchDescription"),
    /**
     * The total number of distinct properties in a void:Dataset. In other words, the number of distinct resources that occur in the predicate position of triples in the dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ properties: _NS$2("properties"),
    /**
     * The rdf:Property that is the predicate of all triples in a property-based partition.
     *
     * This term provides descriptions only with no explicit locale.
     */ property: _NS$2("property"),
    /**
     * A subset of a void:Dataset that contains only the triples of a certain rdf:Property.
     *
     * This term provides descriptions only with no explicit locale.
     */ propertyPartition: _NS$2("propertyPartition"),
    /**
     * A top concept or entry point for a void:Dataset that is structured in a tree-like fashion. All resources in a dataset can be reached by following links from its root resources in a small number of steps.
     *
     * This term provides descriptions only with no explicit locale.
     */ rootResource: _NS$2("rootResource"),
    /**
     * The total number of triples contained in a void:Dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ triples: _NS$2("triples"),
    /**
     * A URI that is a common string prefix of all the entity URIs in a void:Dataset.
     *
     * This term provides descriptions only with no explicit locale.
     */ uriSpace: _NS$2("uriSpace")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * This vocabulary was created in the FOAF project, based on experience with FOAF, Dublin Core and other early RDF vocabularies. Deployment experience shows that changing namespace URIs is expensive and unrewarding, so this vocabulary provides terms to support in-place evolution of structured data vocabularies. By indicating status at the level of terms rather than vocabularies, dictionary-style, fine grained improvements become easier. Different organizations and parties can agree or disagree on the status of a vocabulary term; however the status published alongside the term may deserve special attention. Future work could include patterns for citing announcements and decisions, or using SKOS to decentralise the extension of the basic status levels.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE$1 = "http://www.w3.org/2003/06/sw-vocab-status/ns#";
function _NS$1(localName) {
    return _NAMESPACE$1 + localName;
}
/**
 * This vocabulary was created in the FOAF project, based on experience with FOAF, Dublin Core and other early RDF vocabularies. Deployment experience shows that changing namespace URIs is expensive and unrewarding, so this vocabulary provides terms to support in-place evolution of structured data vocabularies. By indicating status at the level of terms rather than vocabularies, dictionary-style, fine grained improvements become easier. Different organizations and parties can agree or disagree on the status of a vocabulary term; however the status published alongside the term may deserve special attention. Future work could include patterns for citing announcements and decisions, or using SKOS to decentralise the extension of the basic status levels.
 */ var VS = {
    PREFIX: "vs",
    NAMESPACE: _NAMESPACE$1,
    PREFIX_AND_NAMESPACE: {
        "vs": "http://www.w3.org/2003/06/sw-vocab-status/ns#"
    },
    NS: _NS$1,
    // *******************
    // All the Properties.
    // *******************
    /**
     * the status of a vocabulary term, expressed as a short symbolic string; known values include 'unstable','testing', 'stable' and 'archaic'
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
     */ term_status: _NS$1("term_status"),
    /**
     * more information about the status etc of a term, typically human oriented
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
     */ moreinfo: _NS$1("moreinfo"),
    /**
     * human-oriented documentation, examples etc for use of this term
     *
     * This term provides descriptions only with no explicit locale.
     *
     * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
     */ userdocs: _NS$1("userdocs")
};
/**
 * MIT License
 *
 * Copyright 2022 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [vocab-common-rdf], version: [1.0.5]
 * on 'Wednesday, June 1, 2022 7:54 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/vocab-common-rdf.yml].
 *
 * A vocabulary for describing XML Schema datatypes.
 */ // We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
var _NAMESPACE = "http://www.w3.org/2001/XMLSchema#";
function _NS(localName) {
    return _NAMESPACE + localName;
}
/**
 * A vocabulary for describing XML Schema datatypes.
 */ var XSD = {
    PREFIX: "xsd",
    NAMESPACE: _NAMESPACE,
    PREFIX_AND_NAMESPACE: {
        "xsd": "http://www.w3.org/2001/XMLSchema#"
    },
    NS: _NS,
    // *******************
    // All the Properties.
    // *******************
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ changes: _NS("changes"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ string: _NS("string"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ boolean: _NS("boolean"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ float: _NS("float"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ double: _NS("double"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ decimal: _NS("decimal"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ dateTime: _NS("dateTime"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ duration: _NS("duration"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ hexBinary: _NS("hexBinary"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ base64Binary: _NS("base64Binary"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ anyURI: _NS("anyURI"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ ID: _NS("ID"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ IDREF: _NS("IDREF"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ ENTITY: _NS("ENTITY"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ NOTATION: _NS("NOTATION"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ normalizedString: _NS("normalizedString"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ token: _NS("token"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ language: _NS("language"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ IDREFS: _NS("IDREFS"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ ENTITIES: _NS("ENTITIES"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ NMTOKEN: _NS("NMTOKEN"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ NMTOKENS: _NS("NMTOKENS"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ Name: _NS("Name"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ QName: _NS("QName"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ NCName: _NS("NCName"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ integer: _NS("integer"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ nonNegativeInteger: _NS("nonNegativeInteger"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ positiveInteger: _NS("positiveInteger"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ nonPositiveInteger: _NS("nonPositiveInteger"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ negativeInteger: _NS("negativeInteger"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ byte: _NS("byte"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ int: _NS("int"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ long: _NS("long"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ short: _NS("short"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ unsignedByte: _NS("unsignedByte"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ unsignedInt: _NS("unsignedInt"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ unsignedLong: _NS("unsignedLong"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ unsignedShort: _NS("unsignedShort"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ date: _NS("date"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ time: _NS("time"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ gYearMonth: _NS("gYearMonth"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ gYear: _NS("gYear"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ gMonthDay: _NS("gMonthDay"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ gDay: _NS("gDay"),
    /**
     * .
     *
     * This term provides descriptions only in English.
     *
     * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
     */ gMonth: _NS("gMonth")
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"hB1uZ"}]},["iEcXk","axVHp"], "axVHp", "parcelRequire94c2")

//# sourceMappingURL=index.f3dab904.js.map
